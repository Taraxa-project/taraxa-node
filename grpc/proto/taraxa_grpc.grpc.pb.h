// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: proto/taraxa_grpc.proto
// Original file comments:
//
// @Copyright: Taraxa.io 
// @Author: Chia-Chun Lin 
// @Date: 2019-02-27 18:22:05 
// @Last Modified by: Chia-Chun Lin
// @Last Modified time: 2019-03-05 16:35:48
//
#ifndef GRPC_proto_2ftaraxa_5fgrpc_2eproto__INCLUDED
#define GRPC_proto_2ftaraxa_5fgrpc_2eproto__INCLUDED

#include "proto/taraxa_grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace taraxa_grpc {

class TaraxaProtoService final {
 public:
  static constexpr char const* service_full_name() {
    return "taraxa_grpc.TaraxaProtoService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status SendProtoTransaction(::grpc::ClientContext* context, const ::taraxa_grpc::ProtoTransaction& request, ::taraxa_grpc::SendProtoTransactionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::taraxa_grpc::SendProtoTransactionResponse>> AsyncSendProtoTransaction(::grpc::ClientContext* context, const ::taraxa_grpc::ProtoTransaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::taraxa_grpc::SendProtoTransactionResponse>>(AsyncSendProtoTransactionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::taraxa_grpc::SendProtoTransactionResponse>> PrepareAsyncSendProtoTransaction(::grpc::ClientContext* context, const ::taraxa_grpc::ProtoTransaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::taraxa_grpc::SendProtoTransactionResponse>>(PrepareAsyncSendProtoTransactionRaw(context, request, cq));
    }
    virtual ::grpc::Status GetProtoTransaction(::grpc::ClientContext* context, const ::taraxa_grpc::GetProtoTransactionRequest& request, ::taraxa_grpc::ProtoTransaction* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::taraxa_grpc::ProtoTransaction>> AsyncGetProtoTransaction(::grpc::ClientContext* context, const ::taraxa_grpc::GetProtoTransactionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::taraxa_grpc::ProtoTransaction>>(AsyncGetProtoTransactionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::taraxa_grpc::ProtoTransaction>> PrepareAsyncGetProtoTransaction(::grpc::ClientContext* context, const ::taraxa_grpc::GetProtoTransactionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::taraxa_grpc::ProtoTransaction>>(PrepareAsyncGetProtoTransactionRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void SendProtoTransaction(::grpc::ClientContext* context, const ::taraxa_grpc::ProtoTransaction* request, ::taraxa_grpc::SendProtoTransactionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetProtoTransaction(::grpc::ClientContext* context, const ::taraxa_grpc::GetProtoTransactionRequest* request, ::taraxa_grpc::ProtoTransaction* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::taraxa_grpc::SendProtoTransactionResponse>* AsyncSendProtoTransactionRaw(::grpc::ClientContext* context, const ::taraxa_grpc::ProtoTransaction& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::taraxa_grpc::SendProtoTransactionResponse>* PrepareAsyncSendProtoTransactionRaw(::grpc::ClientContext* context, const ::taraxa_grpc::ProtoTransaction& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::taraxa_grpc::ProtoTransaction>* AsyncGetProtoTransactionRaw(::grpc::ClientContext* context, const ::taraxa_grpc::GetProtoTransactionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::taraxa_grpc::ProtoTransaction>* PrepareAsyncGetProtoTransactionRaw(::grpc::ClientContext* context, const ::taraxa_grpc::GetProtoTransactionRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status SendProtoTransaction(::grpc::ClientContext* context, const ::taraxa_grpc::ProtoTransaction& request, ::taraxa_grpc::SendProtoTransactionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::taraxa_grpc::SendProtoTransactionResponse>> AsyncSendProtoTransaction(::grpc::ClientContext* context, const ::taraxa_grpc::ProtoTransaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::taraxa_grpc::SendProtoTransactionResponse>>(AsyncSendProtoTransactionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::taraxa_grpc::SendProtoTransactionResponse>> PrepareAsyncSendProtoTransaction(::grpc::ClientContext* context, const ::taraxa_grpc::ProtoTransaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::taraxa_grpc::SendProtoTransactionResponse>>(PrepareAsyncSendProtoTransactionRaw(context, request, cq));
    }
    ::grpc::Status GetProtoTransaction(::grpc::ClientContext* context, const ::taraxa_grpc::GetProtoTransactionRequest& request, ::taraxa_grpc::ProtoTransaction* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::taraxa_grpc::ProtoTransaction>> AsyncGetProtoTransaction(::grpc::ClientContext* context, const ::taraxa_grpc::GetProtoTransactionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::taraxa_grpc::ProtoTransaction>>(AsyncGetProtoTransactionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::taraxa_grpc::ProtoTransaction>> PrepareAsyncGetProtoTransaction(::grpc::ClientContext* context, const ::taraxa_grpc::GetProtoTransactionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::taraxa_grpc::ProtoTransaction>>(PrepareAsyncGetProtoTransactionRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void SendProtoTransaction(::grpc::ClientContext* context, const ::taraxa_grpc::ProtoTransaction* request, ::taraxa_grpc::SendProtoTransactionResponse* response, std::function<void(::grpc::Status)>) override;
      void GetProtoTransaction(::grpc::ClientContext* context, const ::taraxa_grpc::GetProtoTransactionRequest* request, ::taraxa_grpc::ProtoTransaction* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::taraxa_grpc::SendProtoTransactionResponse>* AsyncSendProtoTransactionRaw(::grpc::ClientContext* context, const ::taraxa_grpc::ProtoTransaction& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::taraxa_grpc::SendProtoTransactionResponse>* PrepareAsyncSendProtoTransactionRaw(::grpc::ClientContext* context, const ::taraxa_grpc::ProtoTransaction& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::taraxa_grpc::ProtoTransaction>* AsyncGetProtoTransactionRaw(::grpc::ClientContext* context, const ::taraxa_grpc::GetProtoTransactionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::taraxa_grpc::ProtoTransaction>* PrepareAsyncGetProtoTransactionRaw(::grpc::ClientContext* context, const ::taraxa_grpc::GetProtoTransactionRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SendProtoTransaction_;
    const ::grpc::internal::RpcMethod rpcmethod_GetProtoTransaction_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status SendProtoTransaction(::grpc::ServerContext* context, const ::taraxa_grpc::ProtoTransaction* request, ::taraxa_grpc::SendProtoTransactionResponse* response);
    virtual ::grpc::Status GetProtoTransaction(::grpc::ServerContext* context, const ::taraxa_grpc::GetProtoTransactionRequest* request, ::taraxa_grpc::ProtoTransaction* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SendProtoTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SendProtoTransaction() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SendProtoTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendProtoTransaction(::grpc::ServerContext* context, const ::taraxa_grpc::ProtoTransaction* request, ::taraxa_grpc::SendProtoTransactionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendProtoTransaction(::grpc::ServerContext* context, ::taraxa_grpc::ProtoTransaction* request, ::grpc::ServerAsyncResponseWriter< ::taraxa_grpc::SendProtoTransactionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetProtoTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetProtoTransaction() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetProtoTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProtoTransaction(::grpc::ServerContext* context, const ::taraxa_grpc::GetProtoTransactionRequest* request, ::taraxa_grpc::ProtoTransaction* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetProtoTransaction(::grpc::ServerContext* context, ::taraxa_grpc::GetProtoTransactionRequest* request, ::grpc::ServerAsyncResponseWriter< ::taraxa_grpc::ProtoTransaction>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SendProtoTransaction<WithAsyncMethod_GetProtoTransaction<Service > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SendProtoTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_SendProtoTransaction() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::taraxa_grpc::ProtoTransaction, ::taraxa_grpc::SendProtoTransactionResponse>(
          [this](::grpc::ServerContext* context,
                 const ::taraxa_grpc::ProtoTransaction* request,
                 ::taraxa_grpc::SendProtoTransactionResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SendProtoTransaction(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_SendProtoTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendProtoTransaction(::grpc::ServerContext* context, const ::taraxa_grpc::ProtoTransaction* request, ::taraxa_grpc::SendProtoTransactionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SendProtoTransaction(::grpc::ServerContext* context, const ::taraxa_grpc::ProtoTransaction* request, ::taraxa_grpc::SendProtoTransactionResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetProtoTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetProtoTransaction() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::taraxa_grpc::GetProtoTransactionRequest, ::taraxa_grpc::ProtoTransaction>(
          [this](::grpc::ServerContext* context,
                 const ::taraxa_grpc::GetProtoTransactionRequest* request,
                 ::taraxa_grpc::ProtoTransaction* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetProtoTransaction(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_GetProtoTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProtoTransaction(::grpc::ServerContext* context, const ::taraxa_grpc::GetProtoTransactionRequest* request, ::taraxa_grpc::ProtoTransaction* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetProtoTransaction(::grpc::ServerContext* context, const ::taraxa_grpc::GetProtoTransactionRequest* request, ::taraxa_grpc::ProtoTransaction* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_SendProtoTransaction<ExperimentalWithCallbackMethod_GetProtoTransaction<Service > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SendProtoTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SendProtoTransaction() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SendProtoTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendProtoTransaction(::grpc::ServerContext* context, const ::taraxa_grpc::ProtoTransaction* request, ::taraxa_grpc::SendProtoTransactionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetProtoTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetProtoTransaction() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetProtoTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProtoTransaction(::grpc::ServerContext* context, const ::taraxa_grpc::GetProtoTransactionRequest* request, ::taraxa_grpc::ProtoTransaction* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendProtoTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SendProtoTransaction() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SendProtoTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendProtoTransaction(::grpc::ServerContext* context, const ::taraxa_grpc::ProtoTransaction* request, ::taraxa_grpc::SendProtoTransactionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendProtoTransaction(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetProtoTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetProtoTransaction() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetProtoTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProtoTransaction(::grpc::ServerContext* context, const ::taraxa_grpc::GetProtoTransactionRequest* request, ::taraxa_grpc::ProtoTransaction* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetProtoTransaction(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SendProtoTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_SendProtoTransaction() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SendProtoTransaction(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SendProtoTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendProtoTransaction(::grpc::ServerContext* context, const ::taraxa_grpc::ProtoTransaction* request, ::taraxa_grpc::SendProtoTransactionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SendProtoTransaction(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetProtoTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetProtoTransaction() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetProtoTransaction(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetProtoTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProtoTransaction(::grpc::ServerContext* context, const ::taraxa_grpc::GetProtoTransactionRequest* request, ::taraxa_grpc::ProtoTransaction* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetProtoTransaction(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendProtoTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SendProtoTransaction() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::taraxa_grpc::ProtoTransaction, ::taraxa_grpc::SendProtoTransactionResponse>(std::bind(&WithStreamedUnaryMethod_SendProtoTransaction<BaseClass>::StreamedSendProtoTransaction, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SendProtoTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendProtoTransaction(::grpc::ServerContext* context, const ::taraxa_grpc::ProtoTransaction* request, ::taraxa_grpc::SendProtoTransactionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendProtoTransaction(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::taraxa_grpc::ProtoTransaction,::taraxa_grpc::SendProtoTransactionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetProtoTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetProtoTransaction() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::taraxa_grpc::GetProtoTransactionRequest, ::taraxa_grpc::ProtoTransaction>(std::bind(&WithStreamedUnaryMethod_GetProtoTransaction<BaseClass>::StreamedGetProtoTransaction, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetProtoTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetProtoTransaction(::grpc::ServerContext* context, const ::taraxa_grpc::GetProtoTransactionRequest* request, ::taraxa_grpc::ProtoTransaction* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetProtoTransaction(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::taraxa_grpc::GetProtoTransactionRequest,::taraxa_grpc::ProtoTransaction>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SendProtoTransaction<WithStreamedUnaryMethod_GetProtoTransaction<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SendProtoTransaction<WithStreamedUnaryMethod_GetProtoTransaction<Service > > StreamedService;
};

}  // namespace taraxa_grpc


#endif  // GRPC_proto_2ftaraxa_5fgrpc_2eproto__INCLUDED
