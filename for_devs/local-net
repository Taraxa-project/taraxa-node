#!/usr/bin/env python3

import click
import subprocess
import threading
import os
from random import *
import time
import json
import sys
from web3 import Web3

colors = {
    "grey": 89,
    "darkGrey": 90,
    "red": 91,
    "green": 92,
    "yellow": 93,
    "lightPurple": 94,
    "purple": 95,
    "cyan": 96,
    "lightGray": 97,
}

default_color = "grey"

worker_colors = {}
chain_id = 0
faucet_private_key = ''
faucet_public_address = ''
boot_nodes_public_addresses = {}

data_dir = 'local-net-data'
if not os.path.isdir(f'./{data_dir}'):
    os.mkdir(f'./{data_dir}')

local_net = os.path.realpath(f'./{data_dir}')


@click.group()
def cli():
    """Local Net CLI"""
    pass


@cli.command()
@click.option('--boot-nodes', default=3, help='Number of boot nodes')
@click.option('--rpc-nodes', default=3, help='Number of RPC nodes')
@click.option('--tps', default=0, help='Number of transactions per second (if zero the faucet will not start)')
@click.argument('binary')
def start(boot_nodes, rpc_nodes, tps, binary):
    """Start a local testnet"""
    binary = os.path.realpath(binary)

    config(binary, boot_nodes, rpc_nodes)
    start_workers(binary, boot_nodes, rpc_nodes, tps)


def config(binary, boot_nodes, rpc_nodes):
    global boot_nodes_public_addresses

    boot_nodes_flags = []
    private_keys = {}
    for i in range(boot_nodes):
        worker_name = f'boot-node-{i}'
        wallet_path = f'wallet-boot-node-{i}.json'

        (private_key, public_key, public_address) = generate_node_wallet(binary, wallet_path)

        private_keys[worker_name] = private_key
        boot_nodes_public_addresses[worker_name] = public_address

        boot_nodes_flags.append(
            f'127.0.0.1:10{i+1}02/{public_key}')

    boot_nodes_flags = " ".join(boot_nodes_flags)

    generate_faucet_wallet(binary)

    timestamp = hex(int(time.time()))

    existing_chain_config = None
    existing_chain_config_node = None

    for type in ("boot", "rpc"):
        if type == "boot":
            nodes = boot_nodes
        else:
            nodes = rpc_nodes

        for i in range(nodes):
            if type == "boot":
                worker_name = f'boot-node-{i}'
            else:
                worker_name = f'rpc-node-{i}'

            config_path = f'./{data_dir}/conf-{worker_name}.json'
            wallet_path = f'./{data_dir}/wallet-{worker_name}.json'

            if os.path.isfile(config_path) and os.path.isfile(wallet_path):
                # If there is some existing config, take timestamp from it
                tmp_config = json.loads('{}')
                with open(config_path) as json_file:
                    config_data = json.load(json_file)
                    tmp_config.update(config_data)

                if not existing_chain_config:
                    existing_chain_config = tmp_config['chain_config']
                    existing_chain_config_node = worker_name

                if tmp_config['chain_config'] != existing_chain_config:
                    sys.exit("Existing chain_configs don't match between nodes: " + existing_chain_config_node + " & " + worker_name)

                timestamp = tmp_config['chain_config']['dag_genesis_block']['timestamp']
                continue

            if type == "boot" and existing_chain_config:
                sys.exit("Cannot increase number of boot nodes without resetting the network")

            if not os.path.isdir(f'{local_net}/db-{worker_name}'):
                os.mkdir(f'{local_net}/db-{worker_name}')

            cmd = ''
            cmd += f'{binary} --command config --network-id {chain_id} '
            cmd += f'--boot-nodes {boot_nodes_flags} '

            if type == "boot":
                cmd += '--boot-node '
                cmd += f'--node-secret {private_keys[worker_name]} '

            if type == "boot":
                port_prefix = '0'
            else:
                port_prefix = '1'

            cmd += f'--config {config_path} '
            cmd += f'--wallet {wallet_path} '
            cmd += f'--data-dir {local_net}/db-{worker_name} '

            os.system(cmd)

            config = json.loads('{}')
            with open(config_path) as json_file:
                config_data = json.load(json_file)
                config.update(config_data)

            if existing_chain_config:
                config['chain_config'] = existing_chain_config
            else:
                eligibility_balance_threshold = config['chain_config'][
                    'final_chain']['state']['dpos']['eligibility_balance_threshold']
                genesis_state = config['chain_config']['final_chain']['state']['dpos']['genesis_state']
                genesis_balances = config['chain_config']['final_chain']['state']['genesis_balances']

                genesis_balances_faucet_address = list(genesis_balances.keys())[0]
                delegator_address = list(genesis_balances.keys())[1]
                genesis_balances_faucet_value = genesis_balances[genesis_balances_faucet_address]
                del genesis_balances[genesis_balances_faucet_address]
                genesis_balances[faucet_public_address] = genesis_balances_faucet_value

                genesis_state = {}
                genesis_state[delegator_address] = {}
                for a in boot_nodes_public_addresses:
                    genesis_state[delegator_address][boot_nodes_public_addresses[a]
                                        ] = eligibility_balance_threshold

                config['chain_config']['final_chain']['state']['dpos']['genesis_state'] = genesis_state
                config['chain_config']['final_chain']['state']['genesis_balances'] = genesis_balances
                config['chain_config']['dag_genesis_block']['timestamp'] = timestamp
                config['chain_config']['final_chain']['genesis_block_fields']['timestamp'] = timestamp

            config['network_tcp_port'] = int(f'1{port_prefix}{i+1}02')
            config['network_udp_port'] = int(f'1{port_prefix}{i+1}02')
            config['rpc']['http_port'] = int(f'7{port_prefix}{i+1}7')
            config['rpc']['ws_port'] = int(f'8{port_prefix}{i+1}7')

            with open(config_path, 'w') as json_file:
                json.dump(config, json_file, indent=2)

def generate_node_wallet(binary, wallet_path):
    global chain_id
    global faucet_private_key
    global faucet_public_address

    if os.path.isfile(wallet_path):
        wallet = json.loads('{}')
        with open(wallet_path) as json_file:
            wallet_data = json.load(json_file)
            wallet.update(wallet_data)

        return (wallet['node_secret'], wallet['node_public'], wallet['node_address'])
    else:
        return generate_wallet(binary)

def generate_faucet_wallet(binary):
    global chain_id
    global faucet_private_key
    global faucet_public_address

    wallet_path = f'./{data_dir}/faucet-wallet.json'

    if os.path.isfile(wallet_path):
        wallet = json.loads('{}')
        with open(wallet_path) as json_file:
            wallet_data = json.load(json_file)
            wallet.update(wallet_data)

        chain_id = wallet['chain_id']
        faucet_private_key = wallet['faucet_private_key']
        faucet_public_address = wallet['faucet_public_address']
    else:
        (faucet_private_key, _, faucet_public_address) = generate_wallet(binary)
        chain_id = randint(500, 1000)

        wallet = {
            "chain_id": chain_id,
            "faucet_private_key": faucet_private_key,
            "faucet_public_address": faucet_public_address,
        }
        with open(f'./{data_dir}/faucet-wallet.json', 'w') as json_file:
            json.dump(wallet, json_file, indent=2)


def generate_wallet(binary):
    private_key = subprocess.check_output(
        f'{binary} --command account | grep node_secret | cut -d\  -f3- | tr -d \\"', shell=True).strip().decode('utf-8')
    public_key = subprocess.check_output(
        f'{binary} --command account {private_key} | grep node_public | cut -d\  -f3- | tr -d \\"', shell=True).strip().decode('utf-8')
    public_address = subprocess.check_output(
        f'{binary} --command account {private_key} | grep node_address| cut -d\  -f3- | tr -d \\"', shell=True).strip().decode('utf-8')

    return (private_key, public_key, public_address)


def start_workers(binary, boot_nodes, rpc_nodes, tps):
    c = list(colors.keys())
    for type in ("boot", "rpc"):
        if type == "boot":
            nodes = boot_nodes
        else:
            nodes = rpc_nodes

        for i in range(nodes):
            if type == "boot":
                worker_name = f'boot-node-{i}'
            else:
                worker_name = f'rpc-node-{i}'

            color = default_color
            if c:
                color = c.pop()

            worker_colors[worker_name] = color
            thread = threading.Thread(
                target=node_worker, args=(binary, worker_name))
            thread.start()

    if tps > 0:
        color = default_color
        if c:
            color = c.pop()

        worker_colors['faucet'] = color
        thread = threading.Thread(
            target=faucet_worker, args=(tps,))
        thread.start()


def node_worker(binary, worker_name):
    process = subprocess.Popen(f'{binary} --config ./{data_dir}/conf-{worker_name}.json --wallet ./{data_dir}/wallet-{worker_name}.json',
                               shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    logs(worker_name, process)


def faucet_worker(tps):
    # Wait for the nodes to start
    time.sleep(10)
    web3 = Web3(Web3.HTTPProvider('http://127.0.0.1:7017'))
    nonce = web3.eth.getTransactionCount(
        Web3.toChecksumAddress(faucet_public_address))

    boot_nodes = list(boot_nodes_public_addresses)

    while True:
        time.sleep(1/tps)
        to = boot_nodes_public_addresses[boot_nodes[randint(
            0, len(boot_nodes)-1)]]
        tx = {
            'nonce': nonce,
            'to': Web3.toChecksumAddress(to),
            'value': web3.toWei(100000000, 'gwei'),
            'gas': 21000,
            'gasPrice': web3.toWei(1, 'gwei'),
            'chainId': int(chain_id)
        }
        nonce = nonce + 1
        signed_tx = web3.eth.account.sign_transaction(tx, faucet_private_key)

        current_time = time.localtime()
        t = time.strftime('%Y-%m-%d %H:%M:%S', current_time)

        try:
            tx_hash = web3.eth.sendRawTransaction(signed_tx.rawTransaction)
            log_format(
                'faucet', f'{t} Dripped to {to}, tx_hash: {web3.toHex(tx_hash)}')
        except:
            log_format('faucet', f'{t} Failed to drip to {to}')
            pass


def logs(name, process):
    while process.poll() is None:
        out = process.stdout.readline().strip().decode('utf-8')
        if out:
            log_format(name, out)


def log_format(name, log):
    worker_name = "\033[{}m[{}]\033[00m\t".format(
        colors[worker_colors[name]], name)
    print("{} {}" .format(worker_name, log))


if __name__ == '__main__':
    cli()
