// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// WARNING! Do not edit this file manually, your changes will be overwritten.

#pragma once

#ifndef PENDINGOBJECT_H
#define PENDINGOBJECT_H

#include "TaraxaSchema.h"

namespace graphql::taraxa::object {
namespace methods::PendingHas {

template <class TImpl>
concept getTransactionCountWithParams = requires (TImpl impl, service::FieldParams params)
{
	{ service::AwaitableScalar<int> { impl.getTransactionCount(std::move(params)) } };
};

template <class TImpl>
concept getTransactionCount = requires (TImpl impl)
{
	{ service::AwaitableScalar<int> { impl.getTransactionCount() } };
};

template <class TImpl>
concept getTransactionsWithParams = requires (TImpl impl, service::FieldParams params)
{
	{ service::AwaitableObject<std::optional<std::vector<std::shared_ptr<Transaction>>>> { impl.getTransactions(std::move(params)) } };
};

template <class TImpl>
concept getTransactions = requires (TImpl impl)
{
	{ service::AwaitableObject<std::optional<std::vector<std::shared_ptr<Transaction>>>> { impl.getTransactions() } };
};

template <class TImpl>
concept getAccountWithParams = requires (TImpl impl, service::FieldParams params, response::Value addressArg)
{
	{ service::AwaitableObject<std::shared_ptr<Account>> { impl.getAccount(std::move(params), std::move(addressArg)) } };
};

template <class TImpl>
concept getAccount = requires (TImpl impl, response::Value addressArg)
{
	{ service::AwaitableObject<std::shared_ptr<Account>> { impl.getAccount(std::move(addressArg)) } };
};

template <class TImpl>
concept getCallWithParams = requires (TImpl impl, service::FieldParams params, CallData dataArg)
{
	{ service::AwaitableObject<std::shared_ptr<CallResult>> { impl.getCall(std::move(params), std::move(dataArg)) } };
};

template <class TImpl>
concept getCall = requires (TImpl impl, CallData dataArg)
{
	{ service::AwaitableObject<std::shared_ptr<CallResult>> { impl.getCall(std::move(dataArg)) } };
};

template <class TImpl>
concept getEstimateGasWithParams = requires (TImpl impl, service::FieldParams params, CallData dataArg)
{
	{ service::AwaitableScalar<response::Value> { impl.getEstimateGas(std::move(params), std::move(dataArg)) } };
};

template <class TImpl>
concept getEstimateGas = requires (TImpl impl, CallData dataArg)
{
	{ service::AwaitableScalar<response::Value> { impl.getEstimateGas(std::move(dataArg)) } };
};

template <class TImpl>
concept beginSelectionSet = requires (TImpl impl, const service::SelectionSetParams params)
{
	{ impl.beginSelectionSet(params) };
};

template <class TImpl>
concept endSelectionSet = requires (TImpl impl, const service::SelectionSetParams params)
{
	{ impl.endSelectionSet(params) };
};

} // namespace methods::PendingHas

class [[nodiscard]] Pending final
	: public service::Object
{
private:
	[[nodiscard]] service::AwaitableResolver resolveTransactionCount(service::ResolverParams&& params) const;
	[[nodiscard]] service::AwaitableResolver resolveTransactions(service::ResolverParams&& params) const;
	[[nodiscard]] service::AwaitableResolver resolveAccount(service::ResolverParams&& params) const;
	[[nodiscard]] service::AwaitableResolver resolveCall(service::ResolverParams&& params) const;
	[[nodiscard]] service::AwaitableResolver resolveEstimateGas(service::ResolverParams&& params) const;

	[[nodiscard]] service::AwaitableResolver resolve_typename(service::ResolverParams&& params) const;

	struct [[nodiscard]] Concept
	{
		virtual ~Concept() = default;

		virtual void beginSelectionSet(const service::SelectionSetParams& params) const = 0;
		virtual void endSelectionSet(const service::SelectionSetParams& params) const = 0;

		[[nodiscard]] virtual service::AwaitableScalar<int> getTransactionCount(service::FieldParams&& params) const = 0;
		[[nodiscard]] virtual service::AwaitableObject<std::optional<std::vector<std::shared_ptr<Transaction>>>> getTransactions(service::FieldParams&& params) const = 0;
		[[nodiscard]] virtual service::AwaitableObject<std::shared_ptr<Account>> getAccount(service::FieldParams&& params, response::Value&& addressArg) const = 0;
		[[nodiscard]] virtual service::AwaitableObject<std::shared_ptr<CallResult>> getCall(service::FieldParams&& params, CallData&& dataArg) const = 0;
		[[nodiscard]] virtual service::AwaitableScalar<response::Value> getEstimateGas(service::FieldParams&& params, CallData&& dataArg) const = 0;
	};

	template <class T>
	struct [[nodiscard]] Model
		: Concept
	{
		Model(std::shared_ptr<T>&& pimpl) noexcept
			: _pimpl { std::move(pimpl) }
		{
		}

		[[nodiscard]] service::AwaitableScalar<int> getTransactionCount(service::FieldParams&& params) const final
		{
			if constexpr (methods::PendingHas::getTransactionCountWithParams<T>)
			{
				return { _pimpl->getTransactionCount(std::move(params)) };
			}
			else
			{
				static_assert(methods::PendingHas::getTransactionCount<T>, R"msg(Pending::getTransactionCount is not implemented)msg");
				return { _pimpl->getTransactionCount() };
			}
		}

		[[nodiscard]] service::AwaitableObject<std::optional<std::vector<std::shared_ptr<Transaction>>>> getTransactions(service::FieldParams&& params) const final
		{
			if constexpr (methods::PendingHas::getTransactionsWithParams<T>)
			{
				return { _pimpl->getTransactions(std::move(params)) };
			}
			else
			{
				static_assert(methods::PendingHas::getTransactions<T>, R"msg(Pending::getTransactions is not implemented)msg");
				return { _pimpl->getTransactions() };
			}
		}

		[[nodiscard]] service::AwaitableObject<std::shared_ptr<Account>> getAccount(service::FieldParams&& params, response::Value&& addressArg) const final
		{
			if constexpr (methods::PendingHas::getAccountWithParams<T>)
			{
				return { _pimpl->getAccount(std::move(params), std::move(addressArg)) };
			}
			else
			{
				static_assert(methods::PendingHas::getAccount<T>, R"msg(Pending::getAccount is not implemented)msg");
				return { _pimpl->getAccount(std::move(addressArg)) };
			}
		}

		[[nodiscard]] service::AwaitableObject<std::shared_ptr<CallResult>> getCall(service::FieldParams&& params, CallData&& dataArg) const final
		{
			if constexpr (methods::PendingHas::getCallWithParams<T>)
			{
				return { _pimpl->getCall(std::move(params), std::move(dataArg)) };
			}
			else
			{
				static_assert(methods::PendingHas::getCall<T>, R"msg(Pending::getCall is not implemented)msg");
				return { _pimpl->getCall(std::move(dataArg)) };
			}
		}

		[[nodiscard]] service::AwaitableScalar<response::Value> getEstimateGas(service::FieldParams&& params, CallData&& dataArg) const final
		{
			if constexpr (methods::PendingHas::getEstimateGasWithParams<T>)
			{
				return { _pimpl->getEstimateGas(std::move(params), std::move(dataArg)) };
			}
			else
			{
				static_assert(methods::PendingHas::getEstimateGas<T>, R"msg(Pending::getEstimateGas is not implemented)msg");
				return { _pimpl->getEstimateGas(std::move(dataArg)) };
			}
		}

		void beginSelectionSet(const service::SelectionSetParams& params) const final
		{
			if constexpr (methods::PendingHas::beginSelectionSet<T>)
			{
				_pimpl->beginSelectionSet(params);
			}
		}

		void endSelectionSet(const service::SelectionSetParams& params) const final
		{
			if constexpr (methods::PendingHas::endSelectionSet<T>)
			{
				_pimpl->endSelectionSet(params);
			}
		}

	private:
		const std::shared_ptr<T> _pimpl;
	};

	Pending(std::unique_ptr<const Concept>&& pimpl) noexcept;

	[[nodiscard]] service::TypeNames getTypeNames() const noexcept;
	[[nodiscard]] service::ResolverMap getResolvers() const noexcept;

	void beginSelectionSet(const service::SelectionSetParams& params) const final;
	void endSelectionSet(const service::SelectionSetParams& params) const final;

	const std::unique_ptr<const Concept> _pimpl;

public:
	template <class T>
	Pending(std::shared_ptr<T> pimpl) noexcept
		: Pending { std::unique_ptr<const Concept> { std::make_unique<Model<T>>(std::move(pimpl)) } }
	{
	}

	[[nodiscard]] static constexpr std::string_view getObjectType() noexcept
	{
		return { R"gql(Pending)gql" };
	}
};

} // namespace graphql::taraxa::object

#endif // PENDINGOBJECT_H
