// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// WARNING! Do not edit this file manually, your changes will be overwritten.

#pragma once

#ifndef CURRENTSTATEOBJECT_H
#define CURRENTSTATEOBJECT_H

#include "TaraxaSchema.h"

namespace graphql::taraxa::object {
namespace methods::CurrentStateHas {

template <class TImpl>
concept getFinalBlockWithParams = requires (TImpl impl, service::FieldParams params)
{
	{ service::AwaitableScalar<response::Value> { impl.getFinalBlock(std::move(params)) } };
};

template <class TImpl>
concept getFinalBlock = requires (TImpl impl)
{
	{ service::AwaitableScalar<response::Value> { impl.getFinalBlock() } };
};

template <class TImpl>
concept getDagBlockLevelWithParams = requires (TImpl impl, service::FieldParams params)
{
	{ service::AwaitableScalar<response::Value> { impl.getDagBlockLevel(std::move(params)) } };
};

template <class TImpl>
concept getDagBlockLevel = requires (TImpl impl)
{
	{ service::AwaitableScalar<response::Value> { impl.getDagBlockLevel() } };
};

template <class TImpl>
concept getDagBlockPeriodWithParams = requires (TImpl impl, service::FieldParams params)
{
	{ service::AwaitableScalar<response::Value> { impl.getDagBlockPeriod(std::move(params)) } };
};

template <class TImpl>
concept getDagBlockPeriod = requires (TImpl impl)
{
	{ service::AwaitableScalar<response::Value> { impl.getDagBlockPeriod() } };
};

template <class TImpl>
concept beginSelectionSet = requires (TImpl impl, const service::SelectionSetParams params)
{
	{ impl.beginSelectionSet(params) };
};

template <class TImpl>
concept endSelectionSet = requires (TImpl impl, const service::SelectionSetParams params)
{
	{ impl.endSelectionSet(params) };
};

} // namespace methods::CurrentStateHas

class [[nodiscard]] CurrentState final
	: public service::Object
{
private:
	[[nodiscard]] service::AwaitableResolver resolveFinalBlock(service::ResolverParams&& params) const;
	[[nodiscard]] service::AwaitableResolver resolveDagBlockLevel(service::ResolverParams&& params) const;
	[[nodiscard]] service::AwaitableResolver resolveDagBlockPeriod(service::ResolverParams&& params) const;

	[[nodiscard]] service::AwaitableResolver resolve_typename(service::ResolverParams&& params) const;

	struct [[nodiscard]] Concept
	{
		virtual ~Concept() = default;

		virtual void beginSelectionSet(const service::SelectionSetParams& params) const = 0;
		virtual void endSelectionSet(const service::SelectionSetParams& params) const = 0;

		[[nodiscard]] virtual service::AwaitableScalar<response::Value> getFinalBlock(service::FieldParams&& params) const = 0;
		[[nodiscard]] virtual service::AwaitableScalar<response::Value> getDagBlockLevel(service::FieldParams&& params) const = 0;
		[[nodiscard]] virtual service::AwaitableScalar<response::Value> getDagBlockPeriod(service::FieldParams&& params) const = 0;
	};

	template <class T>
	struct [[nodiscard]] Model
		: Concept
	{
		Model(std::shared_ptr<T>&& pimpl) noexcept
			: _pimpl { std::move(pimpl) }
		{
		}

		[[nodiscard]] service::AwaitableScalar<response::Value> getFinalBlock(service::FieldParams&& params) const final
		{
			if constexpr (methods::CurrentStateHas::getFinalBlockWithParams<T>)
			{
				return { _pimpl->getFinalBlock(std::move(params)) };
			}
			else
			{
				static_assert(methods::CurrentStateHas::getFinalBlock<T>, R"msg(CurrentState::getFinalBlock is not implemented)msg");
				return { _pimpl->getFinalBlock() };
			}
		}

		[[nodiscard]] service::AwaitableScalar<response::Value> getDagBlockLevel(service::FieldParams&& params) const final
		{
			if constexpr (methods::CurrentStateHas::getDagBlockLevelWithParams<T>)
			{
				return { _pimpl->getDagBlockLevel(std::move(params)) };
			}
			else
			{
				static_assert(methods::CurrentStateHas::getDagBlockLevel<T>, R"msg(CurrentState::getDagBlockLevel is not implemented)msg");
				return { _pimpl->getDagBlockLevel() };
			}
		}

		[[nodiscard]] service::AwaitableScalar<response::Value> getDagBlockPeriod(service::FieldParams&& params) const final
		{
			if constexpr (methods::CurrentStateHas::getDagBlockPeriodWithParams<T>)
			{
				return { _pimpl->getDagBlockPeriod(std::move(params)) };
			}
			else
			{
				static_assert(methods::CurrentStateHas::getDagBlockPeriod<T>, R"msg(CurrentState::getDagBlockPeriod is not implemented)msg");
				return { _pimpl->getDagBlockPeriod() };
			}
		}

		void beginSelectionSet(const service::SelectionSetParams& params) const final
		{
			if constexpr (methods::CurrentStateHas::beginSelectionSet<T>)
			{
				_pimpl->beginSelectionSet(params);
			}
		}

		void endSelectionSet(const service::SelectionSetParams& params) const final
		{
			if constexpr (methods::CurrentStateHas::endSelectionSet<T>)
			{
				_pimpl->endSelectionSet(params);
			}
		}

	private:
		const std::shared_ptr<T> _pimpl;
	};

	CurrentState(std::unique_ptr<const Concept>&& pimpl) noexcept;

	[[nodiscard]] service::TypeNames getTypeNames() const noexcept;
	[[nodiscard]] service::ResolverMap getResolvers() const noexcept;

	void beginSelectionSet(const service::SelectionSetParams& params) const final;
	void endSelectionSet(const service::SelectionSetParams& params) const final;

	const std::unique_ptr<const Concept> _pimpl;

public:
	template <class T>
	CurrentState(std::shared_ptr<T> pimpl) noexcept
		: CurrentState { std::unique_ptr<const Concept> { std::make_unique<Model<T>>(std::move(pimpl)) } }
	{
	}

	[[nodiscard]] static constexpr std::string_view getObjectType() noexcept
	{
		return { R"gql(CurrentState)gql" };
	}
};

} // namespace graphql::taraxa::object

#endif // CURRENTSTATEOBJECT_H
