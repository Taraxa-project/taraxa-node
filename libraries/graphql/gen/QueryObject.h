// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// WARNING! Do not edit this file manually, your changes will be overwritten.

#pragma once

#ifndef QUERYOBJECT_H
#define QUERYOBJECT_H

#include "TaraxaSchema.h"

namespace graphql::taraxa::object {
namespace methods::QueryHas {

template <class TImpl>
concept getBlockWithParams = requires (TImpl impl, service::FieldParams params, std::optional<response::Value> numberArg, std::optional<response::Value> hashArg)
{
	{ service::AwaitableObject<std::shared_ptr<Block>> { impl.getBlock(std::move(params), std::move(numberArg), std::move(hashArg)) } };
};

template <class TImpl>
concept getBlock = requires (TImpl impl, std::optional<response::Value> numberArg, std::optional<response::Value> hashArg)
{
	{ service::AwaitableObject<std::shared_ptr<Block>> { impl.getBlock(std::move(numberArg), std::move(hashArg)) } };
};

template <class TImpl>
concept getBlocksWithParams = requires (TImpl impl, service::FieldParams params, response::Value fromArg, std::optional<response::Value> toArg)
{
	{ service::AwaitableObject<std::vector<std::shared_ptr<Block>>> { impl.getBlocks(std::move(params), std::move(fromArg), std::move(toArg)) } };
};

template <class TImpl>
concept getBlocks = requires (TImpl impl, response::Value fromArg, std::optional<response::Value> toArg)
{
	{ service::AwaitableObject<std::vector<std::shared_ptr<Block>>> { impl.getBlocks(std::move(fromArg), std::move(toArg)) } };
};

template <class TImpl>
concept getTransactionWithParams = requires (TImpl impl, service::FieldParams params, response::Value hashArg)
{
	{ service::AwaitableObject<std::shared_ptr<Transaction>> { impl.getTransaction(std::move(params), std::move(hashArg)) } };
};

template <class TImpl>
concept getTransaction = requires (TImpl impl, response::Value hashArg)
{
	{ service::AwaitableObject<std::shared_ptr<Transaction>> { impl.getTransaction(std::move(hashArg)) } };
};

template <class TImpl>
concept getGasPriceWithParams = requires (TImpl impl, service::FieldParams params)
{
	{ service::AwaitableScalar<response::Value> { impl.getGasPrice(std::move(params)) } };
};

template <class TImpl>
concept getGasPrice = requires (TImpl impl)
{
	{ service::AwaitableScalar<response::Value> { impl.getGasPrice() } };
};

template <class TImpl>
concept getChainIDWithParams = requires (TImpl impl, service::FieldParams params)
{
	{ service::AwaitableScalar<response::Value> { impl.getChainID(std::move(params)) } };
};

template <class TImpl>
concept getChainID = requires (TImpl impl)
{
	{ service::AwaitableScalar<response::Value> { impl.getChainID() } };
};

template <class TImpl>
concept getDagBlockWithParams = requires (TImpl impl, service::FieldParams params, std::optional<response::Value> hashArg)
{
	{ service::AwaitableObject<std::shared_ptr<DagBlock>> { impl.getDagBlock(std::move(params), std::move(hashArg)) } };
};

template <class TImpl>
concept getDagBlock = requires (TImpl impl, std::optional<response::Value> hashArg)
{
	{ service::AwaitableObject<std::shared_ptr<DagBlock>> { impl.getDagBlock(std::move(hashArg)) } };
};

template <class TImpl>
concept getDagBlocksWithParams = requires (TImpl impl, service::FieldParams params, std::optional<response::Value> dagLevelArg, std::optional<int> countArg, std::optional<bool> reverseArg)
{
	{ service::AwaitableObject<std::vector<std::shared_ptr<DagBlock>>> { impl.getDagBlocks(std::move(params), std::move(dagLevelArg), std::move(countArg), std::move(reverseArg)) } };
};

template <class TImpl>
concept getDagBlocks = requires (TImpl impl, std::optional<response::Value> dagLevelArg, std::optional<int> countArg, std::optional<bool> reverseArg)
{
	{ service::AwaitableObject<std::vector<std::shared_ptr<DagBlock>>> { impl.getDagBlocks(std::move(dagLevelArg), std::move(countArg), std::move(reverseArg)) } };
};

template <class TImpl>
concept getNodeStateWithParams = requires (TImpl impl, service::FieldParams params)
{
	{ service::AwaitableObject<std::shared_ptr<CurrentState>> { impl.getNodeState(std::move(params)) } };
};

template <class TImpl>
concept getNodeState = requires (TImpl impl)
{
	{ service::AwaitableObject<std::shared_ptr<CurrentState>> { impl.getNodeState() } };
};

template <class TImpl>
concept beginSelectionSet = requires (TImpl impl, const service::SelectionSetParams params)
{
	{ impl.beginSelectionSet(params) };
};

template <class TImpl>
concept endSelectionSet = requires (TImpl impl, const service::SelectionSetParams params)
{
	{ impl.endSelectionSet(params) };
};

} // namespace methods::QueryHas

class [[nodiscard]] Query final
	: public service::Object
{
private:
	[[nodiscard]] service::AwaitableResolver resolveBlock(service::ResolverParams&& params) const;
	[[nodiscard]] service::AwaitableResolver resolveBlocks(service::ResolverParams&& params) const;
	[[nodiscard]] service::AwaitableResolver resolveTransaction(service::ResolverParams&& params) const;
	[[nodiscard]] service::AwaitableResolver resolveGasPrice(service::ResolverParams&& params) const;
	[[nodiscard]] service::AwaitableResolver resolveChainID(service::ResolverParams&& params) const;
	[[nodiscard]] service::AwaitableResolver resolveDagBlock(service::ResolverParams&& params) const;
	[[nodiscard]] service::AwaitableResolver resolveDagBlocks(service::ResolverParams&& params) const;
	[[nodiscard]] service::AwaitableResolver resolveNodeState(service::ResolverParams&& params) const;

	[[nodiscard]] service::AwaitableResolver resolve_typename(service::ResolverParams&& params) const;
	[[nodiscard]] service::AwaitableResolver resolve_schema(service::ResolverParams&& params) const;
	[[nodiscard]] service::AwaitableResolver resolve_type(service::ResolverParams&& params) const;

	std::shared_ptr<schema::Schema> _schema;

	struct [[nodiscard]] Concept
	{
		virtual ~Concept() = default;

		virtual void beginSelectionSet(const service::SelectionSetParams& params) const = 0;
		virtual void endSelectionSet(const service::SelectionSetParams& params) const = 0;

		[[nodiscard]] virtual service::AwaitableObject<std::shared_ptr<Block>> getBlock(service::FieldParams&& params, std::optional<response::Value>&& numberArg, std::optional<response::Value>&& hashArg) const = 0;
		[[nodiscard]] virtual service::AwaitableObject<std::vector<std::shared_ptr<Block>>> getBlocks(service::FieldParams&& params, response::Value&& fromArg, std::optional<response::Value>&& toArg) const = 0;
		[[nodiscard]] virtual service::AwaitableObject<std::shared_ptr<Transaction>> getTransaction(service::FieldParams&& params, response::Value&& hashArg) const = 0;
		[[nodiscard]] virtual service::AwaitableScalar<response::Value> getGasPrice(service::FieldParams&& params) const = 0;
		[[nodiscard]] virtual service::AwaitableScalar<response::Value> getChainID(service::FieldParams&& params) const = 0;
		[[nodiscard]] virtual service::AwaitableObject<std::shared_ptr<DagBlock>> getDagBlock(service::FieldParams&& params, std::optional<response::Value>&& hashArg) const = 0;
		[[nodiscard]] virtual service::AwaitableObject<std::vector<std::shared_ptr<DagBlock>>> getDagBlocks(service::FieldParams&& params, std::optional<response::Value>&& dagLevelArg, std::optional<int>&& countArg, std::optional<bool>&& reverseArg) const = 0;
		[[nodiscard]] virtual service::AwaitableObject<std::shared_ptr<CurrentState>> getNodeState(service::FieldParams&& params) const = 0;
	};

	template <class T>
	struct [[nodiscard]] Model
		: Concept
	{
		Model(std::shared_ptr<T>&& pimpl) noexcept
			: _pimpl { std::move(pimpl) }
		{
		}

		[[nodiscard]] service::AwaitableObject<std::shared_ptr<Block>> getBlock(service::FieldParams&& params, std::optional<response::Value>&& numberArg, std::optional<response::Value>&& hashArg) const final
		{
			if constexpr (methods::QueryHas::getBlockWithParams<T>)
			{
				return { _pimpl->getBlock(std::move(params), std::move(numberArg), std::move(hashArg)) };
			}
			else
			{
				static_assert(methods::QueryHas::getBlock<T>, R"msg(Query::getBlock is not implemented)msg");
				return { _pimpl->getBlock(std::move(numberArg), std::move(hashArg)) };
			}
		}

		[[nodiscard]] service::AwaitableObject<std::vector<std::shared_ptr<Block>>> getBlocks(service::FieldParams&& params, response::Value&& fromArg, std::optional<response::Value>&& toArg) const final
		{
			if constexpr (methods::QueryHas::getBlocksWithParams<T>)
			{
				return { _pimpl->getBlocks(std::move(params), std::move(fromArg), std::move(toArg)) };
			}
			else
			{
				static_assert(methods::QueryHas::getBlocks<T>, R"msg(Query::getBlocks is not implemented)msg");
				return { _pimpl->getBlocks(std::move(fromArg), std::move(toArg)) };
			}
		}

		[[nodiscard]] service::AwaitableObject<std::shared_ptr<Transaction>> getTransaction(service::FieldParams&& params, response::Value&& hashArg) const final
		{
			if constexpr (methods::QueryHas::getTransactionWithParams<T>)
			{
				return { _pimpl->getTransaction(std::move(params), std::move(hashArg)) };
			}
			else
			{
				static_assert(methods::QueryHas::getTransaction<T>, R"msg(Query::getTransaction is not implemented)msg");
				return { _pimpl->getTransaction(std::move(hashArg)) };
			}
		}

		[[nodiscard]] service::AwaitableScalar<response::Value> getGasPrice(service::FieldParams&& params) const final
		{
			if constexpr (methods::QueryHas::getGasPriceWithParams<T>)
			{
				return { _pimpl->getGasPrice(std::move(params)) };
			}
			else
			{
				static_assert(methods::QueryHas::getGasPrice<T>, R"msg(Query::getGasPrice is not implemented)msg");
				return { _pimpl->getGasPrice() };
			}
		}

		[[nodiscard]] service::AwaitableScalar<response::Value> getChainID(service::FieldParams&& params) const final
		{
			if constexpr (methods::QueryHas::getChainIDWithParams<T>)
			{
				return { _pimpl->getChainID(std::move(params)) };
			}
			else
			{
				static_assert(methods::QueryHas::getChainID<T>, R"msg(Query::getChainID is not implemented)msg");
				return { _pimpl->getChainID() };
			}
		}

		[[nodiscard]] service::AwaitableObject<std::shared_ptr<DagBlock>> getDagBlock(service::FieldParams&& params, std::optional<response::Value>&& hashArg) const final
		{
			if constexpr (methods::QueryHas::getDagBlockWithParams<T>)
			{
				return { _pimpl->getDagBlock(std::move(params), std::move(hashArg)) };
			}
			else
			{
				static_assert(methods::QueryHas::getDagBlock<T>, R"msg(Query::getDagBlock is not implemented)msg");
				return { _pimpl->getDagBlock(std::move(hashArg)) };
			}
		}

		[[nodiscard]] service::AwaitableObject<std::vector<std::shared_ptr<DagBlock>>> getDagBlocks(service::FieldParams&& params, std::optional<response::Value>&& dagLevelArg, std::optional<int>&& countArg, std::optional<bool>&& reverseArg) const final
		{
			if constexpr (methods::QueryHas::getDagBlocksWithParams<T>)
			{
				return { _pimpl->getDagBlocks(std::move(params), std::move(dagLevelArg), std::move(countArg), std::move(reverseArg)) };
			}
			else
			{
				static_assert(methods::QueryHas::getDagBlocks<T>, R"msg(Query::getDagBlocks is not implemented)msg");
				return { _pimpl->getDagBlocks(std::move(dagLevelArg), std::move(countArg), std::move(reverseArg)) };
			}
		}

		[[nodiscard]] service::AwaitableObject<std::shared_ptr<CurrentState>> getNodeState(service::FieldParams&& params) const final
		{
			if constexpr (methods::QueryHas::getNodeStateWithParams<T>)
			{
				return { _pimpl->getNodeState(std::move(params)) };
			}
			else
			{
				static_assert(methods::QueryHas::getNodeState<T>, R"msg(Query::getNodeState is not implemented)msg");
				return { _pimpl->getNodeState() };
			}
		}

		void beginSelectionSet(const service::SelectionSetParams& params) const final
		{
			if constexpr (methods::QueryHas::beginSelectionSet<T>)
			{
				_pimpl->beginSelectionSet(params);
			}
		}

		void endSelectionSet(const service::SelectionSetParams& params) const final
		{
			if constexpr (methods::QueryHas::endSelectionSet<T>)
			{
				_pimpl->endSelectionSet(params);
			}
		}

	private:
		const std::shared_ptr<T> _pimpl;
	};

	Query(std::unique_ptr<const Concept>&& pimpl) noexcept;

	[[nodiscard]] service::TypeNames getTypeNames() const noexcept;
	[[nodiscard]] service::ResolverMap getResolvers() const noexcept;

	void beginSelectionSet(const service::SelectionSetParams& params) const final;
	void endSelectionSet(const service::SelectionSetParams& params) const final;

	const std::unique_ptr<const Concept> _pimpl;

public:
	template <class T>
	Query(std::shared_ptr<T> pimpl) noexcept
		: Query { std::unique_ptr<const Concept> { std::make_unique<Model<T>>(std::move(pimpl)) } }
	{
	}

	[[nodiscard]] static constexpr std::string_view getObjectType() noexcept
	{
		return { R"gql(Query)gql" };
	}
};

} // namespace graphql::taraxa::object

#endif // QUERYOBJECT_H
