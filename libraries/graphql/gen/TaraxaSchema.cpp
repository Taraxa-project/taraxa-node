// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// WARNING! Do not edit this file manually, your changes will be overwritten.

#include "QueryObject.h"
#include "MutationObject.h"
#include "SubscriptionObject.h"

#include "graphqlservice/internal/Schema.h"

#include "graphqlservice/introspection/IntrospectionSchema.h"

#include <algorithm>
#include <array>
#include <functional>
#include <sstream>
#include <stdexcept>
#include <string_view>
#include <utility>
#include <vector>

using namespace std::literals;

namespace graphql {
namespace service {

template <>
taraxa::BlockFilterCriteria Argument<taraxa::BlockFilterCriteria>::convert(const response::Value& value)
{
	auto valueAddresses = service::ModifiedArgument<response::Value>::require<service::TypeModifier::Nullable, service::TypeModifier::List>("addresses", value);
	auto valueTopics = service::ModifiedArgument<response::Value>::require<service::TypeModifier::Nullable, service::TypeModifier::List, service::TypeModifier::List>("topics", value);

	return taraxa::BlockFilterCriteria {
		std::move(valueAddresses),
		std::move(valueTopics)
	};
}

template <>
taraxa::CallData Argument<taraxa::CallData>::convert(const response::Value& value)
{
	auto valueFrom = service::ModifiedArgument<response::Value>::require<service::TypeModifier::Nullable>("from", value);
	auto valueTo = service::ModifiedArgument<response::Value>::require<service::TypeModifier::Nullable>("to", value);
	auto valueGas = service::ModifiedArgument<response::Value>::require<service::TypeModifier::Nullable>("gas", value);
	auto valueGasPrice = service::ModifiedArgument<response::Value>::require<service::TypeModifier::Nullable>("gasPrice", value);
	auto valueValue = service::ModifiedArgument<response::Value>::require<service::TypeModifier::Nullable>("value", value);
	auto valueData = service::ModifiedArgument<response::Value>::require<service::TypeModifier::Nullable>("data", value);

	return taraxa::CallData {
		std::move(valueFrom),
		std::move(valueTo),
		std::move(valueGas),
		std::move(valueGasPrice),
		std::move(valueValue),
		std::move(valueData)
	};
}

template <>
taraxa::FilterCriteria Argument<taraxa::FilterCriteria>::convert(const response::Value& value)
{
	auto valueFromBlock = service::ModifiedArgument<response::Value>::require<service::TypeModifier::Nullable>("fromBlock", value);
	auto valueToBlock = service::ModifiedArgument<response::Value>::require<service::TypeModifier::Nullable>("toBlock", value);
	auto valueAddresses = service::ModifiedArgument<response::Value>::require<service::TypeModifier::Nullable, service::TypeModifier::List>("addresses", value);
	auto valueTopics = service::ModifiedArgument<response::Value>::require<service::TypeModifier::Nullable, service::TypeModifier::List, service::TypeModifier::List>("topics", value);

	return taraxa::FilterCriteria {
		std::move(valueFromBlock),
		std::move(valueToBlock),
		std::move(valueAddresses),
		std::move(valueTopics)
	};
}

} // namespace service

namespace taraxa {

BlockFilterCriteria::BlockFilterCriteria(
		std::optional<std::vector<response::Value>> addressesArg,
		std::optional<std::vector<std::vector<response::Value>>> topicsArg) noexcept
	: addresses { std::move(addressesArg) }
	, topics { std::move(topicsArg) }
{
}

BlockFilterCriteria::BlockFilterCriteria(const BlockFilterCriteria& other)
	: addresses { service::ModifiedArgument<response::Value>::duplicate<service::TypeModifier::Nullable, service::TypeModifier::List>(other.addresses) }
	, topics { service::ModifiedArgument<response::Value>::duplicate<service::TypeModifier::Nullable, service::TypeModifier::List, service::TypeModifier::List>(other.topics) }
{
}

BlockFilterCriteria::BlockFilterCriteria(BlockFilterCriteria&& other) noexcept
	: addresses { std::move(other.addresses) }
	, topics { std::move(other.topics) }
{
}

BlockFilterCriteria& BlockFilterCriteria::operator=(const BlockFilterCriteria& other)
{
	BlockFilterCriteria value { other };

	std::swap(*this, value);

	return *this;
}

BlockFilterCriteria& BlockFilterCriteria::operator=(BlockFilterCriteria&& other) noexcept
{
	addresses = std::move(other.addresses);
	topics = std::move(other.topics);

	return *this;
}

CallData::CallData(
		std::optional<response::Value> fromArg,
		std::optional<response::Value> toArg,
		std::optional<response::Value> gasArg,
		std::optional<response::Value> gasPriceArg,
		std::optional<response::Value> valueArg,
		std::optional<response::Value> dataArg) noexcept
	: from { std::move(fromArg) }
	, to { std::move(toArg) }
	, gas { std::move(gasArg) }
	, gasPrice { std::move(gasPriceArg) }
	, value { std::move(valueArg) }
	, data { std::move(dataArg) }
{
}

CallData::CallData(const CallData& other)
	: from { service::ModifiedArgument<response::Value>::duplicate<service::TypeModifier::Nullable>(other.from) }
	, to { service::ModifiedArgument<response::Value>::duplicate<service::TypeModifier::Nullable>(other.to) }
	, gas { service::ModifiedArgument<response::Value>::duplicate<service::TypeModifier::Nullable>(other.gas) }
	, gasPrice { service::ModifiedArgument<response::Value>::duplicate<service::TypeModifier::Nullable>(other.gasPrice) }
	, value { service::ModifiedArgument<response::Value>::duplicate<service::TypeModifier::Nullable>(other.value) }
	, data { service::ModifiedArgument<response::Value>::duplicate<service::TypeModifier::Nullable>(other.data) }
{
}

CallData::CallData(CallData&& other) noexcept
	: from { std::move(other.from) }
	, to { std::move(other.to) }
	, gas { std::move(other.gas) }
	, gasPrice { std::move(other.gasPrice) }
	, value { std::move(other.value) }
	, data { std::move(other.data) }
{
}

CallData& CallData::operator=(const CallData& other)
{
	CallData value { other };

	std::swap(*this, value);

	return *this;
}

CallData& CallData::operator=(CallData&& other) noexcept
{
	from = std::move(other.from);
	to = std::move(other.to);
	gas = std::move(other.gas);
	gasPrice = std::move(other.gasPrice);
	value = std::move(other.value);
	data = std::move(other.data);

	return *this;
}

FilterCriteria::FilterCriteria(
		std::optional<response::Value> fromBlockArg,
		std::optional<response::Value> toBlockArg,
		std::optional<std::vector<response::Value>> addressesArg,
		std::optional<std::vector<std::vector<response::Value>>> topicsArg) noexcept
	: fromBlock { std::move(fromBlockArg) }
	, toBlock { std::move(toBlockArg) }
	, addresses { std::move(addressesArg) }
	, topics { std::move(topicsArg) }
{
}

FilterCriteria::FilterCriteria(const FilterCriteria& other)
	: fromBlock { service::ModifiedArgument<response::Value>::duplicate<service::TypeModifier::Nullable>(other.fromBlock) }
	, toBlock { service::ModifiedArgument<response::Value>::duplicate<service::TypeModifier::Nullable>(other.toBlock) }
	, addresses { service::ModifiedArgument<response::Value>::duplicate<service::TypeModifier::Nullable, service::TypeModifier::List>(other.addresses) }
	, topics { service::ModifiedArgument<response::Value>::duplicate<service::TypeModifier::Nullable, service::TypeModifier::List, service::TypeModifier::List>(other.topics) }
{
}

FilterCriteria::FilterCriteria(FilterCriteria&& other) noexcept
	: fromBlock { std::move(other.fromBlock) }
	, toBlock { std::move(other.toBlock) }
	, addresses { std::move(other.addresses) }
	, topics { std::move(other.topics) }
{
}

FilterCriteria& FilterCriteria::operator=(const FilterCriteria& other)
{
	FilterCriteria value { other };

	std::swap(*this, value);

	return *this;
}

FilterCriteria& FilterCriteria::operator=(FilterCriteria&& other) noexcept
{
	fromBlock = std::move(other.fromBlock);
	toBlock = std::move(other.toBlock);
	addresses = std::move(other.addresses);
	topics = std::move(other.topics);

	return *this;
}

Operations::Operations(std::shared_ptr<object::Query> query, std::shared_ptr<object::Mutation> mutation, std::shared_ptr<object::Subscription> subscription)
	: service::Request({
		{ service::strQuery, query },
		{ service::strMutation, mutation },
		{ service::strSubscription, subscription }
	}, GetSchema())
	, _query(std::move(query))
	, _mutation(std::move(mutation))
	, _subscription(std::move(subscription))
{
}

void AddTypesToSchema(const std::shared_ptr<schema::Schema>& schema)
{
	schema->AddType(R"gql(Bytes32)gql"sv, schema::ScalarType::Make(R"gql(Bytes32)gql"sv, R"md()md", R"url()url"sv));
	schema->AddType(R"gql(Address)gql"sv, schema::ScalarType::Make(R"gql(Address)gql"sv, R"md()md", R"url()url"sv));
	schema->AddType(R"gql(Bytes)gql"sv, schema::ScalarType::Make(R"gql(Bytes)gql"sv, R"md()md", R"url()url"sv));
	schema->AddType(R"gql(BigInt)gql"sv, schema::ScalarType::Make(R"gql(BigInt)gql"sv, R"md()md", R"url()url"sv));
	schema->AddType(R"gql(Long)gql"sv, schema::ScalarType::Make(R"gql(Long)gql"sv, R"md()md", R"url()url"sv));
	auto typeBlockFilterCriteria = schema::InputObjectType::Make(R"gql(BlockFilterCriteria)gql"sv, R"md()md"sv);
	schema->AddType(R"gql(BlockFilterCriteria)gql"sv, typeBlockFilterCriteria);
	auto typeCallData = schema::InputObjectType::Make(R"gql(CallData)gql"sv, R"md()md"sv);
	schema->AddType(R"gql(CallData)gql"sv, typeCallData);
	auto typeFilterCriteria = schema::InputObjectType::Make(R"gql(FilterCriteria)gql"sv, R"md()md"sv);
	schema->AddType(R"gql(FilterCriteria)gql"sv, typeFilterCriteria);
	auto typeAccount = schema::ObjectType::Make(R"gql(Account)gql"sv, R"md()md"sv);
	schema->AddType(R"gql(Account)gql"sv, typeAccount);
	auto typeLog = schema::ObjectType::Make(R"gql(Log)gql"sv, R"md()md"sv);
	schema->AddType(R"gql(Log)gql"sv, typeLog);
	auto typeTransaction = schema::ObjectType::Make(R"gql(Transaction)gql"sv, R"md()md"sv);
	schema->AddType(R"gql(Transaction)gql"sv, typeTransaction);
	auto typeDagBlock = schema::ObjectType::Make(R"gql(DagBlock)gql"sv, R"md()md"sv);
	schema->AddType(R"gql(DagBlock)gql"sv, typeDagBlock);
	auto typeBlock = schema::ObjectType::Make(R"gql(Block)gql"sv, R"md()md"sv);
	schema->AddType(R"gql(Block)gql"sv, typeBlock);
	auto typeCallResult = schema::ObjectType::Make(R"gql(CallResult)gql"sv, R"md()md"sv);
	schema->AddType(R"gql(CallResult)gql"sv, typeCallResult);
	auto typeSyncState = schema::ObjectType::Make(R"gql(SyncState)gql"sv, R"md()md"sv);
	schema->AddType(R"gql(SyncState)gql"sv, typeSyncState);
	auto typePending = schema::ObjectType::Make(R"gql(Pending)gql"sv, R"md()md"sv);
	schema->AddType(R"gql(Pending)gql"sv, typePending);
	auto typeCurrentState = schema::ObjectType::Make(R"gql(CurrentState)gql"sv, R"md()md"sv);
	schema->AddType(R"gql(CurrentState)gql"sv, typeCurrentState);
	auto typeQuery = schema::ObjectType::Make(R"gql(Query)gql"sv, R"md()md"sv);
	schema->AddType(R"gql(Query)gql"sv, typeQuery);
	auto typeMutation = schema::ObjectType::Make(R"gql(Mutation)gql"sv, R"md()md"sv);
	schema->AddType(R"gql(Mutation)gql"sv, typeMutation);
	auto typeSubscription = schema::ObjectType::Make(R"gql(Subscription)gql"sv, R"md()md"sv);
	schema->AddType(R"gql(Subscription)gql"sv, typeSubscription);

	typeBlockFilterCriteria->AddInputValues({
		schema::InputValue::Make(R"gql(addresses)gql"sv, R"md()md"sv, schema->WrapType(introspection::TypeKind::LIST, schema->WrapType(introspection::TypeKind::NON_NULL, schema->LookupType(R"gql(Address)gql"sv))), R"gql()gql"sv),
		schema::InputValue::Make(R"gql(topics)gql"sv, R"md()md"sv, schema->WrapType(introspection::TypeKind::LIST, schema->WrapType(introspection::TypeKind::NON_NULL, schema->WrapType(introspection::TypeKind::LIST, schema->WrapType(introspection::TypeKind::NON_NULL, schema->LookupType(R"gql(Bytes32)gql"sv))))), R"gql()gql"sv)
	});
	typeCallData->AddInputValues({
		schema::InputValue::Make(R"gql(from)gql"sv, R"md()md"sv, schema->LookupType(R"gql(Address)gql"sv), R"gql()gql"sv),
		schema::InputValue::Make(R"gql(to)gql"sv, R"md()md"sv, schema->LookupType(R"gql(Address)gql"sv), R"gql()gql"sv),
		schema::InputValue::Make(R"gql(gas)gql"sv, R"md()md"sv, schema->LookupType(R"gql(Long)gql"sv), R"gql()gql"sv),
		schema::InputValue::Make(R"gql(gasPrice)gql"sv, R"md()md"sv, schema->LookupType(R"gql(BigInt)gql"sv), R"gql()gql"sv),
		schema::InputValue::Make(R"gql(value)gql"sv, R"md()md"sv, schema->LookupType(R"gql(BigInt)gql"sv), R"gql()gql"sv),
		schema::InputValue::Make(R"gql(data)gql"sv, R"md()md"sv, schema->LookupType(R"gql(Bytes)gql"sv), R"gql()gql"sv)
	});
	typeFilterCriteria->AddInputValues({
		schema::InputValue::Make(R"gql(fromBlock)gql"sv, R"md()md"sv, schema->LookupType(R"gql(Long)gql"sv), R"gql()gql"sv),
		schema::InputValue::Make(R"gql(toBlock)gql"sv, R"md()md"sv, schema->LookupType(R"gql(Long)gql"sv), R"gql()gql"sv),
		schema::InputValue::Make(R"gql(addresses)gql"sv, R"md()md"sv, schema->WrapType(introspection::TypeKind::LIST, schema->WrapType(introspection::TypeKind::NON_NULL, schema->LookupType(R"gql(Address)gql"sv))), R"gql()gql"sv),
		schema::InputValue::Make(R"gql(topics)gql"sv, R"md()md"sv, schema->WrapType(introspection::TypeKind::LIST, schema->WrapType(introspection::TypeKind::NON_NULL, schema->WrapType(introspection::TypeKind::LIST, schema->WrapType(introspection::TypeKind::NON_NULL, schema->LookupType(R"gql(Bytes32)gql"sv))))), R"gql()gql"sv)
	});

	AddAccountDetails(typeAccount, schema);
	AddLogDetails(typeLog, schema);
	AddTransactionDetails(typeTransaction, schema);
	AddDagBlockDetails(typeDagBlock, schema);
	AddBlockDetails(typeBlock, schema);
	AddCallResultDetails(typeCallResult, schema);
	AddSyncStateDetails(typeSyncState, schema);
	AddPendingDetails(typePending, schema);
	AddCurrentStateDetails(typeCurrentState, schema);
	AddQueryDetails(typeQuery, schema);
	AddMutationDetails(typeMutation, schema);
	AddSubscriptionDetails(typeSubscription, schema);

	schema->AddQueryType(typeQuery);
	schema->AddMutationType(typeMutation);
	schema->AddSubscriptionType(typeSubscription);
}

std::shared_ptr<schema::Schema> GetSchema()
{
	static std::weak_ptr<schema::Schema> s_wpSchema;
	auto schema = s_wpSchema.lock();

	if (!schema)
	{
		schema = std::make_shared<schema::Schema>(false, R"md()md"sv);
		introspection::AddTypesToSchema(schema);
		AddTypesToSchema(schema);
		s_wpSchema = schema;
	}

	return schema;
}

} // namespace taraxa
} // namespace graphql
