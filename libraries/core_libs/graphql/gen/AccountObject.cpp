// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// WARNING! Do not edit this file manually, your changes will be overwritten.

#include "AccountObject.h"

#include "graphqlservice/internal/Schema.h"

#include "graphqlservice/introspection/IntrospectionSchema.h"

#include <algorithm>
#include <functional>
#include <sstream>
#include <stdexcept>
#include <unordered_map>

using namespace std::literals;

namespace graphql::taraxa {
namespace object {

Account::Account(std::unique_ptr<const Concept>&& pimpl) noexcept
	: service::Object{ getTypeNames(), getResolvers() }
	, _pimpl { std::move(pimpl) }
{
}

service::TypeNames Account::getTypeNames() const noexcept
{
	return {
		R"gql(Account)gql"sv
	};
}

service::ResolverMap Account::getResolvers() const noexcept
{
	return {
		{ R"gql(code)gql"sv, [this](service::ResolverParams&& params) { return resolveCode(std::move(params)); } },
		{ R"gql(address)gql"sv, [this](service::ResolverParams&& params) { return resolveAddress(std::move(params)); } },
		{ R"gql(balance)gql"sv, [this](service::ResolverParams&& params) { return resolveBalance(std::move(params)); } },
		{ R"gql(storage)gql"sv, [this](service::ResolverParams&& params) { return resolveStorage(std::move(params)); } },
		{ R"gql(__typename)gql"sv, [this](service::ResolverParams&& params) { return resolve_typename(std::move(params)); } },
		{ R"gql(transactionCount)gql"sv, [this](service::ResolverParams&& params) { return resolveTransactionCount(std::move(params)); } }
	};
}

void Account::beginSelectionSet(const service::SelectionSetParams& params) const
{
	_pimpl->beginSelectionSet(params);
}

void Account::endSelectionSet(const service::SelectionSetParams& params) const
{
	_pimpl->endSelectionSet(params);
}

service::AwaitableResolver Account::resolveAddress(service::ResolverParams&& params) const
{
	std::unique_lock resolverLock(_resolverMutex);
	auto directives = std::move(params.fieldDirectives);
	auto result = _pimpl->getAddress(service::FieldParams(service::SelectionSetParams{ params }, std::move(directives)));
	resolverLock.unlock();

	return service::ModifiedResult<response::Value>::convert(std::move(result), std::move(params));
}

service::AwaitableResolver Account::resolveBalance(service::ResolverParams&& params) const
{
	std::unique_lock resolverLock(_resolverMutex);
	auto directives = std::move(params.fieldDirectives);
	auto result = _pimpl->getBalance(service::FieldParams(service::SelectionSetParams{ params }, std::move(directives)));
	resolverLock.unlock();

	return service::ModifiedResult<response::Value>::convert(std::move(result), std::move(params));
}

service::AwaitableResolver Account::resolveTransactionCount(service::ResolverParams&& params) const
{
	std::unique_lock resolverLock(_resolverMutex);
	auto directives = std::move(params.fieldDirectives);
	auto result = _pimpl->getTransactionCount(service::FieldParams(service::SelectionSetParams{ params }, std::move(directives)));
	resolverLock.unlock();

	return service::ModifiedResult<response::Value>::convert(std::move(result), std::move(params));
}

service::AwaitableResolver Account::resolveCode(service::ResolverParams&& params) const
{
	std::unique_lock resolverLock(_resolverMutex);
	auto directives = std::move(params.fieldDirectives);
	auto result = _pimpl->getCode(service::FieldParams(service::SelectionSetParams{ params }, std::move(directives)));
	resolverLock.unlock();

	return service::ModifiedResult<response::Value>::convert(std::move(result), std::move(params));
}

service::AwaitableResolver Account::resolveStorage(service::ResolverParams&& params) const
{
	auto argSlot = service::ModifiedArgument<response::Value>::require("slot", params.arguments);
	std::unique_lock resolverLock(_resolverMutex);
	auto directives = std::move(params.fieldDirectives);
	auto result = _pimpl->getStorage(service::FieldParams(service::SelectionSetParams{ params }, std::move(directives)), std::move(argSlot));
	resolverLock.unlock();

	return service::ModifiedResult<response::Value>::convert(std::move(result), std::move(params));
}

service::AwaitableResolver Account::resolve_typename(service::ResolverParams&& params) const
{
	return service::Result<std::string>::convert(std::string{ R"gql(Account)gql" }, std::move(params));
}

} // namespace object

void AddAccountDetails(const std::shared_ptr<schema::ObjectType>& typeAccount, const std::shared_ptr<schema::Schema>& schema)
{
	typeAccount->AddFields({
		schema::Field::Make(R"gql(address)gql"sv, R"md()md"sv, std::nullopt, schema->WrapType(introspection::TypeKind::NON_NULL, schema->LookupType(R"gql(Address)gql"sv))),
		schema::Field::Make(R"gql(balance)gql"sv, R"md()md"sv, std::nullopt, schema->WrapType(introspection::TypeKind::NON_NULL, schema->LookupType(R"gql(BigInt)gql"sv))),
		schema::Field::Make(R"gql(transactionCount)gql"sv, R"md()md"sv, std::nullopt, schema->WrapType(introspection::TypeKind::NON_NULL, schema->LookupType(R"gql(Long)gql"sv))),
		schema::Field::Make(R"gql(code)gql"sv, R"md()md"sv, std::nullopt, schema->WrapType(introspection::TypeKind::NON_NULL, schema->LookupType(R"gql(Bytes)gql"sv))),
		schema::Field::Make(R"gql(storage)gql"sv, R"md()md"sv, std::nullopt, schema->WrapType(introspection::TypeKind::NON_NULL, schema->LookupType(R"gql(Bytes32)gql"sv)), {
			schema::InputValue::Make(R"gql(slot)gql"sv, R"md()md"sv, schema->WrapType(introspection::TypeKind::NON_NULL, schema->LookupType(R"gql(Bytes32)gql"sv)), R"gql()gql"sv)
		})
	});
}

} // namespace graphql::taraxa
