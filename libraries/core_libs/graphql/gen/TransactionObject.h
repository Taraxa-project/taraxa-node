// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// WARNING! Do not edit this file manually, your changes will be overwritten.

#pragma once

#ifndef TRANSACTIONOBJECT_H
#define TRANSACTIONOBJECT_H

#include "TaraxaSchema.h"

namespace graphql::taraxa::object {
namespace methods::TransactionHas {

template <class TImpl>
concept getHashWithParams = requires (TImpl impl, service::FieldParams params)
{
	{ service::AwaitableScalar<response::Value> { impl.getHash(std::move(params)) } };
};

template <class TImpl>
concept getHash = requires (TImpl impl)
{
	{ service::AwaitableScalar<response::Value> { impl.getHash() } };
};

template <class TImpl>
concept getNonceWithParams = requires (TImpl impl, service::FieldParams params)
{
	{ service::AwaitableScalar<response::Value> { impl.getNonce(std::move(params)) } };
};

template <class TImpl>
concept getNonce = requires (TImpl impl)
{
	{ service::AwaitableScalar<response::Value> { impl.getNonce() } };
};

template <class TImpl>
concept getIndexWithParams = requires (TImpl impl, service::FieldParams params)
{
	{ service::AwaitableScalar<std::optional<int>> { impl.getIndex(std::move(params)) } };
};

template <class TImpl>
concept getIndex = requires (TImpl impl)
{
	{ service::AwaitableScalar<std::optional<int>> { impl.getIndex() } };
};

template <class TImpl>
concept getFromWithParams = requires (TImpl impl, service::FieldParams params, std::optional<response::Value> blockArg)
{
	{ service::AwaitableObject<std::shared_ptr<Account>> { impl.getFrom(std::move(params), std::move(blockArg)) } };
};

template <class TImpl>
concept getFrom = requires (TImpl impl, std::optional<response::Value> blockArg)
{
	{ service::AwaitableObject<std::shared_ptr<Account>> { impl.getFrom(std::move(blockArg)) } };
};

template <class TImpl>
concept getToWithParams = requires (TImpl impl, service::FieldParams params, std::optional<response::Value> blockArg)
{
	{ service::AwaitableObject<std::shared_ptr<Account>> { impl.getTo(std::move(params), std::move(blockArg)) } };
};

template <class TImpl>
concept getTo = requires (TImpl impl, std::optional<response::Value> blockArg)
{
	{ service::AwaitableObject<std::shared_ptr<Account>> { impl.getTo(std::move(blockArg)) } };
};

template <class TImpl>
concept getValueWithParams = requires (TImpl impl, service::FieldParams params)
{
	{ service::AwaitableScalar<response::Value> { impl.getValue(std::move(params)) } };
};

template <class TImpl>
concept getValue = requires (TImpl impl)
{
	{ service::AwaitableScalar<response::Value> { impl.getValue() } };
};

template <class TImpl>
concept getGasPriceWithParams = requires (TImpl impl, service::FieldParams params)
{
	{ service::AwaitableScalar<response::Value> { impl.getGasPrice(std::move(params)) } };
};

template <class TImpl>
concept getGasPrice = requires (TImpl impl)
{
	{ service::AwaitableScalar<response::Value> { impl.getGasPrice() } };
};

template <class TImpl>
concept getGasWithParams = requires (TImpl impl, service::FieldParams params)
{
	{ service::AwaitableScalar<response::Value> { impl.getGas(std::move(params)) } };
};

template <class TImpl>
concept getGas = requires (TImpl impl)
{
	{ service::AwaitableScalar<response::Value> { impl.getGas() } };
};

template <class TImpl>
concept getInputDataWithParams = requires (TImpl impl, service::FieldParams params)
{
	{ service::AwaitableScalar<response::Value> { impl.getInputData(std::move(params)) } };
};

template <class TImpl>
concept getInputData = requires (TImpl impl)
{
	{ service::AwaitableScalar<response::Value> { impl.getInputData() } };
};

template <class TImpl>
concept getBlockWithParams = requires (TImpl impl, service::FieldParams params)
{
	{ service::AwaitableObject<std::shared_ptr<Block>> { impl.getBlock(std::move(params)) } };
};

template <class TImpl>
concept getBlock = requires (TImpl impl)
{
	{ service::AwaitableObject<std::shared_ptr<Block>> { impl.getBlock() } };
};

template <class TImpl>
concept getStatusWithParams = requires (TImpl impl, service::FieldParams params)
{
	{ service::AwaitableScalar<std::optional<response::Value>> { impl.getStatus(std::move(params)) } };
};

template <class TImpl>
concept getStatus = requires (TImpl impl)
{
	{ service::AwaitableScalar<std::optional<response::Value>> { impl.getStatus() } };
};

template <class TImpl>
concept getGasUsedWithParams = requires (TImpl impl, service::FieldParams params)
{
	{ service::AwaitableScalar<std::optional<response::Value>> { impl.getGasUsed(std::move(params)) } };
};

template <class TImpl>
concept getGasUsed = requires (TImpl impl)
{
	{ service::AwaitableScalar<std::optional<response::Value>> { impl.getGasUsed() } };
};

template <class TImpl>
concept getCumulativeGasUsedWithParams = requires (TImpl impl, service::FieldParams params)
{
	{ service::AwaitableScalar<std::optional<response::Value>> { impl.getCumulativeGasUsed(std::move(params)) } };
};

template <class TImpl>
concept getCumulativeGasUsed = requires (TImpl impl)
{
	{ service::AwaitableScalar<std::optional<response::Value>> { impl.getCumulativeGasUsed() } };
};

template <class TImpl>
concept getCreatedContractWithParams = requires (TImpl impl, service::FieldParams params, std::optional<response::Value> blockArg)
{
	{ service::AwaitableObject<std::shared_ptr<Account>> { impl.getCreatedContract(std::move(params), std::move(blockArg)) } };
};

template <class TImpl>
concept getCreatedContract = requires (TImpl impl, std::optional<response::Value> blockArg)
{
	{ service::AwaitableObject<std::shared_ptr<Account>> { impl.getCreatedContract(std::move(blockArg)) } };
};

template <class TImpl>
concept getLogsWithParams = requires (TImpl impl, service::FieldParams params)
{
	{ service::AwaitableObject<std::optional<std::vector<std::shared_ptr<Log>>>> { impl.getLogs(std::move(params)) } };
};

template <class TImpl>
concept getLogs = requires (TImpl impl)
{
	{ service::AwaitableObject<std::optional<std::vector<std::shared_ptr<Log>>>> { impl.getLogs() } };
};

template <class TImpl>
concept getRWithParams = requires (TImpl impl, service::FieldParams params)
{
	{ service::AwaitableScalar<response::Value> { impl.getR(std::move(params)) } };
};

template <class TImpl>
concept getR = requires (TImpl impl)
{
	{ service::AwaitableScalar<response::Value> { impl.getR() } };
};

template <class TImpl>
concept getSWithParams = requires (TImpl impl, service::FieldParams params)
{
	{ service::AwaitableScalar<response::Value> { impl.getS(std::move(params)) } };
};

template <class TImpl>
concept getS = requires (TImpl impl)
{
	{ service::AwaitableScalar<response::Value> { impl.getS() } };
};

template <class TImpl>
concept getVWithParams = requires (TImpl impl, service::FieldParams params)
{
	{ service::AwaitableScalar<response::Value> { impl.getV(std::move(params)) } };
};

template <class TImpl>
concept getV = requires (TImpl impl)
{
	{ service::AwaitableScalar<response::Value> { impl.getV() } };
};

template <class TImpl>
concept beginSelectionSet = requires (TImpl impl, const service::SelectionSetParams params)
{
	{ impl.beginSelectionSet(params) };
};

template <class TImpl>
concept endSelectionSet = requires (TImpl impl, const service::SelectionSetParams params)
{
	{ impl.endSelectionSet(params) };
};

} // namespace methods::TransactionHas

class [[nodiscard]] Transaction final
	: public service::Object
{
private:
	[[nodiscard]] service::AwaitableResolver resolveHash(service::ResolverParams&& params) const;
	[[nodiscard]] service::AwaitableResolver resolveNonce(service::ResolverParams&& params) const;
	[[nodiscard]] service::AwaitableResolver resolveIndex(service::ResolverParams&& params) const;
	[[nodiscard]] service::AwaitableResolver resolveFrom(service::ResolverParams&& params) const;
	[[nodiscard]] service::AwaitableResolver resolveTo(service::ResolverParams&& params) const;
	[[nodiscard]] service::AwaitableResolver resolveValue(service::ResolverParams&& params) const;
	[[nodiscard]] service::AwaitableResolver resolveGasPrice(service::ResolverParams&& params) const;
	[[nodiscard]] service::AwaitableResolver resolveGas(service::ResolverParams&& params) const;
	[[nodiscard]] service::AwaitableResolver resolveInputData(service::ResolverParams&& params) const;
	[[nodiscard]] service::AwaitableResolver resolveBlock(service::ResolverParams&& params) const;
	[[nodiscard]] service::AwaitableResolver resolveStatus(service::ResolverParams&& params) const;
	[[nodiscard]] service::AwaitableResolver resolveGasUsed(service::ResolverParams&& params) const;
	[[nodiscard]] service::AwaitableResolver resolveCumulativeGasUsed(service::ResolverParams&& params) const;
	[[nodiscard]] service::AwaitableResolver resolveCreatedContract(service::ResolverParams&& params) const;
	[[nodiscard]] service::AwaitableResolver resolveLogs(service::ResolverParams&& params) const;
	[[nodiscard]] service::AwaitableResolver resolveR(service::ResolverParams&& params) const;
	[[nodiscard]] service::AwaitableResolver resolveS(service::ResolverParams&& params) const;
	[[nodiscard]] service::AwaitableResolver resolveV(service::ResolverParams&& params) const;

	[[nodiscard]] service::AwaitableResolver resolve_typename(service::ResolverParams&& params) const;

	struct [[nodiscard]] Concept
	{
		virtual ~Concept() = default;

		virtual void beginSelectionSet(const service::SelectionSetParams& params) const = 0;
		virtual void endSelectionSet(const service::SelectionSetParams& params) const = 0;

		[[nodiscard]] virtual service::AwaitableScalar<response::Value> getHash(service::FieldParams&& params) const = 0;
		[[nodiscard]] virtual service::AwaitableScalar<response::Value> getNonce(service::FieldParams&& params) const = 0;
		[[nodiscard]] virtual service::AwaitableScalar<std::optional<int>> getIndex(service::FieldParams&& params) const = 0;
		[[nodiscard]] virtual service::AwaitableObject<std::shared_ptr<Account>> getFrom(service::FieldParams&& params, std::optional<response::Value>&& blockArg) const = 0;
		[[nodiscard]] virtual service::AwaitableObject<std::shared_ptr<Account>> getTo(service::FieldParams&& params, std::optional<response::Value>&& blockArg) const = 0;
		[[nodiscard]] virtual service::AwaitableScalar<response::Value> getValue(service::FieldParams&& params) const = 0;
		[[nodiscard]] virtual service::AwaitableScalar<response::Value> getGasPrice(service::FieldParams&& params) const = 0;
		[[nodiscard]] virtual service::AwaitableScalar<response::Value> getGas(service::FieldParams&& params) const = 0;
		[[nodiscard]] virtual service::AwaitableScalar<response::Value> getInputData(service::FieldParams&& params) const = 0;
		[[nodiscard]] virtual service::AwaitableObject<std::shared_ptr<Block>> getBlock(service::FieldParams&& params) const = 0;
		[[nodiscard]] virtual service::AwaitableScalar<std::optional<response::Value>> getStatus(service::FieldParams&& params) const = 0;
		[[nodiscard]] virtual service::AwaitableScalar<std::optional<response::Value>> getGasUsed(service::FieldParams&& params) const = 0;
		[[nodiscard]] virtual service::AwaitableScalar<std::optional<response::Value>> getCumulativeGasUsed(service::FieldParams&& params) const = 0;
		[[nodiscard]] virtual service::AwaitableObject<std::shared_ptr<Account>> getCreatedContract(service::FieldParams&& params, std::optional<response::Value>&& blockArg) const = 0;
		[[nodiscard]] virtual service::AwaitableObject<std::optional<std::vector<std::shared_ptr<Log>>>> getLogs(service::FieldParams&& params) const = 0;
		[[nodiscard]] virtual service::AwaitableScalar<response::Value> getR(service::FieldParams&& params) const = 0;
		[[nodiscard]] virtual service::AwaitableScalar<response::Value> getS(service::FieldParams&& params) const = 0;
		[[nodiscard]] virtual service::AwaitableScalar<response::Value> getV(service::FieldParams&& params) const = 0;
	};

	template <class T>
	struct [[nodiscard]] Model
		: Concept
	{
		Model(std::shared_ptr<T>&& pimpl) noexcept
			: _pimpl { std::move(pimpl) }
		{
		}

		[[nodiscard]] service::AwaitableScalar<response::Value> getHash(service::FieldParams&& params) const final
		{
			if constexpr (methods::TransactionHas::getHashWithParams<T>)
			{
				return { _pimpl->getHash(std::move(params)) };
			}
			else
			{
				static_assert(methods::TransactionHas::getHash<T>, R"msg(Transaction::getHash is not implemented)msg");
				return { _pimpl->getHash() };
			}
		}

		[[nodiscard]] service::AwaitableScalar<response::Value> getNonce(service::FieldParams&& params) const final
		{
			if constexpr (methods::TransactionHas::getNonceWithParams<T>)
			{
				return { _pimpl->getNonce(std::move(params)) };
			}
			else
			{
				static_assert(methods::TransactionHas::getNonce<T>, R"msg(Transaction::getNonce is not implemented)msg");
				return { _pimpl->getNonce() };
			}
		}

		[[nodiscard]] service::AwaitableScalar<std::optional<int>> getIndex(service::FieldParams&& params) const final
		{
			if constexpr (methods::TransactionHas::getIndexWithParams<T>)
			{
				return { _pimpl->getIndex(std::move(params)) };
			}
			else
			{
				static_assert(methods::TransactionHas::getIndex<T>, R"msg(Transaction::getIndex is not implemented)msg");
				return { _pimpl->getIndex() };
			}
		}

		[[nodiscard]] service::AwaitableObject<std::shared_ptr<Account>> getFrom(service::FieldParams&& params, std::optional<response::Value>&& blockArg) const final
		{
			if constexpr (methods::TransactionHas::getFromWithParams<T>)
			{
				return { _pimpl->getFrom(std::move(params), std::move(blockArg)) };
			}
			else
			{
				static_assert(methods::TransactionHas::getFrom<T>, R"msg(Transaction::getFrom is not implemented)msg");
				return { _pimpl->getFrom(std::move(blockArg)) };
			}
		}

		[[nodiscard]] service::AwaitableObject<std::shared_ptr<Account>> getTo(service::FieldParams&& params, std::optional<response::Value>&& blockArg) const final
		{
			if constexpr (methods::TransactionHas::getToWithParams<T>)
			{
				return { _pimpl->getTo(std::move(params), std::move(blockArg)) };
			}
			else
			{
				static_assert(methods::TransactionHas::getTo<T>, R"msg(Transaction::getTo is not implemented)msg");
				return { _pimpl->getTo(std::move(blockArg)) };
			}
		}

		[[nodiscard]] service::AwaitableScalar<response::Value> getValue(service::FieldParams&& params) const final
		{
			if constexpr (methods::TransactionHas::getValueWithParams<T>)
			{
				return { _pimpl->getValue(std::move(params)) };
			}
			else
			{
				static_assert(methods::TransactionHas::getValue<T>, R"msg(Transaction::getValue is not implemented)msg");
				return { _pimpl->getValue() };
			}
		}

		[[nodiscard]] service::AwaitableScalar<response::Value> getGasPrice(service::FieldParams&& params) const final
		{
			if constexpr (methods::TransactionHas::getGasPriceWithParams<T>)
			{
				return { _pimpl->getGasPrice(std::move(params)) };
			}
			else
			{
				static_assert(methods::TransactionHas::getGasPrice<T>, R"msg(Transaction::getGasPrice is not implemented)msg");
				return { _pimpl->getGasPrice() };
			}
		}

		[[nodiscard]] service::AwaitableScalar<response::Value> getGas(service::FieldParams&& params) const final
		{
			if constexpr (methods::TransactionHas::getGasWithParams<T>)
			{
				return { _pimpl->getGas(std::move(params)) };
			}
			else
			{
				static_assert(methods::TransactionHas::getGas<T>, R"msg(Transaction::getGas is not implemented)msg");
				return { _pimpl->getGas() };
			}
		}

		[[nodiscard]] service::AwaitableScalar<response::Value> getInputData(service::FieldParams&& params) const final
		{
			if constexpr (methods::TransactionHas::getInputDataWithParams<T>)
			{
				return { _pimpl->getInputData(std::move(params)) };
			}
			else
			{
				static_assert(methods::TransactionHas::getInputData<T>, R"msg(Transaction::getInputData is not implemented)msg");
				return { _pimpl->getInputData() };
			}
		}

		[[nodiscard]] service::AwaitableObject<std::shared_ptr<Block>> getBlock(service::FieldParams&& params) const final
		{
			if constexpr (methods::TransactionHas::getBlockWithParams<T>)
			{
				return { _pimpl->getBlock(std::move(params)) };
			}
			else
			{
				static_assert(methods::TransactionHas::getBlock<T>, R"msg(Transaction::getBlock is not implemented)msg");
				return { _pimpl->getBlock() };
			}
		}

		[[nodiscard]] service::AwaitableScalar<std::optional<response::Value>> getStatus(service::FieldParams&& params) const final
		{
			if constexpr (methods::TransactionHas::getStatusWithParams<T>)
			{
				return { _pimpl->getStatus(std::move(params)) };
			}
			else
			{
				static_assert(methods::TransactionHas::getStatus<T>, R"msg(Transaction::getStatus is not implemented)msg");
				return { _pimpl->getStatus() };
			}
		}

		[[nodiscard]] service::AwaitableScalar<std::optional<response::Value>> getGasUsed(service::FieldParams&& params) const final
		{
			if constexpr (methods::TransactionHas::getGasUsedWithParams<T>)
			{
				return { _pimpl->getGasUsed(std::move(params)) };
			}
			else
			{
				static_assert(methods::TransactionHas::getGasUsed<T>, R"msg(Transaction::getGasUsed is not implemented)msg");
				return { _pimpl->getGasUsed() };
			}
		}

		[[nodiscard]] service::AwaitableScalar<std::optional<response::Value>> getCumulativeGasUsed(service::FieldParams&& params) const final
		{
			if constexpr (methods::TransactionHas::getCumulativeGasUsedWithParams<T>)
			{
				return { _pimpl->getCumulativeGasUsed(std::move(params)) };
			}
			else
			{
				static_assert(methods::TransactionHas::getCumulativeGasUsed<T>, R"msg(Transaction::getCumulativeGasUsed is not implemented)msg");
				return { _pimpl->getCumulativeGasUsed() };
			}
		}

		[[nodiscard]] service::AwaitableObject<std::shared_ptr<Account>> getCreatedContract(service::FieldParams&& params, std::optional<response::Value>&& blockArg) const final
		{
			if constexpr (methods::TransactionHas::getCreatedContractWithParams<T>)
			{
				return { _pimpl->getCreatedContract(std::move(params), std::move(blockArg)) };
			}
			else
			{
				static_assert(methods::TransactionHas::getCreatedContract<T>, R"msg(Transaction::getCreatedContract is not implemented)msg");
				return { _pimpl->getCreatedContract(std::move(blockArg)) };
			}
		}

		[[nodiscard]] service::AwaitableObject<std::optional<std::vector<std::shared_ptr<Log>>>> getLogs(service::FieldParams&& params) const final
		{
			if constexpr (methods::TransactionHas::getLogsWithParams<T>)
			{
				return { _pimpl->getLogs(std::move(params)) };
			}
			else
			{
				static_assert(methods::TransactionHas::getLogs<T>, R"msg(Transaction::getLogs is not implemented)msg");
				return { _pimpl->getLogs() };
			}
		}

		[[nodiscard]] service::AwaitableScalar<response::Value> getR(service::FieldParams&& params) const final
		{
			if constexpr (methods::TransactionHas::getRWithParams<T>)
			{
				return { _pimpl->getR(std::move(params)) };
			}
			else
			{
				static_assert(methods::TransactionHas::getR<T>, R"msg(Transaction::getR is not implemented)msg");
				return { _pimpl->getR() };
			}
		}

		[[nodiscard]] service::AwaitableScalar<response::Value> getS(service::FieldParams&& params) const final
		{
			if constexpr (methods::TransactionHas::getSWithParams<T>)
			{
				return { _pimpl->getS(std::move(params)) };
			}
			else
			{
				static_assert(methods::TransactionHas::getS<T>, R"msg(Transaction::getS is not implemented)msg");
				return { _pimpl->getS() };
			}
		}

		[[nodiscard]] service::AwaitableScalar<response::Value> getV(service::FieldParams&& params) const final
		{
			if constexpr (methods::TransactionHas::getVWithParams<T>)
			{
				return { _pimpl->getV(std::move(params)) };
			}
			else
			{
				static_assert(methods::TransactionHas::getV<T>, R"msg(Transaction::getV is not implemented)msg");
				return { _pimpl->getV() };
			}
		}

		void beginSelectionSet(const service::SelectionSetParams& params) const final
		{
			if constexpr (methods::TransactionHas::beginSelectionSet<T>)
			{
				_pimpl->beginSelectionSet(params);
			}
		}

		void endSelectionSet(const service::SelectionSetParams& params) const final
		{
			if constexpr (methods::TransactionHas::endSelectionSet<T>)
			{
				_pimpl->endSelectionSet(params);
			}
		}

	private:
		const std::shared_ptr<T> _pimpl;
	};

	Transaction(std::unique_ptr<const Concept>&& pimpl) noexcept;

	[[nodiscard]] service::TypeNames getTypeNames() const noexcept;
	[[nodiscard]] service::ResolverMap getResolvers() const noexcept;

	void beginSelectionSet(const service::SelectionSetParams& params) const final;
	void endSelectionSet(const service::SelectionSetParams& params) const final;

	const std::unique_ptr<const Concept> _pimpl;

public:
	template <class T>
	Transaction(std::shared_ptr<T> pimpl) noexcept
		: Transaction { std::unique_ptr<const Concept> { std::make_unique<Model<T>>(std::move(pimpl)) } }
	{
	}

	[[nodiscard]] static constexpr std::string_view getObjectType() noexcept
	{
		return { R"gql(Transaction)gql" };
	}
};

} // namespace graphql::taraxa::object

#endif // TRANSACTIONOBJECT_H
