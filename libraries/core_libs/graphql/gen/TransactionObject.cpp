// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// WARNING! Do not edit this file manually, your changes will be overwritten.

#include "TransactionObject.h"
#include "AccountObject.h"
#include "BlockObject.h"
#include "LogObject.h"

#include "graphqlservice/internal/Schema.h"

#include "graphqlservice/introspection/IntrospectionSchema.h"

#include <algorithm>
#include <functional>
#include <sstream>
#include <stdexcept>
#include <unordered_map>

using namespace std::literals;

namespace graphql::taraxa {
namespace object {

Transaction::Transaction(std::unique_ptr<const Concept>&& pimpl) noexcept
	: service::Object{ getTypeNames(), getResolvers() }
	, _pimpl { std::move(pimpl) }
{
}

service::TypeNames Transaction::getTypeNames() const noexcept
{
	return {
		R"gql(Transaction)gql"sv
	};
}

service::ResolverMap Transaction::getResolvers() const noexcept
{
	return {
		{ R"gql(r)gql"sv, [this](service::ResolverParams&& params) { return resolveR(std::move(params)); } },
		{ R"gql(s)gql"sv, [this](service::ResolverParams&& params) { return resolveS(std::move(params)); } },
		{ R"gql(v)gql"sv, [this](service::ResolverParams&& params) { return resolveV(std::move(params)); } },
		{ R"gql(to)gql"sv, [this](service::ResolverParams&& params) { return resolveTo(std::move(params)); } },
		{ R"gql(gas)gql"sv, [this](service::ResolverParams&& params) { return resolveGas(std::move(params)); } },
		{ R"gql(from)gql"sv, [this](service::ResolverParams&& params) { return resolveFrom(std::move(params)); } },
		{ R"gql(hash)gql"sv, [this](service::ResolverParams&& params) { return resolveHash(std::move(params)); } },
		{ R"gql(logs)gql"sv, [this](service::ResolverParams&& params) { return resolveLogs(std::move(params)); } },
		{ R"gql(block)gql"sv, [this](service::ResolverParams&& params) { return resolveBlock(std::move(params)); } },
		{ R"gql(index)gql"sv, [this](service::ResolverParams&& params) { return resolveIndex(std::move(params)); } },
		{ R"gql(nonce)gql"sv, [this](service::ResolverParams&& params) { return resolveNonce(std::move(params)); } },
		{ R"gql(value)gql"sv, [this](service::ResolverParams&& params) { return resolveValue(std::move(params)); } },
		{ R"gql(status)gql"sv, [this](service::ResolverParams&& params) { return resolveStatus(std::move(params)); } },
		{ R"gql(gasUsed)gql"sv, [this](service::ResolverParams&& params) { return resolveGasUsed(std::move(params)); } },
		{ R"gql(gasPrice)gql"sv, [this](service::ResolverParams&& params) { return resolveGasPrice(std::move(params)); } },
		{ R"gql(inputData)gql"sv, [this](service::ResolverParams&& params) { return resolveInputData(std::move(params)); } },
		{ R"gql(__typename)gql"sv, [this](service::ResolverParams&& params) { return resolve_typename(std::move(params)); } },
		{ R"gql(createdContract)gql"sv, [this](service::ResolverParams&& params) { return resolveCreatedContract(std::move(params)); } },
		{ R"gql(cumulativeGasUsed)gql"sv, [this](service::ResolverParams&& params) { return resolveCumulativeGasUsed(std::move(params)); } }
	};
}

void Transaction::beginSelectionSet(const service::SelectionSetParams& params) const
{
	_pimpl->beginSelectionSet(params);
}

void Transaction::endSelectionSet(const service::SelectionSetParams& params) const
{
	_pimpl->endSelectionSet(params);
}

service::AwaitableResolver Transaction::resolveHash(service::ResolverParams&& params) const
{
	std::unique_lock resolverLock(_resolverMutex);
	auto directives = std::move(params.fieldDirectives);
	auto result = _pimpl->getHash(service::FieldParams(service::SelectionSetParams{ params }, std::move(directives)));
	resolverLock.unlock();

	return service::ModifiedResult<response::Value>::convert(std::move(result), std::move(params));
}

service::AwaitableResolver Transaction::resolveNonce(service::ResolverParams&& params) const
{
	std::unique_lock resolverLock(_resolverMutex);
	auto directives = std::move(params.fieldDirectives);
	auto result = _pimpl->getNonce(service::FieldParams(service::SelectionSetParams{ params }, std::move(directives)));
	resolverLock.unlock();

	return service::ModifiedResult<response::Value>::convert(std::move(result), std::move(params));
}

service::AwaitableResolver Transaction::resolveIndex(service::ResolverParams&& params) const
{
	std::unique_lock resolverLock(_resolverMutex);
	auto directives = std::move(params.fieldDirectives);
	auto result = _pimpl->getIndex(service::FieldParams(service::SelectionSetParams{ params }, std::move(directives)));
	resolverLock.unlock();

	return service::ModifiedResult<int>::convert<service::TypeModifier::Nullable>(std::move(result), std::move(params));
}

service::AwaitableResolver Transaction::resolveFrom(service::ResolverParams&& params) const
{
	auto argBlock = service::ModifiedArgument<response::Value>::require<service::TypeModifier::Nullable>("block", params.arguments);
	std::unique_lock resolverLock(_resolverMutex);
	auto directives = std::move(params.fieldDirectives);
	auto result = _pimpl->getFrom(service::FieldParams(service::SelectionSetParams{ params }, std::move(directives)), std::move(argBlock));
	resolverLock.unlock();

	return service::ModifiedResult<Account>::convert(std::move(result), std::move(params));
}

service::AwaitableResolver Transaction::resolveTo(service::ResolverParams&& params) const
{
	auto argBlock = service::ModifiedArgument<response::Value>::require<service::TypeModifier::Nullable>("block", params.arguments);
	std::unique_lock resolverLock(_resolverMutex);
	auto directives = std::move(params.fieldDirectives);
	auto result = _pimpl->getTo(service::FieldParams(service::SelectionSetParams{ params }, std::move(directives)), std::move(argBlock));
	resolverLock.unlock();

	return service::ModifiedResult<Account>::convert<service::TypeModifier::Nullable>(std::move(result), std::move(params));
}

service::AwaitableResolver Transaction::resolveValue(service::ResolverParams&& params) const
{
	std::unique_lock resolverLock(_resolverMutex);
	auto directives = std::move(params.fieldDirectives);
	auto result = _pimpl->getValue(service::FieldParams(service::SelectionSetParams{ params }, std::move(directives)));
	resolverLock.unlock();

	return service::ModifiedResult<response::Value>::convert(std::move(result), std::move(params));
}

service::AwaitableResolver Transaction::resolveGasPrice(service::ResolverParams&& params) const
{
	std::unique_lock resolverLock(_resolverMutex);
	auto directives = std::move(params.fieldDirectives);
	auto result = _pimpl->getGasPrice(service::FieldParams(service::SelectionSetParams{ params }, std::move(directives)));
	resolverLock.unlock();

	return service::ModifiedResult<response::Value>::convert(std::move(result), std::move(params));
}

service::AwaitableResolver Transaction::resolveGas(service::ResolverParams&& params) const
{
	std::unique_lock resolverLock(_resolverMutex);
	auto directives = std::move(params.fieldDirectives);
	auto result = _pimpl->getGas(service::FieldParams(service::SelectionSetParams{ params }, std::move(directives)));
	resolverLock.unlock();

	return service::ModifiedResult<response::Value>::convert(std::move(result), std::move(params));
}

service::AwaitableResolver Transaction::resolveInputData(service::ResolverParams&& params) const
{
	std::unique_lock resolverLock(_resolverMutex);
	auto directives = std::move(params.fieldDirectives);
	auto result = _pimpl->getInputData(service::FieldParams(service::SelectionSetParams{ params }, std::move(directives)));
	resolverLock.unlock();

	return service::ModifiedResult<response::Value>::convert(std::move(result), std::move(params));
}

service::AwaitableResolver Transaction::resolveBlock(service::ResolverParams&& params) const
{
	std::unique_lock resolverLock(_resolverMutex);
	auto directives = std::move(params.fieldDirectives);
	auto result = _pimpl->getBlock(service::FieldParams(service::SelectionSetParams{ params }, std::move(directives)));
	resolverLock.unlock();

	return service::ModifiedResult<Block>::convert<service::TypeModifier::Nullable>(std::move(result), std::move(params));
}

service::AwaitableResolver Transaction::resolveStatus(service::ResolverParams&& params) const
{
	std::unique_lock resolverLock(_resolverMutex);
	auto directives = std::move(params.fieldDirectives);
	auto result = _pimpl->getStatus(service::FieldParams(service::SelectionSetParams{ params }, std::move(directives)));
	resolverLock.unlock();

	return service::ModifiedResult<response::Value>::convert<service::TypeModifier::Nullable>(std::move(result), std::move(params));
}

service::AwaitableResolver Transaction::resolveGasUsed(service::ResolverParams&& params) const
{
	std::unique_lock resolverLock(_resolverMutex);
	auto directives = std::move(params.fieldDirectives);
	auto result = _pimpl->getGasUsed(service::FieldParams(service::SelectionSetParams{ params }, std::move(directives)));
	resolverLock.unlock();

	return service::ModifiedResult<response::Value>::convert<service::TypeModifier::Nullable>(std::move(result), std::move(params));
}

service::AwaitableResolver Transaction::resolveCumulativeGasUsed(service::ResolverParams&& params) const
{
	std::unique_lock resolverLock(_resolverMutex);
	auto directives = std::move(params.fieldDirectives);
	auto result = _pimpl->getCumulativeGasUsed(service::FieldParams(service::SelectionSetParams{ params }, std::move(directives)));
	resolverLock.unlock();

	return service::ModifiedResult<response::Value>::convert<service::TypeModifier::Nullable>(std::move(result), std::move(params));
}

service::AwaitableResolver Transaction::resolveCreatedContract(service::ResolverParams&& params) const
{
	auto argBlock = service::ModifiedArgument<response::Value>::require<service::TypeModifier::Nullable>("block", params.arguments);
	std::unique_lock resolverLock(_resolverMutex);
	auto directives = std::move(params.fieldDirectives);
	auto result = _pimpl->getCreatedContract(service::FieldParams(service::SelectionSetParams{ params }, std::move(directives)), std::move(argBlock));
	resolverLock.unlock();

	return service::ModifiedResult<Account>::convert<service::TypeModifier::Nullable>(std::move(result), std::move(params));
}

service::AwaitableResolver Transaction::resolveLogs(service::ResolverParams&& params) const
{
	std::unique_lock resolverLock(_resolverMutex);
	auto directives = std::move(params.fieldDirectives);
	auto result = _pimpl->getLogs(service::FieldParams(service::SelectionSetParams{ params }, std::move(directives)));
	resolverLock.unlock();

	return service::ModifiedResult<Log>::convert<service::TypeModifier::Nullable, service::TypeModifier::List>(std::move(result), std::move(params));
}

service::AwaitableResolver Transaction::resolveR(service::ResolverParams&& params) const
{
	std::unique_lock resolverLock(_resolverMutex);
	auto directives = std::move(params.fieldDirectives);
	auto result = _pimpl->getR(service::FieldParams(service::SelectionSetParams{ params }, std::move(directives)));
	resolverLock.unlock();

	return service::ModifiedResult<response::Value>::convert(std::move(result), std::move(params));
}

service::AwaitableResolver Transaction::resolveS(service::ResolverParams&& params) const
{
	std::unique_lock resolverLock(_resolverMutex);
	auto directives = std::move(params.fieldDirectives);
	auto result = _pimpl->getS(service::FieldParams(service::SelectionSetParams{ params }, std::move(directives)));
	resolverLock.unlock();

	return service::ModifiedResult<response::Value>::convert(std::move(result), std::move(params));
}

service::AwaitableResolver Transaction::resolveV(service::ResolverParams&& params) const
{
	std::unique_lock resolverLock(_resolverMutex);
	auto directives = std::move(params.fieldDirectives);
	auto result = _pimpl->getV(service::FieldParams(service::SelectionSetParams{ params }, std::move(directives)));
	resolverLock.unlock();

	return service::ModifiedResult<response::Value>::convert(std::move(result), std::move(params));
}

service::AwaitableResolver Transaction::resolve_typename(service::ResolverParams&& params) const
{
	return service::Result<std::string>::convert(std::string{ R"gql(Transaction)gql" }, std::move(params));
}

} // namespace object

void AddTransactionDetails(const std::shared_ptr<schema::ObjectType>& typeTransaction, const std::shared_ptr<schema::Schema>& schema)
{
	typeTransaction->AddFields({
		schema::Field::Make(R"gql(hash)gql"sv, R"md()md"sv, std::nullopt, schema->WrapType(introspection::TypeKind::NON_NULL, schema->LookupType(R"gql(Bytes32)gql"sv))),
		schema::Field::Make(R"gql(nonce)gql"sv, R"md()md"sv, std::nullopt, schema->WrapType(introspection::TypeKind::NON_NULL, schema->LookupType(R"gql(Long)gql"sv))),
		schema::Field::Make(R"gql(index)gql"sv, R"md()md"sv, std::nullopt, schema->LookupType(R"gql(Int)gql"sv)),
		schema::Field::Make(R"gql(from)gql"sv, R"md()md"sv, std::nullopt, schema->WrapType(introspection::TypeKind::NON_NULL, schema->LookupType(R"gql(Account)gql"sv)), {
			schema::InputValue::Make(R"gql(block)gql"sv, R"md()md"sv, schema->LookupType(R"gql(Long)gql"sv), R"gql()gql"sv)
		}),
		schema::Field::Make(R"gql(to)gql"sv, R"md()md"sv, std::nullopt, schema->LookupType(R"gql(Account)gql"sv), {
			schema::InputValue::Make(R"gql(block)gql"sv, R"md()md"sv, schema->LookupType(R"gql(Long)gql"sv), R"gql()gql"sv)
		}),
		schema::Field::Make(R"gql(value)gql"sv, R"md()md"sv, std::nullopt, schema->WrapType(introspection::TypeKind::NON_NULL, schema->LookupType(R"gql(BigInt)gql"sv))),
		schema::Field::Make(R"gql(gasPrice)gql"sv, R"md()md"sv, std::nullopt, schema->WrapType(introspection::TypeKind::NON_NULL, schema->LookupType(R"gql(BigInt)gql"sv))),
		schema::Field::Make(R"gql(gas)gql"sv, R"md()md"sv, std::nullopt, schema->WrapType(introspection::TypeKind::NON_NULL, schema->LookupType(R"gql(Long)gql"sv))),
		schema::Field::Make(R"gql(inputData)gql"sv, R"md()md"sv, std::nullopt, schema->WrapType(introspection::TypeKind::NON_NULL, schema->LookupType(R"gql(Bytes)gql"sv))),
		schema::Field::Make(R"gql(block)gql"sv, R"md()md"sv, std::nullopt, schema->LookupType(R"gql(Block)gql"sv)),
		schema::Field::Make(R"gql(status)gql"sv, R"md()md"sv, std::nullopt, schema->LookupType(R"gql(Long)gql"sv)),
		schema::Field::Make(R"gql(gasUsed)gql"sv, R"md()md"sv, std::nullopt, schema->LookupType(R"gql(Long)gql"sv)),
		schema::Field::Make(R"gql(cumulativeGasUsed)gql"sv, R"md()md"sv, std::nullopt, schema->LookupType(R"gql(Long)gql"sv)),
		schema::Field::Make(R"gql(createdContract)gql"sv, R"md()md"sv, std::nullopt, schema->LookupType(R"gql(Account)gql"sv), {
			schema::InputValue::Make(R"gql(block)gql"sv, R"md()md"sv, schema->LookupType(R"gql(Long)gql"sv), R"gql()gql"sv)
		}),
		schema::Field::Make(R"gql(logs)gql"sv, R"md()md"sv, std::nullopt, schema->WrapType(introspection::TypeKind::LIST, schema->WrapType(introspection::TypeKind::NON_NULL, schema->LookupType(R"gql(Log)gql"sv)))),
		schema::Field::Make(R"gql(r)gql"sv, R"md()md"sv, std::nullopt, schema->WrapType(introspection::TypeKind::NON_NULL, schema->LookupType(R"gql(BigInt)gql"sv))),
		schema::Field::Make(R"gql(s)gql"sv, R"md()md"sv, std::nullopt, schema->WrapType(introspection::TypeKind::NON_NULL, schema->LookupType(R"gql(BigInt)gql"sv))),
		schema::Field::Make(R"gql(v)gql"sv, R"md()md"sv, std::nullopt, schema->WrapType(introspection::TypeKind::NON_NULL, schema->LookupType(R"gql(BigInt)gql"sv)))
	});
}

} // namespace graphql::taraxa
