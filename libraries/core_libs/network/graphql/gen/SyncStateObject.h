// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// WARNING! Do not edit this file manually, your changes will be overwritten.

#pragma once

#ifndef SYNCSTATEOBJECT_H
#define SYNCSTATEOBJECT_H

#include "TaraxaSchema.h"

namespace graphql::taraxa::object {
namespace methods::SyncStateHas {

template <class TImpl>
concept getStartingBlockWithParams = requires (TImpl impl, service::FieldParams params)
{
	{ service::AwaitableScalar<response::Value> { impl.getStartingBlock(std::move(params)) } };
};

template <class TImpl>
concept getStartingBlock = requires (TImpl impl)
{
	{ service::AwaitableScalar<response::Value> { impl.getStartingBlock() } };
};

template <class TImpl>
concept getCurrentBlockWithParams = requires (TImpl impl, service::FieldParams params)
{
	{ service::AwaitableScalar<response::Value> { impl.getCurrentBlock(std::move(params)) } };
};

template <class TImpl>
concept getCurrentBlock = requires (TImpl impl)
{
	{ service::AwaitableScalar<response::Value> { impl.getCurrentBlock() } };
};

template <class TImpl>
concept getHighestBlockWithParams = requires (TImpl impl, service::FieldParams params)
{
	{ service::AwaitableScalar<response::Value> { impl.getHighestBlock(std::move(params)) } };
};

template <class TImpl>
concept getHighestBlock = requires (TImpl impl)
{
	{ service::AwaitableScalar<response::Value> { impl.getHighestBlock() } };
};

template <class TImpl>
concept getPulledStatesWithParams = requires (TImpl impl, service::FieldParams params)
{
	{ service::AwaitableScalar<std::optional<response::Value>> { impl.getPulledStates(std::move(params)) } };
};

template <class TImpl>
concept getPulledStates = requires (TImpl impl)
{
	{ service::AwaitableScalar<std::optional<response::Value>> { impl.getPulledStates() } };
};

template <class TImpl>
concept getKnownStatesWithParams = requires (TImpl impl, service::FieldParams params)
{
	{ service::AwaitableScalar<std::optional<response::Value>> { impl.getKnownStates(std::move(params)) } };
};

template <class TImpl>
concept getKnownStates = requires (TImpl impl)
{
	{ service::AwaitableScalar<std::optional<response::Value>> { impl.getKnownStates() } };
};

template <class TImpl>
concept beginSelectionSet = requires (TImpl impl, const service::SelectionSetParams params)
{
	{ impl.beginSelectionSet(params) };
};

template <class TImpl>
concept endSelectionSet = requires (TImpl impl, const service::SelectionSetParams params)
{
	{ impl.endSelectionSet(params) };
};

} // namespace methods::SyncStateHas

class [[nodiscard]] SyncState final
	: public service::Object
{
private:
	[[nodiscard]] service::AwaitableResolver resolveStartingBlock(service::ResolverParams&& params) const;
	[[nodiscard]] service::AwaitableResolver resolveCurrentBlock(service::ResolverParams&& params) const;
	[[nodiscard]] service::AwaitableResolver resolveHighestBlock(service::ResolverParams&& params) const;
	[[nodiscard]] service::AwaitableResolver resolvePulledStates(service::ResolverParams&& params) const;
	[[nodiscard]] service::AwaitableResolver resolveKnownStates(service::ResolverParams&& params) const;

	[[nodiscard]] service::AwaitableResolver resolve_typename(service::ResolverParams&& params) const;

	struct [[nodiscard]] Concept
	{
		virtual ~Concept() = default;

		virtual void beginSelectionSet(const service::SelectionSetParams& params) const = 0;
		virtual void endSelectionSet(const service::SelectionSetParams& params) const = 0;

		[[nodiscard]] virtual service::AwaitableScalar<response::Value> getStartingBlock(service::FieldParams&& params) const = 0;
		[[nodiscard]] virtual service::AwaitableScalar<response::Value> getCurrentBlock(service::FieldParams&& params) const = 0;
		[[nodiscard]] virtual service::AwaitableScalar<response::Value> getHighestBlock(service::FieldParams&& params) const = 0;
		[[nodiscard]] virtual service::AwaitableScalar<std::optional<response::Value>> getPulledStates(service::FieldParams&& params) const = 0;
		[[nodiscard]] virtual service::AwaitableScalar<std::optional<response::Value>> getKnownStates(service::FieldParams&& params) const = 0;
	};

	template <class T>
	struct [[nodiscard]] Model
		: Concept
	{
		Model(std::shared_ptr<T>&& pimpl) noexcept
			: _pimpl { std::move(pimpl) }
		{
		}

		[[nodiscard]] service::AwaitableScalar<response::Value> getStartingBlock(service::FieldParams&& params) const final
		{
			if constexpr (methods::SyncStateHas::getStartingBlockWithParams<T>)
			{
				return { _pimpl->getStartingBlock(std::move(params)) };
			}
			else
			{
				static_assert(methods::SyncStateHas::getStartingBlock<T>, R"msg(SyncState::getStartingBlock is not implemented)msg");
				return { _pimpl->getStartingBlock() };
			}
		}

		[[nodiscard]] service::AwaitableScalar<response::Value> getCurrentBlock(service::FieldParams&& params) const final
		{
			if constexpr (methods::SyncStateHas::getCurrentBlockWithParams<T>)
			{
				return { _pimpl->getCurrentBlock(std::move(params)) };
			}
			else
			{
				static_assert(methods::SyncStateHas::getCurrentBlock<T>, R"msg(SyncState::getCurrentBlock is not implemented)msg");
				return { _pimpl->getCurrentBlock() };
			}
		}

		[[nodiscard]] service::AwaitableScalar<response::Value> getHighestBlock(service::FieldParams&& params) const final
		{
			if constexpr (methods::SyncStateHas::getHighestBlockWithParams<T>)
			{
				return { _pimpl->getHighestBlock(std::move(params)) };
			}
			else
			{
				static_assert(methods::SyncStateHas::getHighestBlock<T>, R"msg(SyncState::getHighestBlock is not implemented)msg");
				return { _pimpl->getHighestBlock() };
			}
		}

		[[nodiscard]] service::AwaitableScalar<std::optional<response::Value>> getPulledStates(service::FieldParams&& params) const final
		{
			if constexpr (methods::SyncStateHas::getPulledStatesWithParams<T>)
			{
				return { _pimpl->getPulledStates(std::move(params)) };
			}
			else
			{
				static_assert(methods::SyncStateHas::getPulledStates<T>, R"msg(SyncState::getPulledStates is not implemented)msg");
				return { _pimpl->getPulledStates() };
			}
		}

		[[nodiscard]] service::AwaitableScalar<std::optional<response::Value>> getKnownStates(service::FieldParams&& params) const final
		{
			if constexpr (methods::SyncStateHas::getKnownStatesWithParams<T>)
			{
				return { _pimpl->getKnownStates(std::move(params)) };
			}
			else
			{
				static_assert(methods::SyncStateHas::getKnownStates<T>, R"msg(SyncState::getKnownStates is not implemented)msg");
				return { _pimpl->getKnownStates() };
			}
		}

		void beginSelectionSet(const service::SelectionSetParams& params) const final
		{
			if constexpr (methods::SyncStateHas::beginSelectionSet<T>)
			{
				_pimpl->beginSelectionSet(params);
			}
		}

		void endSelectionSet(const service::SelectionSetParams& params) const final
		{
			if constexpr (methods::SyncStateHas::endSelectionSet<T>)
			{
				_pimpl->endSelectionSet(params);
			}
		}

	private:
		const std::shared_ptr<T> _pimpl;
	};

	SyncState(std::unique_ptr<const Concept>&& pimpl) noexcept;

	[[nodiscard]] service::TypeNames getTypeNames() const noexcept;
	[[nodiscard]] service::ResolverMap getResolvers() const noexcept;

	void beginSelectionSet(const service::SelectionSetParams& params) const final;
	void endSelectionSet(const service::SelectionSetParams& params) const final;

	const std::unique_ptr<const Concept> _pimpl;

public:
	template <class T>
	SyncState(std::shared_ptr<T> pimpl) noexcept
		: SyncState { std::unique_ptr<const Concept> { std::make_unique<Model<T>>(std::move(pimpl)) } }
	{
	}

	[[nodiscard]] static constexpr std::string_view getObjectType() noexcept
	{
		return { R"gql(SyncState)gql" };
	}
};

} // namespace graphql::taraxa::object

#endif // SYNCSTATEOBJECT_H
