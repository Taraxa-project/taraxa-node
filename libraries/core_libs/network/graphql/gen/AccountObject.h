// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// WARNING! Do not edit this file manually, your changes will be overwritten.

#pragma once

#ifndef ACCOUNTOBJECT_H
#define ACCOUNTOBJECT_H

#include "TaraxaSchema.h"

namespace graphql::taraxa::object {
namespace methods::AccountHas {

template <class TImpl>
concept getAddressWithParams = requires (TImpl impl, service::FieldParams params)
{
	{ service::AwaitableScalar<response::Value> { impl.getAddress(std::move(params)) } };
};

template <class TImpl>
concept getAddress = requires (TImpl impl)
{
	{ service::AwaitableScalar<response::Value> { impl.getAddress() } };
};

template <class TImpl>
concept getBalanceWithParams = requires (TImpl impl, service::FieldParams params)
{
	{ service::AwaitableScalar<response::Value> { impl.getBalance(std::move(params)) } };
};

template <class TImpl>
concept getBalance = requires (TImpl impl)
{
	{ service::AwaitableScalar<response::Value> { impl.getBalance() } };
};

template <class TImpl>
concept getTransactionCountWithParams = requires (TImpl impl, service::FieldParams params)
{
	{ service::AwaitableScalar<response::Value> { impl.getTransactionCount(std::move(params)) } };
};

template <class TImpl>
concept getTransactionCount = requires (TImpl impl)
{
	{ service::AwaitableScalar<response::Value> { impl.getTransactionCount() } };
};

template <class TImpl>
concept getCodeWithParams = requires (TImpl impl, service::FieldParams params)
{
	{ service::AwaitableScalar<response::Value> { impl.getCode(std::move(params)) } };
};

template <class TImpl>
concept getCode = requires (TImpl impl)
{
	{ service::AwaitableScalar<response::Value> { impl.getCode() } };
};

template <class TImpl>
concept getStorageWithParams = requires (TImpl impl, service::FieldParams params, response::Value slotArg)
{
	{ service::AwaitableScalar<response::Value> { impl.getStorage(std::move(params), std::move(slotArg)) } };
};

template <class TImpl>
concept getStorage = requires (TImpl impl, response::Value slotArg)
{
	{ service::AwaitableScalar<response::Value> { impl.getStorage(std::move(slotArg)) } };
};

template <class TImpl>
concept beginSelectionSet = requires (TImpl impl, const service::SelectionSetParams params)
{
	{ impl.beginSelectionSet(params) };
};

template <class TImpl>
concept endSelectionSet = requires (TImpl impl, const service::SelectionSetParams params)
{
	{ impl.endSelectionSet(params) };
};

} // namespace methods::AccountHas

class [[nodiscard]] Account final
	: public service::Object
{
private:
	[[nodiscard]] service::AwaitableResolver resolveAddress(service::ResolverParams&& params) const;
	[[nodiscard]] service::AwaitableResolver resolveBalance(service::ResolverParams&& params) const;
	[[nodiscard]] service::AwaitableResolver resolveTransactionCount(service::ResolverParams&& params) const;
	[[nodiscard]] service::AwaitableResolver resolveCode(service::ResolverParams&& params) const;
	[[nodiscard]] service::AwaitableResolver resolveStorage(service::ResolverParams&& params) const;

	[[nodiscard]] service::AwaitableResolver resolve_typename(service::ResolverParams&& params) const;

	struct [[nodiscard]] Concept
	{
		virtual ~Concept() = default;

		virtual void beginSelectionSet(const service::SelectionSetParams& params) const = 0;
		virtual void endSelectionSet(const service::SelectionSetParams& params) const = 0;

		[[nodiscard]] virtual service::AwaitableScalar<response::Value> getAddress(service::FieldParams&& params) const = 0;
		[[nodiscard]] virtual service::AwaitableScalar<response::Value> getBalance(service::FieldParams&& params) const = 0;
		[[nodiscard]] virtual service::AwaitableScalar<response::Value> getTransactionCount(service::FieldParams&& params) const = 0;
		[[nodiscard]] virtual service::AwaitableScalar<response::Value> getCode(service::FieldParams&& params) const = 0;
		[[nodiscard]] virtual service::AwaitableScalar<response::Value> getStorage(service::FieldParams&& params, response::Value&& slotArg) const = 0;
	};

	template <class T>
	struct [[nodiscard]] Model
		: Concept
	{
		Model(std::shared_ptr<T>&& pimpl) noexcept
			: _pimpl { std::move(pimpl) }
		{
		}

		[[nodiscard]] service::AwaitableScalar<response::Value> getAddress(service::FieldParams&& params) const final
		{
			if constexpr (methods::AccountHas::getAddressWithParams<T>)
			{
				return { _pimpl->getAddress(std::move(params)) };
			}
			else
			{
				static_assert(methods::AccountHas::getAddress<T>, R"msg(Account::getAddress is not implemented)msg");
				return { _pimpl->getAddress() };
			}
		}

		[[nodiscard]] service::AwaitableScalar<response::Value> getBalance(service::FieldParams&& params) const final
		{
			if constexpr (methods::AccountHas::getBalanceWithParams<T>)
			{
				return { _pimpl->getBalance(std::move(params)) };
			}
			else
			{
				static_assert(methods::AccountHas::getBalance<T>, R"msg(Account::getBalance is not implemented)msg");
				return { _pimpl->getBalance() };
			}
		}

		[[nodiscard]] service::AwaitableScalar<response::Value> getTransactionCount(service::FieldParams&& params) const final
		{
			if constexpr (methods::AccountHas::getTransactionCountWithParams<T>)
			{
				return { _pimpl->getTransactionCount(std::move(params)) };
			}
			else
			{
				static_assert(methods::AccountHas::getTransactionCount<T>, R"msg(Account::getTransactionCount is not implemented)msg");
				return { _pimpl->getTransactionCount() };
			}
		}

		[[nodiscard]] service::AwaitableScalar<response::Value> getCode(service::FieldParams&& params) const final
		{
			if constexpr (methods::AccountHas::getCodeWithParams<T>)
			{
				return { _pimpl->getCode(std::move(params)) };
			}
			else
			{
				static_assert(methods::AccountHas::getCode<T>, R"msg(Account::getCode is not implemented)msg");
				return { _pimpl->getCode() };
			}
		}

		[[nodiscard]] service::AwaitableScalar<response::Value> getStorage(service::FieldParams&& params, response::Value&& slotArg) const final
		{
			if constexpr (methods::AccountHas::getStorageWithParams<T>)
			{
				return { _pimpl->getStorage(std::move(params), std::move(slotArg)) };
			}
			else
			{
				static_assert(methods::AccountHas::getStorage<T>, R"msg(Account::getStorage is not implemented)msg");
				return { _pimpl->getStorage(std::move(slotArg)) };
			}
		}

		void beginSelectionSet(const service::SelectionSetParams& params) const final
		{
			if constexpr (methods::AccountHas::beginSelectionSet<T>)
			{
				_pimpl->beginSelectionSet(params);
			}
		}

		void endSelectionSet(const service::SelectionSetParams& params) const final
		{
			if constexpr (methods::AccountHas::endSelectionSet<T>)
			{
				_pimpl->endSelectionSet(params);
			}
		}

	private:
		const std::shared_ptr<T> _pimpl;
	};

	Account(std::unique_ptr<const Concept>&& pimpl) noexcept;

	[[nodiscard]] service::TypeNames getTypeNames() const noexcept;
	[[nodiscard]] service::ResolverMap getResolvers() const noexcept;

	void beginSelectionSet(const service::SelectionSetParams& params) const final;
	void endSelectionSet(const service::SelectionSetParams& params) const final;

	const std::unique_ptr<const Concept> _pimpl;

public:
	template <class T>
	Account(std::shared_ptr<T> pimpl) noexcept
		: Account { std::unique_ptr<const Concept> { std::make_unique<Model<T>>(std::move(pimpl)) } }
	{
	}

	[[nodiscard]] static constexpr std::string_view getObjectType() noexcept
	{
		return { R"gql(Account)gql" };
	}
};

} // namespace graphql::taraxa::object

#endif // ACCOUNTOBJECT_H
