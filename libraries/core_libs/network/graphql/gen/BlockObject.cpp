// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// WARNING! Do not edit this file manually, your changes will be overwritten.

#include "BlockObject.h"
#include "BlockObject.h"
#include "AccountObject.h"
#include "TransactionObject.h"
#include "LogObject.h"
#include "CallResultObject.h"

#include "graphqlservice/internal/Schema.h"

#include "graphqlservice/introspection/IntrospectionSchema.h"

#include <algorithm>
#include <functional>
#include <sstream>
#include <stdexcept>
#include <unordered_map>

using namespace std::literals;

namespace graphql::taraxa {
namespace object {

Block::Block(std::unique_ptr<const Concept>&& pimpl) noexcept
	: service::Object{ getTypeNames(), getResolvers() }
	, _pimpl { std::move(pimpl) }
{
}

service::TypeNames Block::getTypeNames() const noexcept
{
	return {
		R"gql(Block)gql"sv
	};
}

service::ResolverMap Block::getResolvers() const noexcept
{
	return {
		{ R"gql(call)gql"sv, [this](service::ResolverParams&& params) { return resolveCall(std::move(params)); } },
		{ R"gql(hash)gql"sv, [this](service::ResolverParams&& params) { return resolveHash(std::move(params)); } },
		{ R"gql(logs)gql"sv, [this](service::ResolverParams&& params) { return resolveLogs(std::move(params)); } },
		{ R"gql(miner)gql"sv, [this](service::ResolverParams&& params) { return resolveMiner(std::move(params)); } },
		{ R"gql(nonce)gql"sv, [this](service::ResolverParams&& params) { return resolveNonce(std::move(params)); } },
		{ R"gql(number)gql"sv, [this](service::ResolverParams&& params) { return resolveNumber(std::move(params)); } },
		{ R"gql(ommers)gql"sv, [this](service::ResolverParams&& params) { return resolveOmmers(std::move(params)); } },
		{ R"gql(parent)gql"sv, [this](service::ResolverParams&& params) { return resolveParent(std::move(params)); } },
		{ R"gql(account)gql"sv, [this](service::ResolverParams&& params) { return resolveAccount(std::move(params)); } },
		{ R"gql(gasUsed)gql"sv, [this](service::ResolverParams&& params) { return resolveGasUsed(std::move(params)); } },
		{ R"gql(mixHash)gql"sv, [this](service::ResolverParams&& params) { return resolveMixHash(std::move(params)); } },
		{ R"gql(ommerAt)gql"sv, [this](service::ResolverParams&& params) { return resolveOmmerAt(std::move(params)); } },
		{ R"gql(gasLimit)gql"sv, [this](service::ResolverParams&& params) { return resolveGasLimit(std::move(params)); } },
		{ R"gql(extraData)gql"sv, [this](service::ResolverParams&& params) { return resolveExtraData(std::move(params)); } },
		{ R"gql(logsBloom)gql"sv, [this](service::ResolverParams&& params) { return resolveLogsBloom(std::move(params)); } },
		{ R"gql(ommerHash)gql"sv, [this](service::ResolverParams&& params) { return resolveOmmerHash(std::move(params)); } },
		{ R"gql(stateRoot)gql"sv, [this](service::ResolverParams&& params) { return resolveStateRoot(std::move(params)); } },
		{ R"gql(timestamp)gql"sv, [this](service::ResolverParams&& params) { return resolveTimestamp(std::move(params)); } },
		{ R"gql(__typename)gql"sv, [this](service::ResolverParams&& params) { return resolve_typename(std::move(params)); } },
		{ R"gql(difficulty)gql"sv, [this](service::ResolverParams&& params) { return resolveDifficulty(std::move(params)); } },
		{ R"gql(ommerCount)gql"sv, [this](service::ResolverParams&& params) { return resolveOmmerCount(std::move(params)); } },
		{ R"gql(estimateGas)gql"sv, [this](service::ResolverParams&& params) { return resolveEstimateGas(std::move(params)); } },
		{ R"gql(receiptsRoot)gql"sv, [this](service::ResolverParams&& params) { return resolveReceiptsRoot(std::move(params)); } },
		{ R"gql(transactions)gql"sv, [this](service::ResolverParams&& params) { return resolveTransactions(std::move(params)); } },
		{ R"gql(transactionAt)gql"sv, [this](service::ResolverParams&& params) { return resolveTransactionAt(std::move(params)); } },
		{ R"gql(totalDifficulty)gql"sv, [this](service::ResolverParams&& params) { return resolveTotalDifficulty(std::move(params)); } },
		{ R"gql(transactionCount)gql"sv, [this](service::ResolverParams&& params) { return resolveTransactionCount(std::move(params)); } },
		{ R"gql(transactionsRoot)gql"sv, [this](service::ResolverParams&& params) { return resolveTransactionsRoot(std::move(params)); } }
	};
}

void Block::beginSelectionSet(const service::SelectionSetParams& params) const
{
	_pimpl->beginSelectionSet(params);
}

void Block::endSelectionSet(const service::SelectionSetParams& params) const
{
	_pimpl->endSelectionSet(params);
}

service::AwaitableResolver Block::resolveNumber(service::ResolverParams&& params) const
{
	std::unique_lock resolverLock(_resolverMutex);
	auto directives = std::move(params.fieldDirectives);
	auto result = _pimpl->getNumber(service::FieldParams(service::SelectionSetParams{ params }, std::move(directives)));
	resolverLock.unlock();

	return service::ModifiedResult<response::Value>::convert(std::move(result), std::move(params));
}

service::AwaitableResolver Block::resolveHash(service::ResolverParams&& params) const
{
	std::unique_lock resolverLock(_resolverMutex);
	auto directives = std::move(params.fieldDirectives);
	auto result = _pimpl->getHash(service::FieldParams(service::SelectionSetParams{ params }, std::move(directives)));
	resolverLock.unlock();

	return service::ModifiedResult<response::Value>::convert(std::move(result), std::move(params));
}

service::AwaitableResolver Block::resolveParent(service::ResolverParams&& params) const
{
	std::unique_lock resolverLock(_resolverMutex);
	auto directives = std::move(params.fieldDirectives);
	auto result = _pimpl->getParent(service::FieldParams(service::SelectionSetParams{ params }, std::move(directives)));
	resolverLock.unlock();

	return service::ModifiedResult<Block>::convert<service::TypeModifier::Nullable>(std::move(result), std::move(params));
}

service::AwaitableResolver Block::resolveNonce(service::ResolverParams&& params) const
{
	std::unique_lock resolverLock(_resolverMutex);
	auto directives = std::move(params.fieldDirectives);
	auto result = _pimpl->getNonce(service::FieldParams(service::SelectionSetParams{ params }, std::move(directives)));
	resolverLock.unlock();

	return service::ModifiedResult<response::Value>::convert(std::move(result), std::move(params));
}

service::AwaitableResolver Block::resolveTransactionsRoot(service::ResolverParams&& params) const
{
	std::unique_lock resolverLock(_resolverMutex);
	auto directives = std::move(params.fieldDirectives);
	auto result = _pimpl->getTransactionsRoot(service::FieldParams(service::SelectionSetParams{ params }, std::move(directives)));
	resolverLock.unlock();

	return service::ModifiedResult<response::Value>::convert(std::move(result), std::move(params));
}

service::AwaitableResolver Block::resolveTransactionCount(service::ResolverParams&& params) const
{
	std::unique_lock resolverLock(_resolverMutex);
	auto directives = std::move(params.fieldDirectives);
	auto result = _pimpl->getTransactionCount(service::FieldParams(service::SelectionSetParams{ params }, std::move(directives)));
	resolverLock.unlock();

	return service::ModifiedResult<int>::convert<service::TypeModifier::Nullable>(std::move(result), std::move(params));
}

service::AwaitableResolver Block::resolveStateRoot(service::ResolverParams&& params) const
{
	std::unique_lock resolverLock(_resolverMutex);
	auto directives = std::move(params.fieldDirectives);
	auto result = _pimpl->getStateRoot(service::FieldParams(service::SelectionSetParams{ params }, std::move(directives)));
	resolverLock.unlock();

	return service::ModifiedResult<response::Value>::convert(std::move(result), std::move(params));
}

service::AwaitableResolver Block::resolveReceiptsRoot(service::ResolverParams&& params) const
{
	std::unique_lock resolverLock(_resolverMutex);
	auto directives = std::move(params.fieldDirectives);
	auto result = _pimpl->getReceiptsRoot(service::FieldParams(service::SelectionSetParams{ params }, std::move(directives)));
	resolverLock.unlock();

	return service::ModifiedResult<response::Value>::convert(std::move(result), std::move(params));
}

service::AwaitableResolver Block::resolveMiner(service::ResolverParams&& params) const
{
	auto argBlock = service::ModifiedArgument<response::Value>::require<service::TypeModifier::Nullable>("block", params.arguments);
	std::unique_lock resolverLock(_resolverMutex);
	auto directives = std::move(params.fieldDirectives);
	auto result = _pimpl->getMiner(service::FieldParams(service::SelectionSetParams{ params }, std::move(directives)), std::move(argBlock));
	resolverLock.unlock();

	return service::ModifiedResult<Account>::convert(std::move(result), std::move(params));
}

service::AwaitableResolver Block::resolveExtraData(service::ResolverParams&& params) const
{
	std::unique_lock resolverLock(_resolverMutex);
	auto directives = std::move(params.fieldDirectives);
	auto result = _pimpl->getExtraData(service::FieldParams(service::SelectionSetParams{ params }, std::move(directives)));
	resolverLock.unlock();

	return service::ModifiedResult<response::Value>::convert(std::move(result), std::move(params));
}

service::AwaitableResolver Block::resolveGasLimit(service::ResolverParams&& params) const
{
	std::unique_lock resolverLock(_resolverMutex);
	auto directives = std::move(params.fieldDirectives);
	auto result = _pimpl->getGasLimit(service::FieldParams(service::SelectionSetParams{ params }, std::move(directives)));
	resolverLock.unlock();

	return service::ModifiedResult<response::Value>::convert(std::move(result), std::move(params));
}

service::AwaitableResolver Block::resolveGasUsed(service::ResolverParams&& params) const
{
	std::unique_lock resolverLock(_resolverMutex);
	auto directives = std::move(params.fieldDirectives);
	auto result = _pimpl->getGasUsed(service::FieldParams(service::SelectionSetParams{ params }, std::move(directives)));
	resolverLock.unlock();

	return service::ModifiedResult<response::Value>::convert(std::move(result), std::move(params));
}

service::AwaitableResolver Block::resolveTimestamp(service::ResolverParams&& params) const
{
	std::unique_lock resolverLock(_resolverMutex);
	auto directives = std::move(params.fieldDirectives);
	auto result = _pimpl->getTimestamp(service::FieldParams(service::SelectionSetParams{ params }, std::move(directives)));
	resolverLock.unlock();

	return service::ModifiedResult<response::Value>::convert(std::move(result), std::move(params));
}

service::AwaitableResolver Block::resolveLogsBloom(service::ResolverParams&& params) const
{
	std::unique_lock resolverLock(_resolverMutex);
	auto directives = std::move(params.fieldDirectives);
	auto result = _pimpl->getLogsBloom(service::FieldParams(service::SelectionSetParams{ params }, std::move(directives)));
	resolverLock.unlock();

	return service::ModifiedResult<response::Value>::convert(std::move(result), std::move(params));
}

service::AwaitableResolver Block::resolveMixHash(service::ResolverParams&& params) const
{
	std::unique_lock resolverLock(_resolverMutex);
	auto directives = std::move(params.fieldDirectives);
	auto result = _pimpl->getMixHash(service::FieldParams(service::SelectionSetParams{ params }, std::move(directives)));
	resolverLock.unlock();

	return service::ModifiedResult<response::Value>::convert(std::move(result), std::move(params));
}

service::AwaitableResolver Block::resolveDifficulty(service::ResolverParams&& params) const
{
	std::unique_lock resolverLock(_resolverMutex);
	auto directives = std::move(params.fieldDirectives);
	auto result = _pimpl->getDifficulty(service::FieldParams(service::SelectionSetParams{ params }, std::move(directives)));
	resolverLock.unlock();

	return service::ModifiedResult<response::Value>::convert(std::move(result), std::move(params));
}

service::AwaitableResolver Block::resolveTotalDifficulty(service::ResolverParams&& params) const
{
	std::unique_lock resolverLock(_resolverMutex);
	auto directives = std::move(params.fieldDirectives);
	auto result = _pimpl->getTotalDifficulty(service::FieldParams(service::SelectionSetParams{ params }, std::move(directives)));
	resolverLock.unlock();

	return service::ModifiedResult<response::Value>::convert(std::move(result), std::move(params));
}

service::AwaitableResolver Block::resolveOmmerCount(service::ResolverParams&& params) const
{
	std::unique_lock resolverLock(_resolverMutex);
	auto directives = std::move(params.fieldDirectives);
	auto result = _pimpl->getOmmerCount(service::FieldParams(service::SelectionSetParams{ params }, std::move(directives)));
	resolverLock.unlock();

	return service::ModifiedResult<int>::convert<service::TypeModifier::Nullable>(std::move(result), std::move(params));
}

service::AwaitableResolver Block::resolveOmmers(service::ResolverParams&& params) const
{
	std::unique_lock resolverLock(_resolverMutex);
	auto directives = std::move(params.fieldDirectives);
	auto result = _pimpl->getOmmers(service::FieldParams(service::SelectionSetParams{ params }, std::move(directives)));
	resolverLock.unlock();

	return service::ModifiedResult<Block>::convert<service::TypeModifier::Nullable, service::TypeModifier::List, service::TypeModifier::Nullable>(std::move(result), std::move(params));
}

service::AwaitableResolver Block::resolveOmmerAt(service::ResolverParams&& params) const
{
	auto argIndex = service::ModifiedArgument<int>::require("index", params.arguments);
	std::unique_lock resolverLock(_resolverMutex);
	auto directives = std::move(params.fieldDirectives);
	auto result = _pimpl->getOmmerAt(service::FieldParams(service::SelectionSetParams{ params }, std::move(directives)), std::move(argIndex));
	resolverLock.unlock();

	return service::ModifiedResult<Block>::convert<service::TypeModifier::Nullable>(std::move(result), std::move(params));
}

service::AwaitableResolver Block::resolveOmmerHash(service::ResolverParams&& params) const
{
	std::unique_lock resolverLock(_resolverMutex);
	auto directives = std::move(params.fieldDirectives);
	auto result = _pimpl->getOmmerHash(service::FieldParams(service::SelectionSetParams{ params }, std::move(directives)));
	resolverLock.unlock();

	return service::ModifiedResult<response::Value>::convert(std::move(result), std::move(params));
}

service::AwaitableResolver Block::resolveTransactions(service::ResolverParams&& params) const
{
	std::unique_lock resolverLock(_resolverMutex);
	auto directives = std::move(params.fieldDirectives);
	auto result = _pimpl->getTransactions(service::FieldParams(service::SelectionSetParams{ params }, std::move(directives)));
	resolverLock.unlock();

	return service::ModifiedResult<Transaction>::convert<service::TypeModifier::Nullable, service::TypeModifier::List>(std::move(result), std::move(params));
}

service::AwaitableResolver Block::resolveTransactionAt(service::ResolverParams&& params) const
{
	auto argIndex = service::ModifiedArgument<int>::require("index", params.arguments);
	std::unique_lock resolverLock(_resolverMutex);
	auto directives = std::move(params.fieldDirectives);
	auto result = _pimpl->getTransactionAt(service::FieldParams(service::SelectionSetParams{ params }, std::move(directives)), std::move(argIndex));
	resolverLock.unlock();

	return service::ModifiedResult<Transaction>::convert<service::TypeModifier::Nullable>(std::move(result), std::move(params));
}

service::AwaitableResolver Block::resolveLogs(service::ResolverParams&& params) const
{
	auto argFilter = service::ModifiedArgument<taraxa::BlockFilterCriteria>::require("filter", params.arguments);
	std::unique_lock resolverLock(_resolverMutex);
	auto directives = std::move(params.fieldDirectives);
	auto result = _pimpl->getLogs(service::FieldParams(service::SelectionSetParams{ params }, std::move(directives)), std::move(argFilter));
	resolverLock.unlock();

	return service::ModifiedResult<Log>::convert<service::TypeModifier::List>(std::move(result), std::move(params));
}

service::AwaitableResolver Block::resolveAccount(service::ResolverParams&& params) const
{
	auto argAddress = service::ModifiedArgument<response::Value>::require("address", params.arguments);
	std::unique_lock resolverLock(_resolverMutex);
	auto directives = std::move(params.fieldDirectives);
	auto result = _pimpl->getAccount(service::FieldParams(service::SelectionSetParams{ params }, std::move(directives)), std::move(argAddress));
	resolverLock.unlock();

	return service::ModifiedResult<Account>::convert(std::move(result), std::move(params));
}

service::AwaitableResolver Block::resolveCall(service::ResolverParams&& params) const
{
	auto argData = service::ModifiedArgument<taraxa::CallData>::require("data", params.arguments);
	std::unique_lock resolverLock(_resolverMutex);
	auto directives = std::move(params.fieldDirectives);
	auto result = _pimpl->getCall(service::FieldParams(service::SelectionSetParams{ params }, std::move(directives)), std::move(argData));
	resolverLock.unlock();

	return service::ModifiedResult<CallResult>::convert<service::TypeModifier::Nullable>(std::move(result), std::move(params));
}

service::AwaitableResolver Block::resolveEstimateGas(service::ResolverParams&& params) const
{
	auto argData = service::ModifiedArgument<taraxa::CallData>::require("data", params.arguments);
	std::unique_lock resolverLock(_resolverMutex);
	auto directives = std::move(params.fieldDirectives);
	auto result = _pimpl->getEstimateGas(service::FieldParams(service::SelectionSetParams{ params }, std::move(directives)), std::move(argData));
	resolverLock.unlock();

	return service::ModifiedResult<response::Value>::convert(std::move(result), std::move(params));
}

service::AwaitableResolver Block::resolve_typename(service::ResolverParams&& params) const
{
	return service::Result<std::string>::convert(std::string{ R"gql(Block)gql" }, std::move(params));
}

} // namespace object

void AddBlockDetails(const std::shared_ptr<schema::ObjectType>& typeBlock, const std::shared_ptr<schema::Schema>& schema)
{
	typeBlock->AddFields({
		schema::Field::Make(R"gql(number)gql"sv, R"md()md"sv, std::nullopt, schema->WrapType(introspection::TypeKind::NON_NULL, schema->LookupType(R"gql(Long)gql"sv))),
		schema::Field::Make(R"gql(hash)gql"sv, R"md()md"sv, std::nullopt, schema->WrapType(introspection::TypeKind::NON_NULL, schema->LookupType(R"gql(Bytes32)gql"sv))),
		schema::Field::Make(R"gql(parent)gql"sv, R"md()md"sv, std::nullopt, schema->LookupType(R"gql(Block)gql"sv)),
		schema::Field::Make(R"gql(nonce)gql"sv, R"md()md"sv, std::nullopt, schema->WrapType(introspection::TypeKind::NON_NULL, schema->LookupType(R"gql(Bytes)gql"sv))),
		schema::Field::Make(R"gql(transactionsRoot)gql"sv, R"md()md"sv, std::nullopt, schema->WrapType(introspection::TypeKind::NON_NULL, schema->LookupType(R"gql(Bytes32)gql"sv))),
		schema::Field::Make(R"gql(transactionCount)gql"sv, R"md()md"sv, std::nullopt, schema->LookupType(R"gql(Int)gql"sv)),
		schema::Field::Make(R"gql(stateRoot)gql"sv, R"md()md"sv, std::nullopt, schema->WrapType(introspection::TypeKind::NON_NULL, schema->LookupType(R"gql(Bytes32)gql"sv))),
		schema::Field::Make(R"gql(receiptsRoot)gql"sv, R"md()md"sv, std::nullopt, schema->WrapType(introspection::TypeKind::NON_NULL, schema->LookupType(R"gql(Bytes32)gql"sv))),
		schema::Field::Make(R"gql(miner)gql"sv, R"md()md"sv, std::nullopt, schema->WrapType(introspection::TypeKind::NON_NULL, schema->LookupType(R"gql(Account)gql"sv)), {
			schema::InputValue::Make(R"gql(block)gql"sv, R"md()md"sv, schema->LookupType(R"gql(Long)gql"sv), R"gql()gql"sv)
		}),
		schema::Field::Make(R"gql(extraData)gql"sv, R"md()md"sv, std::nullopt, schema->WrapType(introspection::TypeKind::NON_NULL, schema->LookupType(R"gql(Bytes)gql"sv))),
		schema::Field::Make(R"gql(gasLimit)gql"sv, R"md()md"sv, std::nullopt, schema->WrapType(introspection::TypeKind::NON_NULL, schema->LookupType(R"gql(Long)gql"sv))),
		schema::Field::Make(R"gql(gasUsed)gql"sv, R"md()md"sv, std::nullopt, schema->WrapType(introspection::TypeKind::NON_NULL, schema->LookupType(R"gql(Long)gql"sv))),
		schema::Field::Make(R"gql(timestamp)gql"sv, R"md()md"sv, std::nullopt, schema->WrapType(introspection::TypeKind::NON_NULL, schema->LookupType(R"gql(Long)gql"sv))),
		schema::Field::Make(R"gql(logsBloom)gql"sv, R"md()md"sv, std::nullopt, schema->WrapType(introspection::TypeKind::NON_NULL, schema->LookupType(R"gql(Bytes)gql"sv))),
		schema::Field::Make(R"gql(mixHash)gql"sv, R"md()md"sv, std::nullopt, schema->WrapType(introspection::TypeKind::NON_NULL, schema->LookupType(R"gql(Bytes32)gql"sv))),
		schema::Field::Make(R"gql(difficulty)gql"sv, R"md()md"sv, std::nullopt, schema->WrapType(introspection::TypeKind::NON_NULL, schema->LookupType(R"gql(BigInt)gql"sv))),
		schema::Field::Make(R"gql(totalDifficulty)gql"sv, R"md()md"sv, std::nullopt, schema->WrapType(introspection::TypeKind::NON_NULL, schema->LookupType(R"gql(BigInt)gql"sv))),
		schema::Field::Make(R"gql(ommerCount)gql"sv, R"md()md"sv, std::nullopt, schema->LookupType(R"gql(Int)gql"sv)),
		schema::Field::Make(R"gql(ommers)gql"sv, R"md()md"sv, std::nullopt, schema->WrapType(introspection::TypeKind::LIST, schema->LookupType(R"gql(Block)gql"sv))),
		schema::Field::Make(R"gql(ommerAt)gql"sv, R"md()md"sv, std::nullopt, schema->LookupType(R"gql(Block)gql"sv), {
			schema::InputValue::Make(R"gql(index)gql"sv, R"md()md"sv, schema->WrapType(introspection::TypeKind::NON_NULL, schema->LookupType(R"gql(Int)gql"sv)), R"gql()gql"sv)
		}),
		schema::Field::Make(R"gql(ommerHash)gql"sv, R"md()md"sv, std::nullopt, schema->WrapType(introspection::TypeKind::NON_NULL, schema->LookupType(R"gql(Bytes32)gql"sv))),
		schema::Field::Make(R"gql(transactions)gql"sv, R"md()md"sv, std::nullopt, schema->WrapType(introspection::TypeKind::LIST, schema->WrapType(introspection::TypeKind::NON_NULL, schema->LookupType(R"gql(Transaction)gql"sv)))),
		schema::Field::Make(R"gql(transactionAt)gql"sv, R"md()md"sv, std::nullopt, schema->LookupType(R"gql(Transaction)gql"sv), {
			schema::InputValue::Make(R"gql(index)gql"sv, R"md()md"sv, schema->WrapType(introspection::TypeKind::NON_NULL, schema->LookupType(R"gql(Int)gql"sv)), R"gql()gql"sv)
		}),
		schema::Field::Make(R"gql(logs)gql"sv, R"md()md"sv, std::nullopt, schema->WrapType(introspection::TypeKind::NON_NULL, schema->WrapType(introspection::TypeKind::LIST, schema->WrapType(introspection::TypeKind::NON_NULL, schema->LookupType(R"gql(Log)gql"sv)))), {
			schema::InputValue::Make(R"gql(filter)gql"sv, R"md()md"sv, schema->WrapType(introspection::TypeKind::NON_NULL, schema->LookupType(R"gql(BlockFilterCriteria)gql"sv)), R"gql()gql"sv)
		}),
		schema::Field::Make(R"gql(account)gql"sv, R"md()md"sv, std::nullopt, schema->WrapType(introspection::TypeKind::NON_NULL, schema->LookupType(R"gql(Account)gql"sv)), {
			schema::InputValue::Make(R"gql(address)gql"sv, R"md()md"sv, schema->WrapType(introspection::TypeKind::NON_NULL, schema->LookupType(R"gql(Address)gql"sv)), R"gql()gql"sv)
		}),
		schema::Field::Make(R"gql(call)gql"sv, R"md()md"sv, std::nullopt, schema->LookupType(R"gql(CallResult)gql"sv), {
			schema::InputValue::Make(R"gql(data)gql"sv, R"md()md"sv, schema->WrapType(introspection::TypeKind::NON_NULL, schema->LookupType(R"gql(CallData)gql"sv)), R"gql()gql"sv)
		}),
		schema::Field::Make(R"gql(estimateGas)gql"sv, R"md()md"sv, std::nullopt, schema->WrapType(introspection::TypeKind::NON_NULL, schema->LookupType(R"gql(Long)gql"sv)), {
			schema::InputValue::Make(R"gql(data)gql"sv, R"md()md"sv, schema->WrapType(introspection::TypeKind::NON_NULL, schema->LookupType(R"gql(CallData)gql"sv)), R"gql()gql"sv)
		})
	});
}

} // namespace graphql::taraxa
