// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// WARNING! Do not edit this file manually, your changes will be overwritten.

#pragma once

#ifndef DAGBLOCKOBJECT_H
#define DAGBLOCKOBJECT_H

#include "TaraxaSchema.h"

namespace graphql::taraxa::object {
namespace methods::DagBlockHas {

template <class TImpl>
concept getHashWithParams = requires (TImpl impl, service::FieldParams params)
{
	{ service::AwaitableScalar<response::Value> { impl.getHash(std::move(params)) } };
};

template <class TImpl>
concept getHash = requires (TImpl impl)
{
	{ service::AwaitableScalar<response::Value> { impl.getHash() } };
};

template <class TImpl>
concept getPivotWithParams = requires (TImpl impl, service::FieldParams params)
{
	{ service::AwaitableScalar<response::Value> { impl.getPivot(std::move(params)) } };
};

template <class TImpl>
concept getPivot = requires (TImpl impl)
{
	{ service::AwaitableScalar<response::Value> { impl.getPivot() } };
};

template <class TImpl>
concept getTipsWithParams = requires (TImpl impl, service::FieldParams params)
{
	{ service::AwaitableScalar<std::vector<response::Value>> { impl.getTips(std::move(params)) } };
};

template <class TImpl>
concept getTips = requires (TImpl impl)
{
	{ service::AwaitableScalar<std::vector<response::Value>> { impl.getTips() } };
};

template <class TImpl>
concept getLevelWithParams = requires (TImpl impl, service::FieldParams params)
{
	{ service::AwaitableScalar<response::Value> { impl.getLevel(std::move(params)) } };
};

template <class TImpl>
concept getLevel = requires (TImpl impl)
{
	{ service::AwaitableScalar<response::Value> { impl.getLevel() } };
};

template <class TImpl>
concept getPbftPeriodWithParams = requires (TImpl impl, service::FieldParams params)
{
	{ service::AwaitableScalar<std::optional<response::Value>> { impl.getPbftPeriod(std::move(params)) } };
};

template <class TImpl>
concept getPbftPeriod = requires (TImpl impl)
{
	{ service::AwaitableScalar<std::optional<response::Value>> { impl.getPbftPeriod() } };
};

template <class TImpl>
concept getAuthorWithParams = requires (TImpl impl, service::FieldParams params)
{
	{ service::AwaitableObject<std::shared_ptr<Account>> { impl.getAuthor(std::move(params)) } };
};

template <class TImpl>
concept getAuthor = requires (TImpl impl)
{
	{ service::AwaitableObject<std::shared_ptr<Account>> { impl.getAuthor() } };
};

template <class TImpl>
concept getTimestampWithParams = requires (TImpl impl, service::FieldParams params)
{
	{ service::AwaitableScalar<response::Value> { impl.getTimestamp(std::move(params)) } };
};

template <class TImpl>
concept getTimestamp = requires (TImpl impl)
{
	{ service::AwaitableScalar<response::Value> { impl.getTimestamp() } };
};

template <class TImpl>
concept getTransactionsWithParams = requires (TImpl impl, service::FieldParams params)
{
	{ service::AwaitableObject<std::optional<std::vector<std::shared_ptr<Transaction>>>> { impl.getTransactions(std::move(params)) } };
};

template <class TImpl>
concept getTransactions = requires (TImpl impl)
{
	{ service::AwaitableObject<std::optional<std::vector<std::shared_ptr<Transaction>>>> { impl.getTransactions() } };
};

template <class TImpl>
concept beginSelectionSet = requires (TImpl impl, const service::SelectionSetParams params)
{
	{ impl.beginSelectionSet(params) };
};

template <class TImpl>
concept endSelectionSet = requires (TImpl impl, const service::SelectionSetParams params)
{
	{ impl.endSelectionSet(params) };
};

} // namespace methods::DagBlockHas

class [[nodiscard]] DagBlock final
	: public service::Object
{
private:
	[[nodiscard]] service::AwaitableResolver resolveHash(service::ResolverParams&& params) const;
	[[nodiscard]] service::AwaitableResolver resolvePivot(service::ResolverParams&& params) const;
	[[nodiscard]] service::AwaitableResolver resolveTips(service::ResolverParams&& params) const;
	[[nodiscard]] service::AwaitableResolver resolveLevel(service::ResolverParams&& params) const;
	[[nodiscard]] service::AwaitableResolver resolvePbftPeriod(service::ResolverParams&& params) const;
	[[nodiscard]] service::AwaitableResolver resolveAuthor(service::ResolverParams&& params) const;
	[[nodiscard]] service::AwaitableResolver resolveTimestamp(service::ResolverParams&& params) const;
	[[nodiscard]] service::AwaitableResolver resolveTransactions(service::ResolverParams&& params) const;

	[[nodiscard]] service::AwaitableResolver resolve_typename(service::ResolverParams&& params) const;

	struct [[nodiscard]] Concept
	{
		virtual ~Concept() = default;

		virtual void beginSelectionSet(const service::SelectionSetParams& params) const = 0;
		virtual void endSelectionSet(const service::SelectionSetParams& params) const = 0;

		[[nodiscard]] virtual service::AwaitableScalar<response::Value> getHash(service::FieldParams&& params) const = 0;
		[[nodiscard]] virtual service::AwaitableScalar<response::Value> getPivot(service::FieldParams&& params) const = 0;
		[[nodiscard]] virtual service::AwaitableScalar<std::vector<response::Value>> getTips(service::FieldParams&& params) const = 0;
		[[nodiscard]] virtual service::AwaitableScalar<response::Value> getLevel(service::FieldParams&& params) const = 0;
		[[nodiscard]] virtual service::AwaitableScalar<std::optional<response::Value>> getPbftPeriod(service::FieldParams&& params) const = 0;
		[[nodiscard]] virtual service::AwaitableObject<std::shared_ptr<Account>> getAuthor(service::FieldParams&& params) const = 0;
		[[nodiscard]] virtual service::AwaitableScalar<response::Value> getTimestamp(service::FieldParams&& params) const = 0;
		[[nodiscard]] virtual service::AwaitableObject<std::optional<std::vector<std::shared_ptr<Transaction>>>> getTransactions(service::FieldParams&& params) const = 0;
	};

	template <class T>
	struct [[nodiscard]] Model
		: Concept
	{
		Model(std::shared_ptr<T>&& pimpl) noexcept
			: _pimpl { std::move(pimpl) }
		{
		}

		[[nodiscard]] service::AwaitableScalar<response::Value> getHash(service::FieldParams&& params) const final
		{
			if constexpr (methods::DagBlockHas::getHashWithParams<T>)
			{
				return { _pimpl->getHash(std::move(params)) };
			}
			else
			{
				static_assert(methods::DagBlockHas::getHash<T>, R"msg(DagBlock::getHash is not implemented)msg");
				return { _pimpl->getHash() };
			}
		}

		[[nodiscard]] service::AwaitableScalar<response::Value> getPivot(service::FieldParams&& params) const final
		{
			if constexpr (methods::DagBlockHas::getPivotWithParams<T>)
			{
				return { _pimpl->getPivot(std::move(params)) };
			}
			else
			{
				static_assert(methods::DagBlockHas::getPivot<T>, R"msg(DagBlock::getPivot is not implemented)msg");
				return { _pimpl->getPivot() };
			}
		}

		[[nodiscard]] service::AwaitableScalar<std::vector<response::Value>> getTips(service::FieldParams&& params) const final
		{
			if constexpr (methods::DagBlockHas::getTipsWithParams<T>)
			{
				return { _pimpl->getTips(std::move(params)) };
			}
			else
			{
				static_assert(methods::DagBlockHas::getTips<T>, R"msg(DagBlock::getTips is not implemented)msg");
				return { _pimpl->getTips() };
			}
		}

		[[nodiscard]] service::AwaitableScalar<response::Value> getLevel(service::FieldParams&& params) const final
		{
			if constexpr (methods::DagBlockHas::getLevelWithParams<T>)
			{
				return { _pimpl->getLevel(std::move(params)) };
			}
			else
			{
				static_assert(methods::DagBlockHas::getLevel<T>, R"msg(DagBlock::getLevel is not implemented)msg");
				return { _pimpl->getLevel() };
			}
		}

		[[nodiscard]] service::AwaitableScalar<std::optional<response::Value>> getPbftPeriod(service::FieldParams&& params) const final
		{
			if constexpr (methods::DagBlockHas::getPbftPeriodWithParams<T>)
			{
				return { _pimpl->getPbftPeriod(std::move(params)) };
			}
			else
			{
				static_assert(methods::DagBlockHas::getPbftPeriod<T>, R"msg(DagBlock::getPbftPeriod is not implemented)msg");
				return { _pimpl->getPbftPeriod() };
			}
		}

		[[nodiscard]] service::AwaitableObject<std::shared_ptr<Account>> getAuthor(service::FieldParams&& params) const final
		{
			if constexpr (methods::DagBlockHas::getAuthorWithParams<T>)
			{
				return { _pimpl->getAuthor(std::move(params)) };
			}
			else
			{
				static_assert(methods::DagBlockHas::getAuthor<T>, R"msg(DagBlock::getAuthor is not implemented)msg");
				return { _pimpl->getAuthor() };
			}
		}

		[[nodiscard]] service::AwaitableScalar<response::Value> getTimestamp(service::FieldParams&& params) const final
		{
			if constexpr (methods::DagBlockHas::getTimestampWithParams<T>)
			{
				return { _pimpl->getTimestamp(std::move(params)) };
			}
			else
			{
				static_assert(methods::DagBlockHas::getTimestamp<T>, R"msg(DagBlock::getTimestamp is not implemented)msg");
				return { _pimpl->getTimestamp() };
			}
		}

		[[nodiscard]] service::AwaitableObject<std::optional<std::vector<std::shared_ptr<Transaction>>>> getTransactions(service::FieldParams&& params) const final
		{
			if constexpr (methods::DagBlockHas::getTransactionsWithParams<T>)
			{
				return { _pimpl->getTransactions(std::move(params)) };
			}
			else
			{
				static_assert(methods::DagBlockHas::getTransactions<T>, R"msg(DagBlock::getTransactions is not implemented)msg");
				return { _pimpl->getTransactions() };
			}
		}

		void beginSelectionSet(const service::SelectionSetParams& params) const final
		{
			if constexpr (methods::DagBlockHas::beginSelectionSet<T>)
			{
				_pimpl->beginSelectionSet(params);
			}
		}

		void endSelectionSet(const service::SelectionSetParams& params) const final
		{
			if constexpr (methods::DagBlockHas::endSelectionSet<T>)
			{
				_pimpl->endSelectionSet(params);
			}
		}

	private:
		const std::shared_ptr<T> _pimpl;
	};

	DagBlock(std::unique_ptr<const Concept>&& pimpl) noexcept;

	[[nodiscard]] service::TypeNames getTypeNames() const noexcept;
	[[nodiscard]] service::ResolverMap getResolvers() const noexcept;

	void beginSelectionSet(const service::SelectionSetParams& params) const final;
	void endSelectionSet(const service::SelectionSetParams& params) const final;

	const std::unique_ptr<const Concept> _pimpl;

public:
	template <class T>
	DagBlock(std::shared_ptr<T> pimpl) noexcept
		: DagBlock { std::unique_ptr<const Concept> { std::make_unique<Model<T>>(std::move(pimpl)) } }
	{
	}

	[[nodiscard]] static constexpr std::string_view getObjectType() noexcept
	{
		return { R"gql(DagBlock)gql" };
	}
};

} // namespace graphql::taraxa::object

#endif // DAGBLOCKOBJECT_H
