/**
 * This file is generated by jsonrpcstub, DO NOT CHANGE IT MANUALLY!
 */

#ifndef JSONRPC_CPP_STUB_TARAXA_NET_DEBUGCLIENT_H_
#define JSONRPC_CPP_STUB_TARAXA_NET_DEBUGCLIENT_H_

#include <jsonrpccpp/client.h>

namespace taraxa {
namespace net {
class DebugClient : public jsonrpc::Client {
 public:
  DebugClient(jsonrpc::IClientConnector& conn, jsonrpc::clientVersion_t type = jsonrpc::JSONRPC_CLIENT_V2)
      : jsonrpc::Client(conn, type) {}

  std::string debug_traceTransaction(const std::string& param1,
                                     const Json::Value& param2) throw(jsonrpc::JsonRpcException) {
    Json::Value p;
    p.append(param1);
    p.append(param2);
    Json::Value result = this->CallMethod("debug_traceTransaction", p);
    if (result.isString())
      return result.asString();
    else
      throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
  }
  std::string debug_traceCall(const Json::Value& param1, const std::string& param2,
                              const Json::Value& param3) throw(jsonrpc::JsonRpcException) {
    Json::Value p;
    p.append(param1);
    p.append(param2);
    p.append(param3);
    Json::Value result = this->CallMethod("debug_traceCall", p);
    if (result.isString())
      return result.asString();
    else
      throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
  }
};

}  // namespace net
}  // namespace taraxa
#endif  // JSONRPC_CPP_STUB_TARAXA_NET_DEBUGCLIENT_H_
