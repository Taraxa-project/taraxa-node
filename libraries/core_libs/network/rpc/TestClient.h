/**
 * This file is generated by jsonrpcstub, DO NOT CHANGE IT MANUALLY!
 */

#ifndef JSONRPC_CPP_STUB_TARAXA_NET_TESTCLIENT_H_
#define JSONRPC_CPP_STUB_TARAXA_NET_TESTCLIENT_H_

#include <jsonrpccpp/client.h>

namespace taraxa {
namespace net {
class TestClient : public jsonrpc::Client {
 public:
  TestClient(jsonrpc::IClientConnector& conn, jsonrpc::clientVersion_t type = jsonrpc::JSONRPC_CLIENT_V2)
      : jsonrpc::Client(conn, type) {}

  Json::Value get_sortition_change(const Json::Value& param1) throw(jsonrpc::JsonRpcException) {
    Json::Value p;
    p.append(param1);
    Json::Value result = this->CallMethod("get_sortition_change", p);
    if (result.isObject())
      return result;
    else
      throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
  }
  Json::Value send_coin_transaction(const Json::Value& param1) throw(jsonrpc::JsonRpcException) {
    Json::Value p;
    p.append(param1);
    Json::Value result = this->CallMethod("send_coin_transaction", p);
    if (result.isObject())
      return result;
    else
      throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
  }
  Json::Value send_coin_transactions(const Json::Value& param1) throw(jsonrpc::JsonRpcException) {
    Json::Value p;
    p.append(param1);
    Json::Value result = this->CallMethod("send_coin_transactions", p);
    if (result.isObject())
      return result;
    else
      throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
  }
  Json::Value get_account_address() throw(jsonrpc::JsonRpcException) {
    Json::Value p;
    p = Json::nullValue;
    Json::Value result = this->CallMethod("get_account_address", p);
    if (result.isObject())
      return result;
    else
      throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
  }
  Json::Value get_peer_count() throw(jsonrpc::JsonRpcException) {
    Json::Value p;
    p = Json::nullValue;
    Json::Value result = this->CallMethod("get_peer_count", p);
    if (result.isObject())
      return result;
    else
      throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
  }
  Json::Value get_node_status() throw(jsonrpc::JsonRpcException) {
    Json::Value p;
    p = Json::nullValue;
    Json::Value result = this->CallMethod("get_node_status", p);
    if (result.isObject())
      return result;
    else
      throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
  }
  Json::Value get_all_nodes() throw(jsonrpc::JsonRpcException) {
    Json::Value p;
    p = Json::nullValue;
    Json::Value result = this->CallMethod("get_all_nodes", p);
    if (result.isObject())
      return result;
    else
      throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
  }
};

}  // namespace net
}  // namespace taraxa
#endif  // JSONRPC_CPP_STUB_TARAXA_NET_TESTCLIENT_H_
