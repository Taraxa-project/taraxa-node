syntax = "proto3";

package ledger;
option go_package="ledgerpb";

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "google/api/annotations.proto";

/*

    This file would represent the RPC API for the ledger
    that can be used by clients like wallet etc.

*/

message ChainInfo {
    string chain_name = 1;
    uint64 num_blocks = 2;
    uint64 num_headers = 3;
    string block_hash = 4;
    string difficulty = 5;
    string version = 6;
    string sub_version = 7;
    string protocol_version = 8;
    int32 decimals = 9;
}

message BlockHeader {
    string hash = 1;
    uint64 height = 5;
    uint64 confirmations = 6;
    uint64 size = 7;
    google.protobuf.Timestamp time_stamp = 8;
}

message Transaction {
    string from = 1;
    string to = 2;
    string amount = 3;
    uint64 nonce = 4;
    google.protobuf.Timestamp time_stamp = 5;
}

message Block {
    BlockHeader header = 1;
    string pivot = 2;
    repeated string past = 3;
    repeated string future = 4;
    repeated string anticone = 5;
    repeated string tips = 6;
    repeated Transaction transactions = 7;
    bytes signature = 8;
    string hash = 9;
    string publisher = 10;
}

message BlockInfo {
    BlockHeader header = 1;
    string merkle_root = 2;
    string version = 3;
    uint64 nonce = 4;
    string difficulty = 5;
    repeated string transaction_ids = 6;
}

message IsTestnetResponse {
    bool is_testnet = 1;
}

message GetNetworkNameResponse {
    string network_name = 1;
}

message GetVersionResponse {
    string version = 1;
}

message GetSubversionResponse {
    string sub_version = 1;
}

message GetCoinNameResponse {
    string coin_name = 1;
}

message GetChainInfoResponse {
    ChainInfo chain_info = 1;
}

message GetBestBlockHashResponse {
    string block_hash = 1;
}

message GetBestBlockHeightResponse {
    uint64 height = 1;
}

message GetBlockHashRequest {
    uint64 height = 1;
}

message GetBlockHashResponse {
    string hash = 1;
}

message GetBlockHeaderRequest {
    string hash = 1;
}

message GetBlockHeaderResponse {
    BlockHeader header = 1;
}

message GetBlockRequest {
    string hash = 1;
}

message GetBlockResponse {
    Block block = 1;
}

message GetBlockInfoRequest {
    string hash = 1;
}

message GetBlockInfoResponse {
    BlockInfo block_info = 1;
}



service LedgerService{
    /*

        Metadata RPC API
        This section will be outlining the metadata API for the
        ledger.

        IsTestnet - Used to determine whether the current ledger is
                    running on a test network
        GetNetworkName - Used to get the network name
        GetSubversion - Used to fetch the current version
        GetCoinName - Used to get the cryptocurrency string symbol
        GetChainInfo - Used to fetch all the metadata

    */

    rpc IsTestnet(google.protobuf.Empty) returns (IsTestnetResponse) {
        option (google.api.http) = {
            get: "/v1/isTestNet"
        };
    }

    rpc GetNetworkName(google.protobuf.Empty) returns (GetNetworkNameResponse) {
        option (google.api.http) = {
            get: "/v1/getNetworkName"
        };
    }

    rpc GetVersion(google.protobuf.Empty) returns (GetVersionResponse) {
        option (google.api.http) = {
            get: "/v1/getVersion"
        };
    }

    rpc GetSubversion(google.protobuf.Empty) returns (GetSubversionResponse) {
        option (google.api.http) = {
            get: "/v1/getSubversion"
        };
    }

    rpc GetCoinName(google.protobuf.Empty) returns (GetCoinNameResponse) {
        option (google.api.http) = {
            get: "/v1/getcoinName"
        };
    }

    rpc GetChainInfo(google.protobuf.Empty) returns (GetChainInfoResponse) {
        option (google.api.http) = {
            get: "/v1/getChainInfo"
        };
    }


    /*

        Ledger/Blockchain RPC API
        This section will be outlining the ledger/blockchain
        specific requests.

        GetBestBlockHash - get the current chain tip hash
        GetBestBlockHeight - get the current chain tip height
        GetBlockHash(height uint64) - get the specified block hash
        GetBlockHeader(hash string) - get the header for the specified block hash
        GetBlock(hash string) - get the block with the specified hash
        GetBlockInfo(hash string) - get the block metadata for the specified block hash

    */

    rpc GetBestBlockHash(google.protobuf.Empty) returns (GetBestBlockHashResponse) {
        option (google.api.http) = {
            get: "/v1/getBestBlockHash"
        };
    }

    rpc GetBestBlockHeight(google.protobuf.Empty) returns (GetBestBlockHeightResponse) {
        option (google.api.http) = {
            get: "/v1/getBestBlockHeight"
        };
    }

    rpc GetBlockHash(GetBlockHashRequest) returns (GetBlockHashResponse) {
        option (google.api.http) = {
            get: "/v1/getBlockHash/{height}"
        };
    }

    rpc GetBlockHeader(GetBlockHeaderRequest) returns (GetBlockHeaderResponse) {
        option (google.api.http) = {
            get: "/v1/getBlockHeader/{hash}"
        };
    }

    rpc GetBlock(GetBlockRequest) returns (GetBlockResponse) {
        option (google.api.http) = {
            get: "/v1/getBlock/{hash}"
        };
    }

    rpc GetBlockInfo(GetBlockInfoRequest) returns (GetBlockInfoResponse) {
        option (google.api.http) = {
            get: "/v1/getBlockInfo/{hash}"
        };
    }

    /*

        Transactions RPC API

    */



}
