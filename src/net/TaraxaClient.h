/**
 * This file is generated by jsonrpcstub, DO NOT CHANGE IT MANUALLY!
 */

#ifndef JSONRPC_CPP_STUB_TARAXA_NET_TARAXACLIENT_H_
#define JSONRPC_CPP_STUB_TARAXA_NET_TARAXACLIENT_H_

#include <jsonrpccpp/client.h>

namespace taraxa {
namespace net {
class TaraxaClient : public jsonrpc::Client {
 public:
  TaraxaClient(jsonrpc::IClientConnector& conn, jsonrpc::clientVersion_t type = jsonrpc::JSONRPC_CLIENT_V2)
      : jsonrpc::Client(conn, type) {}

  std::string taraxa_protocolVersion() {
    Json::Value p;
    p = Json::nullValue;
    Json::Value result = this->CallMethod("taraxa_protocolVersion", p);
    if (result.isString())
      return result.asString();
    else
      throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
  }
  Json::Value taraxa_getDagBlockByHash(const std::string& param01, bool param02) {
    Json::Value p;
    p.append(param01);
    p.append(param02);
    Json::Value result = this->CallMethod("taraxa_getDagBlockByHash", p);
    if (result.isObject())
      return result;
    else
      throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
  }
  Json::Value taraxa_getDagBlockByLevel(const std::string& param01, bool param02) {
    Json::Value p;
    p.append(param01);
    p.append(param02);
    Json::Value result = this->CallMethod("taraxa_getDagBlockByLevel", p);
    if (result.isObject())
      return result;
    else
      throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
  }
  std::string taraxa_dagBlockLevel() {
    Json::Value p;
    p = Json::nullValue;
    Json::Value result = this->CallMethod("taraxa_dagBlockLevel", p);
    if (result.isString())
      return result.asString();
    else
      throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
  }
  std::string taraxa_dagBlockPeriod() {
    Json::Value p;
    p = Json::nullValue;
    Json::Value result = this->CallMethod("taraxa_dagBlockPeriod", p);
    if (result.isString())
      return result.asString();
    else
      throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
  }
  Json::Value taraxa_getScheduleBlockByPeriod(const std::string& param01) {
    Json::Value p;
    p.append(param01);
    Json::Value result = this->CallMethod("taraxa_getScheduleBlockByPeriod", p);
    if (result.isObject())
      return result;
    else
      throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
  }
  Json::Value taraxa_getConfig() {
    Json::Value p;
    p = Json::nullValue;
    Json::Value result = this->CallMethod("taraxa_getConfig", p);
    if (result.isObject())
      return result;
    else
      throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
  }
  Json::Value taraxa_queryDPOS(const Json::Value& param01) {
    Json::Value p;
    p.append(param01);
    Json::Value result = this->CallMethod("taraxa_queryDPOS", p);
    if (result.isObject())
      return result;
    else
      throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
  }
};

}  // namespace net
}  // namespace taraxa
#endif  // JSONRPC_CPP_STUB_TARAXA_NET_TARAXACLIENT_H_
