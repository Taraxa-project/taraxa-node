/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package github.com/Taraxa-project/taraxa-evm/taraxa/C */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h> /* for ptrdiff_t below */

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 3 "misc.go"
#include "common.h"

#line 1 "cgo-generated-wrapper"

#line 3 "state.go"
#include "common.h"
#include "state.h"
#include <rocksdb/c.h>

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef __SIZE_TYPE__ GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern void go_set_gc_percent(int pct);
extern void go_gc();
extern void go_gc_async();
extern void taraxa_evm_keccak256_init_pool(uint64_t size);
extern taraxa_evm_Bytes taraxa_evm_mainnet_genesis_balances();
extern void taraxa_evm_traceback(taraxa_evm_BytesCallback cb);
extern taraxa_evm_state_API_ptr taraxa_evm_state_api_new(taraxa_evm_Bytes params_enc, taraxa_evm_BytesCallback cb_err);
extern void taraxa_evm_state_api_free(taraxa_evm_state_API_ptr ptr, taraxa_evm_BytesCallback cb_err);
extern void taraxa_evm_state_api_get_last_committed_state_descriptor(taraxa_evm_state_API_ptr ptr, taraxa_evm_BytesCallback cb, taraxa_evm_BytesCallback cb_err);
extern void taraxa_evm_state_api_prove(taraxa_evm_state_API_ptr ptr, taraxa_evm_Bytes params_enc, taraxa_evm_BytesCallback cb, taraxa_evm_BytesCallback cb_err);
extern void taraxa_evm_state_api_get_account(taraxa_evm_state_API_ptr ptr, taraxa_evm_Bytes params_enc, taraxa_evm_BytesCallback cb, taraxa_evm_BytesCallback cb_err);
extern void taraxa_evm_state_api_get_account_storage(taraxa_evm_state_API_ptr ptr, taraxa_evm_Bytes params_enc, taraxa_evm_BytesCallback cb, taraxa_evm_BytesCallback cb_err);
extern void taraxa_evm_state_api_get_code_by_address(taraxa_evm_state_API_ptr ptr, taraxa_evm_Bytes params_enc, taraxa_evm_BytesCallback cb, taraxa_evm_BytesCallback cb_err);
extern void taraxa_evm_state_api_dry_run_transaction(taraxa_evm_state_API_ptr ptr, taraxa_evm_Bytes params_enc, taraxa_evm_BytesCallback cb, taraxa_evm_BytesCallback cb_err);
extern void taraxa_evm_state_api_transition_state(taraxa_evm_state_API_ptr ptr, taraxa_evm_Bytes params_enc, taraxa_evm_BytesCallback cb, taraxa_evm_BytesCallback cb_err);
extern void taraxa_evm_state_api_transition_state_commit(taraxa_evm_state_API_ptr ptr, taraxa_evm_BytesCallback cb_err);
extern GoUint8 taraxa_evm_state_api_dpos_is_eligible(taraxa_evm_state_API_ptr ptr, taraxa_evm_Bytes params_enc, taraxa_evm_BytesCallback cb_err);
extern void taraxa_evm_state_api_dpos_get_staking_balance(taraxa_evm_state_API_ptr ptr, taraxa_evm_Bytes params_enc, taraxa_evm_BytesCallback cb, taraxa_evm_BytesCallback cb_err);
extern void taraxa_evm_state_api_dpos_query(taraxa_evm_state_API_ptr ptr, taraxa_evm_Bytes params_enc, taraxa_evm_BytesCallback cb, taraxa_evm_BytesCallback cb_err);
extern GoUint64 taraxa_evm_state_api_dpos_eligible_count(taraxa_evm_state_API_ptr ptr, GoUint64 blk_n, taraxa_evm_BytesCallback cb_err);
extern void taraxa_evm_state_api_db_snapshot(taraxa_evm_state_API_ptr ptr, GoString dir, GoUint64 log_size_for_flush, taraxa_evm_BytesCallback cb_err);
extern taraxa_evm_Addr taraxa_evm_state_api_dpos_contract_addr();

#ifdef __cplusplus
}
#endif
