// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/servicecontrol/v1/service_controller.proto

#ifndef PROTOBUF_INCLUDED_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto
#define PROTOBUF_INCLUDED_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/servicecontrol/v1/check_error.pb.h"
#include "google/api/servicecontrol/v1/operation.pb.h"
#include "google/rpc/status.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto 

namespace protobuf_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[7];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto
namespace google {
namespace api {
namespace servicecontrol {
namespace v1 {
class CheckRequest;
class CheckRequestDefaultTypeInternal;
extern CheckRequestDefaultTypeInternal _CheckRequest_default_instance_;
class CheckResponse;
class CheckResponseDefaultTypeInternal;
extern CheckResponseDefaultTypeInternal _CheckResponse_default_instance_;
class CheckResponse_CheckInfo;
class CheckResponse_CheckInfoDefaultTypeInternal;
extern CheckResponse_CheckInfoDefaultTypeInternal _CheckResponse_CheckInfo_default_instance_;
class CheckResponse_ConsumerInfo;
class CheckResponse_ConsumerInfoDefaultTypeInternal;
extern CheckResponse_ConsumerInfoDefaultTypeInternal _CheckResponse_ConsumerInfo_default_instance_;
class ReportRequest;
class ReportRequestDefaultTypeInternal;
extern ReportRequestDefaultTypeInternal _ReportRequest_default_instance_;
class ReportResponse;
class ReportResponseDefaultTypeInternal;
extern ReportResponseDefaultTypeInternal _ReportResponse_default_instance_;
class ReportResponse_ReportError;
class ReportResponse_ReportErrorDefaultTypeInternal;
extern ReportResponse_ReportErrorDefaultTypeInternal _ReportResponse_ReportError_default_instance_;
}  // namespace v1
}  // namespace servicecontrol
}  // namespace api
}  // namespace google
namespace google {
namespace protobuf {
template<> ::google::api::servicecontrol::v1::CheckRequest* Arena::CreateMaybeMessage<::google::api::servicecontrol::v1::CheckRequest>(Arena*);
template<> ::google::api::servicecontrol::v1::CheckResponse* Arena::CreateMaybeMessage<::google::api::servicecontrol::v1::CheckResponse>(Arena*);
template<> ::google::api::servicecontrol::v1::CheckResponse_CheckInfo* Arena::CreateMaybeMessage<::google::api::servicecontrol::v1::CheckResponse_CheckInfo>(Arena*);
template<> ::google::api::servicecontrol::v1::CheckResponse_ConsumerInfo* Arena::CreateMaybeMessage<::google::api::servicecontrol::v1::CheckResponse_ConsumerInfo>(Arena*);
template<> ::google::api::servicecontrol::v1::ReportRequest* Arena::CreateMaybeMessage<::google::api::servicecontrol::v1::ReportRequest>(Arena*);
template<> ::google::api::servicecontrol::v1::ReportResponse* Arena::CreateMaybeMessage<::google::api::servicecontrol::v1::ReportResponse>(Arena*);
template<> ::google::api::servicecontrol::v1::ReportResponse_ReportError* Arena::CreateMaybeMessage<::google::api::servicecontrol::v1::ReportResponse_ReportError>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace google {
namespace api {
namespace servicecontrol {
namespace v1 {

// ===================================================================

class CheckRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.api.servicecontrol.v1.CheckRequest) */ {
 public:
  CheckRequest();
  virtual ~CheckRequest();

  CheckRequest(const CheckRequest& from);

  inline CheckRequest& operator=(const CheckRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CheckRequest(CheckRequest&& from) noexcept
    : CheckRequest() {
    *this = ::std::move(from);
  }

  inline CheckRequest& operator=(CheckRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckRequest* internal_default_instance() {
    return reinterpret_cast<const CheckRequest*>(
               &_CheckRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(CheckRequest* other);
  void Swap(CheckRequest* other);
  friend void swap(CheckRequest& a, CheckRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CheckRequest* New() const final {
    return CreateMaybeMessage<CheckRequest>(NULL);
  }

  CheckRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CheckRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CheckRequest& from);
  void MergeFrom(const CheckRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckRequest* other);
  protected:
  explicit CheckRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string service_name = 1;
  void clear_service_name();
  static const int kServiceNameFieldNumber = 1;
  const ::std::string& service_name() const;
  void set_service_name(const ::std::string& value);
  #if LANG_CXX11
  void set_service_name(::std::string&& value);
  #endif
  void set_service_name(const char* value);
  void set_service_name(const char* value, size_t size);
  ::std::string* mutable_service_name();
  ::std::string* release_service_name();
  void set_allocated_service_name(::std::string* service_name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_service_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_service_name(
      ::std::string* service_name);

  // string service_config_id = 4;
  void clear_service_config_id();
  static const int kServiceConfigIdFieldNumber = 4;
  const ::std::string& service_config_id() const;
  void set_service_config_id(const ::std::string& value);
  #if LANG_CXX11
  void set_service_config_id(::std::string&& value);
  #endif
  void set_service_config_id(const char* value);
  void set_service_config_id(const char* value, size_t size);
  ::std::string* mutable_service_config_id();
  ::std::string* release_service_config_id();
  void set_allocated_service_config_id(::std::string* service_config_id);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_service_config_id();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_service_config_id(
      ::std::string* service_config_id);

  // .google.api.servicecontrol.v1.Operation operation = 2;
  bool has_operation() const;
  void clear_operation();
  static const int kOperationFieldNumber = 2;
  private:
  const ::google::api::servicecontrol::v1::Operation& _internal_operation() const;
  public:
  const ::google::api::servicecontrol::v1::Operation& operation() const;
  ::google::api::servicecontrol::v1::Operation* release_operation();
  ::google::api::servicecontrol::v1::Operation* mutable_operation();
  void set_allocated_operation(::google::api::servicecontrol::v1::Operation* operation);
  void unsafe_arena_set_allocated_operation(
      ::google::api::servicecontrol::v1::Operation* operation);
  ::google::api::servicecontrol::v1::Operation* unsafe_arena_release_operation();

  // @@protoc_insertion_point(class_scope:google.api.servicecontrol.v1.CheckRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr service_name_;
  ::google::protobuf::internal::ArenaStringPtr service_config_id_;
  ::google::api::servicecontrol::v1::Operation* operation_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CheckResponse_CheckInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.api.servicecontrol.v1.CheckResponse.CheckInfo) */ {
 public:
  CheckResponse_CheckInfo();
  virtual ~CheckResponse_CheckInfo();

  CheckResponse_CheckInfo(const CheckResponse_CheckInfo& from);

  inline CheckResponse_CheckInfo& operator=(const CheckResponse_CheckInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CheckResponse_CheckInfo(CheckResponse_CheckInfo&& from) noexcept
    : CheckResponse_CheckInfo() {
    *this = ::std::move(from);
  }

  inline CheckResponse_CheckInfo& operator=(CheckResponse_CheckInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckResponse_CheckInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckResponse_CheckInfo* internal_default_instance() {
    return reinterpret_cast<const CheckResponse_CheckInfo*>(
               &_CheckResponse_CheckInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void UnsafeArenaSwap(CheckResponse_CheckInfo* other);
  void Swap(CheckResponse_CheckInfo* other);
  friend void swap(CheckResponse_CheckInfo& a, CheckResponse_CheckInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CheckResponse_CheckInfo* New() const final {
    return CreateMaybeMessage<CheckResponse_CheckInfo>(NULL);
  }

  CheckResponse_CheckInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CheckResponse_CheckInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CheckResponse_CheckInfo& from);
  void MergeFrom(const CheckResponse_CheckInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckResponse_CheckInfo* other);
  protected:
  explicit CheckResponse_CheckInfo(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.api.servicecontrol.v1.CheckResponse.ConsumerInfo consumer_info = 2;
  bool has_consumer_info() const;
  void clear_consumer_info();
  static const int kConsumerInfoFieldNumber = 2;
  private:
  const ::google::api::servicecontrol::v1::CheckResponse_ConsumerInfo& _internal_consumer_info() const;
  public:
  const ::google::api::servicecontrol::v1::CheckResponse_ConsumerInfo& consumer_info() const;
  ::google::api::servicecontrol::v1::CheckResponse_ConsumerInfo* release_consumer_info();
  ::google::api::servicecontrol::v1::CheckResponse_ConsumerInfo* mutable_consumer_info();
  void set_allocated_consumer_info(::google::api::servicecontrol::v1::CheckResponse_ConsumerInfo* consumer_info);
  void unsafe_arena_set_allocated_consumer_info(
      ::google::api::servicecontrol::v1::CheckResponse_ConsumerInfo* consumer_info);
  ::google::api::servicecontrol::v1::CheckResponse_ConsumerInfo* unsafe_arena_release_consumer_info();

  // @@protoc_insertion_point(class_scope:google.api.servicecontrol.v1.CheckResponse.CheckInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::api::servicecontrol::v1::CheckResponse_ConsumerInfo* consumer_info_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CheckResponse_ConsumerInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.api.servicecontrol.v1.CheckResponse.ConsumerInfo) */ {
 public:
  CheckResponse_ConsumerInfo();
  virtual ~CheckResponse_ConsumerInfo();

  CheckResponse_ConsumerInfo(const CheckResponse_ConsumerInfo& from);

  inline CheckResponse_ConsumerInfo& operator=(const CheckResponse_ConsumerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CheckResponse_ConsumerInfo(CheckResponse_ConsumerInfo&& from) noexcept
    : CheckResponse_ConsumerInfo() {
    *this = ::std::move(from);
  }

  inline CheckResponse_ConsumerInfo& operator=(CheckResponse_ConsumerInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckResponse_ConsumerInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckResponse_ConsumerInfo* internal_default_instance() {
    return reinterpret_cast<const CheckResponse_ConsumerInfo*>(
               &_CheckResponse_ConsumerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(CheckResponse_ConsumerInfo* other);
  void Swap(CheckResponse_ConsumerInfo* other);
  friend void swap(CheckResponse_ConsumerInfo& a, CheckResponse_ConsumerInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CheckResponse_ConsumerInfo* New() const final {
    return CreateMaybeMessage<CheckResponse_ConsumerInfo>(NULL);
  }

  CheckResponse_ConsumerInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CheckResponse_ConsumerInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CheckResponse_ConsumerInfo& from);
  void MergeFrom(const CheckResponse_ConsumerInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckResponse_ConsumerInfo* other);
  protected:
  explicit CheckResponse_ConsumerInfo(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 project_number = 1;
  void clear_project_number();
  static const int kProjectNumberFieldNumber = 1;
  ::google::protobuf::int64 project_number() const;
  void set_project_number(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:google.api.servicecontrol.v1.CheckResponse.ConsumerInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::int64 project_number_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CheckResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.api.servicecontrol.v1.CheckResponse) */ {
 public:
  CheckResponse();
  virtual ~CheckResponse();

  CheckResponse(const CheckResponse& from);

  inline CheckResponse& operator=(const CheckResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CheckResponse(CheckResponse&& from) noexcept
    : CheckResponse() {
    *this = ::std::move(from);
  }

  inline CheckResponse& operator=(CheckResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckResponse* internal_default_instance() {
    return reinterpret_cast<const CheckResponse*>(
               &_CheckResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void UnsafeArenaSwap(CheckResponse* other);
  void Swap(CheckResponse* other);
  friend void swap(CheckResponse& a, CheckResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CheckResponse* New() const final {
    return CreateMaybeMessage<CheckResponse>(NULL);
  }

  CheckResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CheckResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CheckResponse& from);
  void MergeFrom(const CheckResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckResponse* other);
  protected:
  explicit CheckResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CheckResponse_CheckInfo CheckInfo;
  typedef CheckResponse_ConsumerInfo ConsumerInfo;

  // accessors -------------------------------------------------------

  // repeated .google.api.servicecontrol.v1.CheckError check_errors = 2;
  int check_errors_size() const;
  void clear_check_errors();
  static const int kCheckErrorsFieldNumber = 2;
  ::google::api::servicecontrol::v1::CheckError* mutable_check_errors(int index);
  ::google::protobuf::RepeatedPtrField< ::google::api::servicecontrol::v1::CheckError >*
      mutable_check_errors();
  const ::google::api::servicecontrol::v1::CheckError& check_errors(int index) const;
  ::google::api::servicecontrol::v1::CheckError* add_check_errors();
  const ::google::protobuf::RepeatedPtrField< ::google::api::servicecontrol::v1::CheckError >&
      check_errors() const;

  // string operation_id = 1;
  void clear_operation_id();
  static const int kOperationIdFieldNumber = 1;
  const ::std::string& operation_id() const;
  void set_operation_id(const ::std::string& value);
  #if LANG_CXX11
  void set_operation_id(::std::string&& value);
  #endif
  void set_operation_id(const char* value);
  void set_operation_id(const char* value, size_t size);
  ::std::string* mutable_operation_id();
  ::std::string* release_operation_id();
  void set_allocated_operation_id(::std::string* operation_id);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_operation_id();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_operation_id(
      ::std::string* operation_id);

  // string service_config_id = 5;
  void clear_service_config_id();
  static const int kServiceConfigIdFieldNumber = 5;
  const ::std::string& service_config_id() const;
  void set_service_config_id(const ::std::string& value);
  #if LANG_CXX11
  void set_service_config_id(::std::string&& value);
  #endif
  void set_service_config_id(const char* value);
  void set_service_config_id(const char* value, size_t size);
  ::std::string* mutable_service_config_id();
  ::std::string* release_service_config_id();
  void set_allocated_service_config_id(::std::string* service_config_id);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_service_config_id();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_service_config_id(
      ::std::string* service_config_id);

  // .google.api.servicecontrol.v1.CheckResponse.CheckInfo check_info = 6;
  bool has_check_info() const;
  void clear_check_info();
  static const int kCheckInfoFieldNumber = 6;
  private:
  const ::google::api::servicecontrol::v1::CheckResponse_CheckInfo& _internal_check_info() const;
  public:
  const ::google::api::servicecontrol::v1::CheckResponse_CheckInfo& check_info() const;
  ::google::api::servicecontrol::v1::CheckResponse_CheckInfo* release_check_info();
  ::google::api::servicecontrol::v1::CheckResponse_CheckInfo* mutable_check_info();
  void set_allocated_check_info(::google::api::servicecontrol::v1::CheckResponse_CheckInfo* check_info);
  void unsafe_arena_set_allocated_check_info(
      ::google::api::servicecontrol::v1::CheckResponse_CheckInfo* check_info);
  ::google::api::servicecontrol::v1::CheckResponse_CheckInfo* unsafe_arena_release_check_info();

  // @@protoc_insertion_point(class_scope:google.api.servicecontrol.v1.CheckResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::google::api::servicecontrol::v1::CheckError > check_errors_;
  ::google::protobuf::internal::ArenaStringPtr operation_id_;
  ::google::protobuf::internal::ArenaStringPtr service_config_id_;
  ::google::api::servicecontrol::v1::CheckResponse_CheckInfo* check_info_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReportRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.api.servicecontrol.v1.ReportRequest) */ {
 public:
  ReportRequest();
  virtual ~ReportRequest();

  ReportRequest(const ReportRequest& from);

  inline ReportRequest& operator=(const ReportRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReportRequest(ReportRequest&& from) noexcept
    : ReportRequest() {
    *this = ::std::move(from);
  }

  inline ReportRequest& operator=(ReportRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReportRequest* internal_default_instance() {
    return reinterpret_cast<const ReportRequest*>(
               &_ReportRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void UnsafeArenaSwap(ReportRequest* other);
  void Swap(ReportRequest* other);
  friend void swap(ReportRequest& a, ReportRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReportRequest* New() const final {
    return CreateMaybeMessage<ReportRequest>(NULL);
  }

  ReportRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReportRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReportRequest& from);
  void MergeFrom(const ReportRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReportRequest* other);
  protected:
  explicit ReportRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.api.servicecontrol.v1.Operation operations = 2;
  int operations_size() const;
  void clear_operations();
  static const int kOperationsFieldNumber = 2;
  ::google::api::servicecontrol::v1::Operation* mutable_operations(int index);
  ::google::protobuf::RepeatedPtrField< ::google::api::servicecontrol::v1::Operation >*
      mutable_operations();
  const ::google::api::servicecontrol::v1::Operation& operations(int index) const;
  ::google::api::servicecontrol::v1::Operation* add_operations();
  const ::google::protobuf::RepeatedPtrField< ::google::api::servicecontrol::v1::Operation >&
      operations() const;

  // string service_name = 1;
  void clear_service_name();
  static const int kServiceNameFieldNumber = 1;
  const ::std::string& service_name() const;
  void set_service_name(const ::std::string& value);
  #if LANG_CXX11
  void set_service_name(::std::string&& value);
  #endif
  void set_service_name(const char* value);
  void set_service_name(const char* value, size_t size);
  ::std::string* mutable_service_name();
  ::std::string* release_service_name();
  void set_allocated_service_name(::std::string* service_name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_service_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_service_name(
      ::std::string* service_name);

  // string service_config_id = 3;
  void clear_service_config_id();
  static const int kServiceConfigIdFieldNumber = 3;
  const ::std::string& service_config_id() const;
  void set_service_config_id(const ::std::string& value);
  #if LANG_CXX11
  void set_service_config_id(::std::string&& value);
  #endif
  void set_service_config_id(const char* value);
  void set_service_config_id(const char* value, size_t size);
  ::std::string* mutable_service_config_id();
  ::std::string* release_service_config_id();
  void set_allocated_service_config_id(::std::string* service_config_id);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_service_config_id();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_service_config_id(
      ::std::string* service_config_id);

  // @@protoc_insertion_point(class_scope:google.api.servicecontrol.v1.ReportRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::google::api::servicecontrol::v1::Operation > operations_;
  ::google::protobuf::internal::ArenaStringPtr service_name_;
  ::google::protobuf::internal::ArenaStringPtr service_config_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReportResponse_ReportError : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.api.servicecontrol.v1.ReportResponse.ReportError) */ {
 public:
  ReportResponse_ReportError();
  virtual ~ReportResponse_ReportError();

  ReportResponse_ReportError(const ReportResponse_ReportError& from);

  inline ReportResponse_ReportError& operator=(const ReportResponse_ReportError& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReportResponse_ReportError(ReportResponse_ReportError&& from) noexcept
    : ReportResponse_ReportError() {
    *this = ::std::move(from);
  }

  inline ReportResponse_ReportError& operator=(ReportResponse_ReportError&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportResponse_ReportError& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReportResponse_ReportError* internal_default_instance() {
    return reinterpret_cast<const ReportResponse_ReportError*>(
               &_ReportResponse_ReportError_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void UnsafeArenaSwap(ReportResponse_ReportError* other);
  void Swap(ReportResponse_ReportError* other);
  friend void swap(ReportResponse_ReportError& a, ReportResponse_ReportError& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReportResponse_ReportError* New() const final {
    return CreateMaybeMessage<ReportResponse_ReportError>(NULL);
  }

  ReportResponse_ReportError* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReportResponse_ReportError>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReportResponse_ReportError& from);
  void MergeFrom(const ReportResponse_ReportError& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReportResponse_ReportError* other);
  protected:
  explicit ReportResponse_ReportError(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string operation_id = 1;
  void clear_operation_id();
  static const int kOperationIdFieldNumber = 1;
  const ::std::string& operation_id() const;
  void set_operation_id(const ::std::string& value);
  #if LANG_CXX11
  void set_operation_id(::std::string&& value);
  #endif
  void set_operation_id(const char* value);
  void set_operation_id(const char* value, size_t size);
  ::std::string* mutable_operation_id();
  ::std::string* release_operation_id();
  void set_allocated_operation_id(::std::string* operation_id);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_operation_id();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_operation_id(
      ::std::string* operation_id);

  // .google.rpc.Status status = 2;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  private:
  const ::google::rpc::Status& _internal_status() const;
  public:
  const ::google::rpc::Status& status() const;
  ::google::rpc::Status* release_status();
  ::google::rpc::Status* mutable_status();
  void set_allocated_status(::google::rpc::Status* status);
  void unsafe_arena_set_allocated_status(
      ::google::rpc::Status* status);
  ::google::rpc::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:google.api.servicecontrol.v1.ReportResponse.ReportError)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr operation_id_;
  ::google::rpc::Status* status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReportResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.api.servicecontrol.v1.ReportResponse) */ {
 public:
  ReportResponse();
  virtual ~ReportResponse();

  ReportResponse(const ReportResponse& from);

  inline ReportResponse& operator=(const ReportResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReportResponse(ReportResponse&& from) noexcept
    : ReportResponse() {
    *this = ::std::move(from);
  }

  inline ReportResponse& operator=(ReportResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReportResponse* internal_default_instance() {
    return reinterpret_cast<const ReportResponse*>(
               &_ReportResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void UnsafeArenaSwap(ReportResponse* other);
  void Swap(ReportResponse* other);
  friend void swap(ReportResponse& a, ReportResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReportResponse* New() const final {
    return CreateMaybeMessage<ReportResponse>(NULL);
  }

  ReportResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReportResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReportResponse& from);
  void MergeFrom(const ReportResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReportResponse* other);
  protected:
  explicit ReportResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ReportResponse_ReportError ReportError;

  // accessors -------------------------------------------------------

  // repeated .google.api.servicecontrol.v1.ReportResponse.ReportError report_errors = 1;
  int report_errors_size() const;
  void clear_report_errors();
  static const int kReportErrorsFieldNumber = 1;
  ::google::api::servicecontrol::v1::ReportResponse_ReportError* mutable_report_errors(int index);
  ::google::protobuf::RepeatedPtrField< ::google::api::servicecontrol::v1::ReportResponse_ReportError >*
      mutable_report_errors();
  const ::google::api::servicecontrol::v1::ReportResponse_ReportError& report_errors(int index) const;
  ::google::api::servicecontrol::v1::ReportResponse_ReportError* add_report_errors();
  const ::google::protobuf::RepeatedPtrField< ::google::api::servicecontrol::v1::ReportResponse_ReportError >&
      report_errors() const;

  // string service_config_id = 2;
  void clear_service_config_id();
  static const int kServiceConfigIdFieldNumber = 2;
  const ::std::string& service_config_id() const;
  void set_service_config_id(const ::std::string& value);
  #if LANG_CXX11
  void set_service_config_id(::std::string&& value);
  #endif
  void set_service_config_id(const char* value);
  void set_service_config_id(const char* value, size_t size);
  ::std::string* mutable_service_config_id();
  ::std::string* release_service_config_id();
  void set_allocated_service_config_id(::std::string* service_config_id);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_service_config_id();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_service_config_id(
      ::std::string* service_config_id);

  // @@protoc_insertion_point(class_scope:google.api.servicecontrol.v1.ReportResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::google::api::servicecontrol::v1::ReportResponse_ReportError > report_errors_;
  ::google::protobuf::internal::ArenaStringPtr service_config_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CheckRequest

// string service_name = 1;
inline void CheckRequest::clear_service_name() {
  service_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& CheckRequest::service_name() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.CheckRequest.service_name)
  return service_name_.Get();
}
inline void CheckRequest::set_service_name(const ::std::string& value) {
  
  service_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.api.servicecontrol.v1.CheckRequest.service_name)
}
#if LANG_CXX11
inline void CheckRequest::set_service_name(::std::string&& value) {
  
  service_name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.api.servicecontrol.v1.CheckRequest.service_name)
}
#endif
inline void CheckRequest::set_service_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  service_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.api.servicecontrol.v1.CheckRequest.service_name)
}
inline void CheckRequest::set_service_name(const char* value,
    size_t size) {
  
  service_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.api.servicecontrol.v1.CheckRequest.service_name)
}
inline ::std::string* CheckRequest::mutable_service_name() {
  
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.CheckRequest.service_name)
  return service_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CheckRequest::release_service_name() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v1.CheckRequest.service_name)
  
  return service_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void CheckRequest::set_allocated_service_name(::std::string* service_name) {
  if (service_name != NULL) {
    
  } else {
    
  }
  service_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v1.CheckRequest.service_name)
}
inline ::std::string* CheckRequest::unsafe_arena_release_service_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.servicecontrol.v1.CheckRequest.service_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return service_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void CheckRequest::unsafe_arena_set_allocated_service_name(
    ::std::string* service_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (service_name != NULL) {
    
  } else {
    
  }
  service_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      service_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.servicecontrol.v1.CheckRequest.service_name)
}

// .google.api.servicecontrol.v1.Operation operation = 2;
inline bool CheckRequest::has_operation() const {
  return this != internal_default_instance() && operation_ != NULL;
}
inline const ::google::api::servicecontrol::v1::Operation& CheckRequest::_internal_operation() const {
  return *operation_;
}
inline const ::google::api::servicecontrol::v1::Operation& CheckRequest::operation() const {
  const ::google::api::servicecontrol::v1::Operation* p = operation_;
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.CheckRequest.operation)
  return p != NULL ? *p : *reinterpret_cast<const ::google::api::servicecontrol::v1::Operation*>(
      &::google::api::servicecontrol::v1::_Operation_default_instance_);
}
inline ::google::api::servicecontrol::v1::Operation* CheckRequest::release_operation() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v1.CheckRequest.operation)
  
  ::google::api::servicecontrol::v1::Operation* temp = operation_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  operation_ = NULL;
  return temp;
}
inline ::google::api::servicecontrol::v1::Operation* CheckRequest::unsafe_arena_release_operation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.servicecontrol.v1.CheckRequest.operation)
  
  ::google::api::servicecontrol::v1::Operation* temp = operation_;
  operation_ = NULL;
  return temp;
}
inline ::google::api::servicecontrol::v1::Operation* CheckRequest::mutable_operation() {
  
  if (operation_ == NULL) {
    auto* p = CreateMaybeMessage<::google::api::servicecontrol::v1::Operation>(GetArenaNoVirtual());
    operation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.CheckRequest.operation)
  return operation_;
}
inline void CheckRequest::set_allocated_operation(::google::api::servicecontrol::v1::Operation* operation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(operation_);
  }
  if (operation) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(operation)->GetArena();
    if (message_arena != submessage_arena) {
      operation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, operation, submessage_arena);
    }
    
  } else {
    
  }
  operation_ = operation;
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v1.CheckRequest.operation)
}

// string service_config_id = 4;
inline void CheckRequest::clear_service_config_id() {
  service_config_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& CheckRequest::service_config_id() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.CheckRequest.service_config_id)
  return service_config_id_.Get();
}
inline void CheckRequest::set_service_config_id(const ::std::string& value) {
  
  service_config_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.api.servicecontrol.v1.CheckRequest.service_config_id)
}
#if LANG_CXX11
inline void CheckRequest::set_service_config_id(::std::string&& value) {
  
  service_config_id_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.api.servicecontrol.v1.CheckRequest.service_config_id)
}
#endif
inline void CheckRequest::set_service_config_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  service_config_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.api.servicecontrol.v1.CheckRequest.service_config_id)
}
inline void CheckRequest::set_service_config_id(const char* value,
    size_t size) {
  
  service_config_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.api.servicecontrol.v1.CheckRequest.service_config_id)
}
inline ::std::string* CheckRequest::mutable_service_config_id() {
  
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.CheckRequest.service_config_id)
  return service_config_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CheckRequest::release_service_config_id() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v1.CheckRequest.service_config_id)
  
  return service_config_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void CheckRequest::set_allocated_service_config_id(::std::string* service_config_id) {
  if (service_config_id != NULL) {
    
  } else {
    
  }
  service_config_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_config_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v1.CheckRequest.service_config_id)
}
inline ::std::string* CheckRequest::unsafe_arena_release_service_config_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.servicecontrol.v1.CheckRequest.service_config_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return service_config_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void CheckRequest::unsafe_arena_set_allocated_service_config_id(
    ::std::string* service_config_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (service_config_id != NULL) {
    
  } else {
    
  }
  service_config_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      service_config_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.servicecontrol.v1.CheckRequest.service_config_id)
}

// -------------------------------------------------------------------

// CheckResponse_CheckInfo

// .google.api.servicecontrol.v1.CheckResponse.ConsumerInfo consumer_info = 2;
inline bool CheckResponse_CheckInfo::has_consumer_info() const {
  return this != internal_default_instance() && consumer_info_ != NULL;
}
inline void CheckResponse_CheckInfo::clear_consumer_info() {
  if (GetArenaNoVirtual() == NULL && consumer_info_ != NULL) {
    delete consumer_info_;
  }
  consumer_info_ = NULL;
}
inline const ::google::api::servicecontrol::v1::CheckResponse_ConsumerInfo& CheckResponse_CheckInfo::_internal_consumer_info() const {
  return *consumer_info_;
}
inline const ::google::api::servicecontrol::v1::CheckResponse_ConsumerInfo& CheckResponse_CheckInfo::consumer_info() const {
  const ::google::api::servicecontrol::v1::CheckResponse_ConsumerInfo* p = consumer_info_;
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.CheckResponse.CheckInfo.consumer_info)
  return p != NULL ? *p : *reinterpret_cast<const ::google::api::servicecontrol::v1::CheckResponse_ConsumerInfo*>(
      &::google::api::servicecontrol::v1::_CheckResponse_ConsumerInfo_default_instance_);
}
inline ::google::api::servicecontrol::v1::CheckResponse_ConsumerInfo* CheckResponse_CheckInfo::release_consumer_info() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v1.CheckResponse.CheckInfo.consumer_info)
  
  ::google::api::servicecontrol::v1::CheckResponse_ConsumerInfo* temp = consumer_info_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  consumer_info_ = NULL;
  return temp;
}
inline ::google::api::servicecontrol::v1::CheckResponse_ConsumerInfo* CheckResponse_CheckInfo::unsafe_arena_release_consumer_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.servicecontrol.v1.CheckResponse.CheckInfo.consumer_info)
  
  ::google::api::servicecontrol::v1::CheckResponse_ConsumerInfo* temp = consumer_info_;
  consumer_info_ = NULL;
  return temp;
}
inline ::google::api::servicecontrol::v1::CheckResponse_ConsumerInfo* CheckResponse_CheckInfo::mutable_consumer_info() {
  
  if (consumer_info_ == NULL) {
    auto* p = CreateMaybeMessage<::google::api::servicecontrol::v1::CheckResponse_ConsumerInfo>(GetArenaNoVirtual());
    consumer_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.CheckResponse.CheckInfo.consumer_info)
  return consumer_info_;
}
inline void CheckResponse_CheckInfo::set_allocated_consumer_info(::google::api::servicecontrol::v1::CheckResponse_ConsumerInfo* consumer_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete consumer_info_;
  }
  if (consumer_info) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(consumer_info);
    if (message_arena != submessage_arena) {
      consumer_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, consumer_info, submessage_arena);
    }
    
  } else {
    
  }
  consumer_info_ = consumer_info;
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v1.CheckResponse.CheckInfo.consumer_info)
}

// -------------------------------------------------------------------

// CheckResponse_ConsumerInfo

// int64 project_number = 1;
inline void CheckResponse_ConsumerInfo::clear_project_number() {
  project_number_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 CheckResponse_ConsumerInfo::project_number() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.CheckResponse.ConsumerInfo.project_number)
  return project_number_;
}
inline void CheckResponse_ConsumerInfo::set_project_number(::google::protobuf::int64 value) {
  
  project_number_ = value;
  // @@protoc_insertion_point(field_set:google.api.servicecontrol.v1.CheckResponse.ConsumerInfo.project_number)
}

// -------------------------------------------------------------------

// CheckResponse

// string operation_id = 1;
inline void CheckResponse::clear_operation_id() {
  operation_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& CheckResponse::operation_id() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.CheckResponse.operation_id)
  return operation_id_.Get();
}
inline void CheckResponse::set_operation_id(const ::std::string& value) {
  
  operation_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.api.servicecontrol.v1.CheckResponse.operation_id)
}
#if LANG_CXX11
inline void CheckResponse::set_operation_id(::std::string&& value) {
  
  operation_id_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.api.servicecontrol.v1.CheckResponse.operation_id)
}
#endif
inline void CheckResponse::set_operation_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  operation_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.api.servicecontrol.v1.CheckResponse.operation_id)
}
inline void CheckResponse::set_operation_id(const char* value,
    size_t size) {
  
  operation_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.api.servicecontrol.v1.CheckResponse.operation_id)
}
inline ::std::string* CheckResponse::mutable_operation_id() {
  
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.CheckResponse.operation_id)
  return operation_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CheckResponse::release_operation_id() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v1.CheckResponse.operation_id)
  
  return operation_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void CheckResponse::set_allocated_operation_id(::std::string* operation_id) {
  if (operation_id != NULL) {
    
  } else {
    
  }
  operation_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), operation_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v1.CheckResponse.operation_id)
}
inline ::std::string* CheckResponse::unsafe_arena_release_operation_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.servicecontrol.v1.CheckResponse.operation_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return operation_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void CheckResponse::unsafe_arena_set_allocated_operation_id(
    ::std::string* operation_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (operation_id != NULL) {
    
  } else {
    
  }
  operation_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      operation_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.servicecontrol.v1.CheckResponse.operation_id)
}

// repeated .google.api.servicecontrol.v1.CheckError check_errors = 2;
inline int CheckResponse::check_errors_size() const {
  return check_errors_.size();
}
inline ::google::api::servicecontrol::v1::CheckError* CheckResponse::mutable_check_errors(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.CheckResponse.check_errors)
  return check_errors_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::api::servicecontrol::v1::CheckError >*
CheckResponse::mutable_check_errors() {
  // @@protoc_insertion_point(field_mutable_list:google.api.servicecontrol.v1.CheckResponse.check_errors)
  return &check_errors_;
}
inline const ::google::api::servicecontrol::v1::CheckError& CheckResponse::check_errors(int index) const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.CheckResponse.check_errors)
  return check_errors_.Get(index);
}
inline ::google::api::servicecontrol::v1::CheckError* CheckResponse::add_check_errors() {
  // @@protoc_insertion_point(field_add:google.api.servicecontrol.v1.CheckResponse.check_errors)
  return check_errors_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::api::servicecontrol::v1::CheckError >&
CheckResponse::check_errors() const {
  // @@protoc_insertion_point(field_list:google.api.servicecontrol.v1.CheckResponse.check_errors)
  return check_errors_;
}

// string service_config_id = 5;
inline void CheckResponse::clear_service_config_id() {
  service_config_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& CheckResponse::service_config_id() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.CheckResponse.service_config_id)
  return service_config_id_.Get();
}
inline void CheckResponse::set_service_config_id(const ::std::string& value) {
  
  service_config_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.api.servicecontrol.v1.CheckResponse.service_config_id)
}
#if LANG_CXX11
inline void CheckResponse::set_service_config_id(::std::string&& value) {
  
  service_config_id_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.api.servicecontrol.v1.CheckResponse.service_config_id)
}
#endif
inline void CheckResponse::set_service_config_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  service_config_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.api.servicecontrol.v1.CheckResponse.service_config_id)
}
inline void CheckResponse::set_service_config_id(const char* value,
    size_t size) {
  
  service_config_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.api.servicecontrol.v1.CheckResponse.service_config_id)
}
inline ::std::string* CheckResponse::mutable_service_config_id() {
  
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.CheckResponse.service_config_id)
  return service_config_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CheckResponse::release_service_config_id() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v1.CheckResponse.service_config_id)
  
  return service_config_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void CheckResponse::set_allocated_service_config_id(::std::string* service_config_id) {
  if (service_config_id != NULL) {
    
  } else {
    
  }
  service_config_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_config_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v1.CheckResponse.service_config_id)
}
inline ::std::string* CheckResponse::unsafe_arena_release_service_config_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.servicecontrol.v1.CheckResponse.service_config_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return service_config_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void CheckResponse::unsafe_arena_set_allocated_service_config_id(
    ::std::string* service_config_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (service_config_id != NULL) {
    
  } else {
    
  }
  service_config_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      service_config_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.servicecontrol.v1.CheckResponse.service_config_id)
}

// .google.api.servicecontrol.v1.CheckResponse.CheckInfo check_info = 6;
inline bool CheckResponse::has_check_info() const {
  return this != internal_default_instance() && check_info_ != NULL;
}
inline void CheckResponse::clear_check_info() {
  if (GetArenaNoVirtual() == NULL && check_info_ != NULL) {
    delete check_info_;
  }
  check_info_ = NULL;
}
inline const ::google::api::servicecontrol::v1::CheckResponse_CheckInfo& CheckResponse::_internal_check_info() const {
  return *check_info_;
}
inline const ::google::api::servicecontrol::v1::CheckResponse_CheckInfo& CheckResponse::check_info() const {
  const ::google::api::servicecontrol::v1::CheckResponse_CheckInfo* p = check_info_;
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.CheckResponse.check_info)
  return p != NULL ? *p : *reinterpret_cast<const ::google::api::servicecontrol::v1::CheckResponse_CheckInfo*>(
      &::google::api::servicecontrol::v1::_CheckResponse_CheckInfo_default_instance_);
}
inline ::google::api::servicecontrol::v1::CheckResponse_CheckInfo* CheckResponse::release_check_info() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v1.CheckResponse.check_info)
  
  ::google::api::servicecontrol::v1::CheckResponse_CheckInfo* temp = check_info_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  check_info_ = NULL;
  return temp;
}
inline ::google::api::servicecontrol::v1::CheckResponse_CheckInfo* CheckResponse::unsafe_arena_release_check_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.servicecontrol.v1.CheckResponse.check_info)
  
  ::google::api::servicecontrol::v1::CheckResponse_CheckInfo* temp = check_info_;
  check_info_ = NULL;
  return temp;
}
inline ::google::api::servicecontrol::v1::CheckResponse_CheckInfo* CheckResponse::mutable_check_info() {
  
  if (check_info_ == NULL) {
    auto* p = CreateMaybeMessage<::google::api::servicecontrol::v1::CheckResponse_CheckInfo>(GetArenaNoVirtual());
    check_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.CheckResponse.check_info)
  return check_info_;
}
inline void CheckResponse::set_allocated_check_info(::google::api::servicecontrol::v1::CheckResponse_CheckInfo* check_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete check_info_;
  }
  if (check_info) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(check_info);
    if (message_arena != submessage_arena) {
      check_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, check_info, submessage_arena);
    }
    
  } else {
    
  }
  check_info_ = check_info;
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v1.CheckResponse.check_info)
}

// -------------------------------------------------------------------

// ReportRequest

// string service_name = 1;
inline void ReportRequest::clear_service_name() {
  service_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ReportRequest::service_name() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.ReportRequest.service_name)
  return service_name_.Get();
}
inline void ReportRequest::set_service_name(const ::std::string& value) {
  
  service_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.api.servicecontrol.v1.ReportRequest.service_name)
}
#if LANG_CXX11
inline void ReportRequest::set_service_name(::std::string&& value) {
  
  service_name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.api.servicecontrol.v1.ReportRequest.service_name)
}
#endif
inline void ReportRequest::set_service_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  service_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.api.servicecontrol.v1.ReportRequest.service_name)
}
inline void ReportRequest::set_service_name(const char* value,
    size_t size) {
  
  service_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.api.servicecontrol.v1.ReportRequest.service_name)
}
inline ::std::string* ReportRequest::mutable_service_name() {
  
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.ReportRequest.service_name)
  return service_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ReportRequest::release_service_name() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v1.ReportRequest.service_name)
  
  return service_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ReportRequest::set_allocated_service_name(::std::string* service_name) {
  if (service_name != NULL) {
    
  } else {
    
  }
  service_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v1.ReportRequest.service_name)
}
inline ::std::string* ReportRequest::unsafe_arena_release_service_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.servicecontrol.v1.ReportRequest.service_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return service_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ReportRequest::unsafe_arena_set_allocated_service_name(
    ::std::string* service_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (service_name != NULL) {
    
  } else {
    
  }
  service_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      service_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.servicecontrol.v1.ReportRequest.service_name)
}

// repeated .google.api.servicecontrol.v1.Operation operations = 2;
inline int ReportRequest::operations_size() const {
  return operations_.size();
}
inline ::google::api::servicecontrol::v1::Operation* ReportRequest::mutable_operations(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.ReportRequest.operations)
  return operations_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::api::servicecontrol::v1::Operation >*
ReportRequest::mutable_operations() {
  // @@protoc_insertion_point(field_mutable_list:google.api.servicecontrol.v1.ReportRequest.operations)
  return &operations_;
}
inline const ::google::api::servicecontrol::v1::Operation& ReportRequest::operations(int index) const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.ReportRequest.operations)
  return operations_.Get(index);
}
inline ::google::api::servicecontrol::v1::Operation* ReportRequest::add_operations() {
  // @@protoc_insertion_point(field_add:google.api.servicecontrol.v1.ReportRequest.operations)
  return operations_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::api::servicecontrol::v1::Operation >&
ReportRequest::operations() const {
  // @@protoc_insertion_point(field_list:google.api.servicecontrol.v1.ReportRequest.operations)
  return operations_;
}

// string service_config_id = 3;
inline void ReportRequest::clear_service_config_id() {
  service_config_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ReportRequest::service_config_id() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.ReportRequest.service_config_id)
  return service_config_id_.Get();
}
inline void ReportRequest::set_service_config_id(const ::std::string& value) {
  
  service_config_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.api.servicecontrol.v1.ReportRequest.service_config_id)
}
#if LANG_CXX11
inline void ReportRequest::set_service_config_id(::std::string&& value) {
  
  service_config_id_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.api.servicecontrol.v1.ReportRequest.service_config_id)
}
#endif
inline void ReportRequest::set_service_config_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  service_config_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.api.servicecontrol.v1.ReportRequest.service_config_id)
}
inline void ReportRequest::set_service_config_id(const char* value,
    size_t size) {
  
  service_config_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.api.servicecontrol.v1.ReportRequest.service_config_id)
}
inline ::std::string* ReportRequest::mutable_service_config_id() {
  
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.ReportRequest.service_config_id)
  return service_config_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ReportRequest::release_service_config_id() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v1.ReportRequest.service_config_id)
  
  return service_config_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ReportRequest::set_allocated_service_config_id(::std::string* service_config_id) {
  if (service_config_id != NULL) {
    
  } else {
    
  }
  service_config_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_config_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v1.ReportRequest.service_config_id)
}
inline ::std::string* ReportRequest::unsafe_arena_release_service_config_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.servicecontrol.v1.ReportRequest.service_config_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return service_config_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ReportRequest::unsafe_arena_set_allocated_service_config_id(
    ::std::string* service_config_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (service_config_id != NULL) {
    
  } else {
    
  }
  service_config_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      service_config_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.servicecontrol.v1.ReportRequest.service_config_id)
}

// -------------------------------------------------------------------

// ReportResponse_ReportError

// string operation_id = 1;
inline void ReportResponse_ReportError::clear_operation_id() {
  operation_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ReportResponse_ReportError::operation_id() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.ReportResponse.ReportError.operation_id)
  return operation_id_.Get();
}
inline void ReportResponse_ReportError::set_operation_id(const ::std::string& value) {
  
  operation_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.api.servicecontrol.v1.ReportResponse.ReportError.operation_id)
}
#if LANG_CXX11
inline void ReportResponse_ReportError::set_operation_id(::std::string&& value) {
  
  operation_id_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.api.servicecontrol.v1.ReportResponse.ReportError.operation_id)
}
#endif
inline void ReportResponse_ReportError::set_operation_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  operation_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.api.servicecontrol.v1.ReportResponse.ReportError.operation_id)
}
inline void ReportResponse_ReportError::set_operation_id(const char* value,
    size_t size) {
  
  operation_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.api.servicecontrol.v1.ReportResponse.ReportError.operation_id)
}
inline ::std::string* ReportResponse_ReportError::mutable_operation_id() {
  
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.ReportResponse.ReportError.operation_id)
  return operation_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ReportResponse_ReportError::release_operation_id() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v1.ReportResponse.ReportError.operation_id)
  
  return operation_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ReportResponse_ReportError::set_allocated_operation_id(::std::string* operation_id) {
  if (operation_id != NULL) {
    
  } else {
    
  }
  operation_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), operation_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v1.ReportResponse.ReportError.operation_id)
}
inline ::std::string* ReportResponse_ReportError::unsafe_arena_release_operation_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.servicecontrol.v1.ReportResponse.ReportError.operation_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return operation_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ReportResponse_ReportError::unsafe_arena_set_allocated_operation_id(
    ::std::string* operation_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (operation_id != NULL) {
    
  } else {
    
  }
  operation_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      operation_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.servicecontrol.v1.ReportResponse.ReportError.operation_id)
}

// .google.rpc.Status status = 2;
inline bool ReportResponse_ReportError::has_status() const {
  return this != internal_default_instance() && status_ != NULL;
}
inline const ::google::rpc::Status& ReportResponse_ReportError::_internal_status() const {
  return *status_;
}
inline const ::google::rpc::Status& ReportResponse_ReportError::status() const {
  const ::google::rpc::Status* p = status_;
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.ReportResponse.ReportError.status)
  return p != NULL ? *p : *reinterpret_cast<const ::google::rpc::Status*>(
      &::google::rpc::_Status_default_instance_);
}
inline ::google::rpc::Status* ReportResponse_ReportError::release_status() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v1.ReportResponse.ReportError.status)
  
  ::google::rpc::Status* temp = status_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  status_ = NULL;
  return temp;
}
inline ::google::rpc::Status* ReportResponse_ReportError::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.servicecontrol.v1.ReportResponse.ReportError.status)
  
  ::google::rpc::Status* temp = status_;
  status_ = NULL;
  return temp;
}
inline ::google::rpc::Status* ReportResponse_ReportError::mutable_status() {
  
  if (status_ == NULL) {
    auto* p = CreateMaybeMessage<::google::rpc::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.ReportResponse.ReportError.status)
  return status_;
}
inline void ReportResponse_ReportError::set_allocated_status(::google::rpc::Status* status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(status_);
  }
  if (status) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v1.ReportResponse.ReportError.status)
}

// -------------------------------------------------------------------

// ReportResponse

// repeated .google.api.servicecontrol.v1.ReportResponse.ReportError report_errors = 1;
inline int ReportResponse::report_errors_size() const {
  return report_errors_.size();
}
inline void ReportResponse::clear_report_errors() {
  report_errors_.Clear();
}
inline ::google::api::servicecontrol::v1::ReportResponse_ReportError* ReportResponse::mutable_report_errors(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.ReportResponse.report_errors)
  return report_errors_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::api::servicecontrol::v1::ReportResponse_ReportError >*
ReportResponse::mutable_report_errors() {
  // @@protoc_insertion_point(field_mutable_list:google.api.servicecontrol.v1.ReportResponse.report_errors)
  return &report_errors_;
}
inline const ::google::api::servicecontrol::v1::ReportResponse_ReportError& ReportResponse::report_errors(int index) const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.ReportResponse.report_errors)
  return report_errors_.Get(index);
}
inline ::google::api::servicecontrol::v1::ReportResponse_ReportError* ReportResponse::add_report_errors() {
  // @@protoc_insertion_point(field_add:google.api.servicecontrol.v1.ReportResponse.report_errors)
  return report_errors_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::api::servicecontrol::v1::ReportResponse_ReportError >&
ReportResponse::report_errors() const {
  // @@protoc_insertion_point(field_list:google.api.servicecontrol.v1.ReportResponse.report_errors)
  return report_errors_;
}

// string service_config_id = 2;
inline void ReportResponse::clear_service_config_id() {
  service_config_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ReportResponse::service_config_id() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.ReportResponse.service_config_id)
  return service_config_id_.Get();
}
inline void ReportResponse::set_service_config_id(const ::std::string& value) {
  
  service_config_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.api.servicecontrol.v1.ReportResponse.service_config_id)
}
#if LANG_CXX11
inline void ReportResponse::set_service_config_id(::std::string&& value) {
  
  service_config_id_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.api.servicecontrol.v1.ReportResponse.service_config_id)
}
#endif
inline void ReportResponse::set_service_config_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  service_config_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.api.servicecontrol.v1.ReportResponse.service_config_id)
}
inline void ReportResponse::set_service_config_id(const char* value,
    size_t size) {
  
  service_config_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.api.servicecontrol.v1.ReportResponse.service_config_id)
}
inline ::std::string* ReportResponse::mutable_service_config_id() {
  
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.ReportResponse.service_config_id)
  return service_config_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ReportResponse::release_service_config_id() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v1.ReportResponse.service_config_id)
  
  return service_config_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ReportResponse::set_allocated_service_config_id(::std::string* service_config_id) {
  if (service_config_id != NULL) {
    
  } else {
    
  }
  service_config_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_config_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v1.ReportResponse.service_config_id)
}
inline ::std::string* ReportResponse::unsafe_arena_release_service_config_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.servicecontrol.v1.ReportResponse.service_config_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return service_config_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ReportResponse::unsafe_arena_set_allocated_service_config_id(
    ::std::string* service_config_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (service_config_id != NULL) {
    
  } else {
    
  }
  service_config_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      service_config_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.servicecontrol.v1.ReportResponse.service_config_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace servicecontrol
}  // namespace api
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto
