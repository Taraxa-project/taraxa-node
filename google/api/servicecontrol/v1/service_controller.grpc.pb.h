// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/api/servicecontrol/v1/service_controller.proto
// Original file comments:
// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto__INCLUDED
#define GRPC_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto__INCLUDED

#include "google/api/servicecontrol/v1/service_controller.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace google {
namespace api {
namespace servicecontrol {
namespace v1 {

// [Google Service Control API](/service-control/overview)
//
// Lets clients check and report operations against a [managed
// service](https://cloud.google.com/service-management/reference/rpc/google.api/servicemanagement.v1#google.api.servicemanagement.v1.ManagedService).
class ServiceController final {
 public:
  static constexpr char const* service_full_name() {
    return "google.api.servicecontrol.v1.ServiceController";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Checks an operation with Google Service Control to decide whether
    // the given operation should proceed. It should be called before the
    // operation is executed.
    //
    // If feasible, the client should cache the check results and reuse them for
    // 60 seconds. In case of server errors, the client can rely on the cached
    // results for longer time.
    //
    // NOTE: the [CheckRequest][google.api.servicecontrol.v1.CheckRequest] has the size limit of 64KB.
    //
    // This method requires the `servicemanagement.services.check` permission
    // on the specified service. For more information, see
    // [Google Cloud IAM](https://cloud.google.com/iam).
    virtual ::grpc::Status Check(::grpc::ClientContext* context, const ::google::api::servicecontrol::v1::CheckRequest& request, ::google::api::servicecontrol::v1::CheckResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::api::servicecontrol::v1::CheckResponse>> AsyncCheck(::grpc::ClientContext* context, const ::google::api::servicecontrol::v1::CheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::api::servicecontrol::v1::CheckResponse>>(AsyncCheckRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::api::servicecontrol::v1::CheckResponse>> PrepareAsyncCheck(::grpc::ClientContext* context, const ::google::api::servicecontrol::v1::CheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::api::servicecontrol::v1::CheckResponse>>(PrepareAsyncCheckRaw(context, request, cq));
    }
    // Reports operation results to Google Service Control, such as logs and
    // metrics. It should be called after an operation is completed.
    //
    // If feasible, the client should aggregate reporting data for up to 5
    // seconds to reduce API traffic. Limiting aggregation to 5 seconds is to
    // reduce data loss during client crashes. Clients should carefully choose
    // the aggregation time window to avoid data loss risk more than 0.01%
    // for business and compliance reasons.
    //
    // NOTE: the [ReportRequest][google.api.servicecontrol.v1.ReportRequest] has the size limit of 1MB.
    //
    // This method requires the `servicemanagement.services.report` permission
    // on the specified service. For more information, see
    // [Google Cloud IAM](https://cloud.google.com/iam).
    virtual ::grpc::Status Report(::grpc::ClientContext* context, const ::google::api::servicecontrol::v1::ReportRequest& request, ::google::api::servicecontrol::v1::ReportResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::api::servicecontrol::v1::ReportResponse>> AsyncReport(::grpc::ClientContext* context, const ::google::api::servicecontrol::v1::ReportRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::api::servicecontrol::v1::ReportResponse>>(AsyncReportRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::api::servicecontrol::v1::ReportResponse>> PrepareAsyncReport(::grpc::ClientContext* context, const ::google::api::servicecontrol::v1::ReportRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::api::servicecontrol::v1::ReportResponse>>(PrepareAsyncReportRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Checks an operation with Google Service Control to decide whether
      // the given operation should proceed. It should be called before the
      // operation is executed.
      //
      // If feasible, the client should cache the check results and reuse them for
      // 60 seconds. In case of server errors, the client can rely on the cached
      // results for longer time.
      //
      // NOTE: the [CheckRequest][google.api.servicecontrol.v1.CheckRequest] has the size limit of 64KB.
      //
      // This method requires the `servicemanagement.services.check` permission
      // on the specified service. For more information, see
      // [Google Cloud IAM](https://cloud.google.com/iam).
      virtual void Check(::grpc::ClientContext* context, const ::google::api::servicecontrol::v1::CheckRequest* request, ::google::api::servicecontrol::v1::CheckResponse* response, std::function<void(::grpc::Status)>) = 0;
      // Reports operation results to Google Service Control, such as logs and
      // metrics. It should be called after an operation is completed.
      //
      // If feasible, the client should aggregate reporting data for up to 5
      // seconds to reduce API traffic. Limiting aggregation to 5 seconds is to
      // reduce data loss during client crashes. Clients should carefully choose
      // the aggregation time window to avoid data loss risk more than 0.01%
      // for business and compliance reasons.
      //
      // NOTE: the [ReportRequest][google.api.servicecontrol.v1.ReportRequest] has the size limit of 1MB.
      //
      // This method requires the `servicemanagement.services.report` permission
      // on the specified service. For more information, see
      // [Google Cloud IAM](https://cloud.google.com/iam).
      virtual void Report(::grpc::ClientContext* context, const ::google::api::servicecontrol::v1::ReportRequest* request, ::google::api::servicecontrol::v1::ReportResponse* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::api::servicecontrol::v1::CheckResponse>* AsyncCheckRaw(::grpc::ClientContext* context, const ::google::api::servicecontrol::v1::CheckRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::api::servicecontrol::v1::CheckResponse>* PrepareAsyncCheckRaw(::grpc::ClientContext* context, const ::google::api::servicecontrol::v1::CheckRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::api::servicecontrol::v1::ReportResponse>* AsyncReportRaw(::grpc::ClientContext* context, const ::google::api::servicecontrol::v1::ReportRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::api::servicecontrol::v1::ReportResponse>* PrepareAsyncReportRaw(::grpc::ClientContext* context, const ::google::api::servicecontrol::v1::ReportRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Check(::grpc::ClientContext* context, const ::google::api::servicecontrol::v1::CheckRequest& request, ::google::api::servicecontrol::v1::CheckResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::api::servicecontrol::v1::CheckResponse>> AsyncCheck(::grpc::ClientContext* context, const ::google::api::servicecontrol::v1::CheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::api::servicecontrol::v1::CheckResponse>>(AsyncCheckRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::api::servicecontrol::v1::CheckResponse>> PrepareAsyncCheck(::grpc::ClientContext* context, const ::google::api::servicecontrol::v1::CheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::api::servicecontrol::v1::CheckResponse>>(PrepareAsyncCheckRaw(context, request, cq));
    }
    ::grpc::Status Report(::grpc::ClientContext* context, const ::google::api::servicecontrol::v1::ReportRequest& request, ::google::api::servicecontrol::v1::ReportResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::api::servicecontrol::v1::ReportResponse>> AsyncReport(::grpc::ClientContext* context, const ::google::api::servicecontrol::v1::ReportRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::api::servicecontrol::v1::ReportResponse>>(AsyncReportRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::api::servicecontrol::v1::ReportResponse>> PrepareAsyncReport(::grpc::ClientContext* context, const ::google::api::servicecontrol::v1::ReportRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::api::servicecontrol::v1::ReportResponse>>(PrepareAsyncReportRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Check(::grpc::ClientContext* context, const ::google::api::servicecontrol::v1::CheckRequest* request, ::google::api::servicecontrol::v1::CheckResponse* response, std::function<void(::grpc::Status)>) override;
      void Report(::grpc::ClientContext* context, const ::google::api::servicecontrol::v1::ReportRequest* request, ::google::api::servicecontrol::v1::ReportResponse* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::google::api::servicecontrol::v1::CheckResponse>* AsyncCheckRaw(::grpc::ClientContext* context, const ::google::api::servicecontrol::v1::CheckRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::api::servicecontrol::v1::CheckResponse>* PrepareAsyncCheckRaw(::grpc::ClientContext* context, const ::google::api::servicecontrol::v1::CheckRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::api::servicecontrol::v1::ReportResponse>* AsyncReportRaw(::grpc::ClientContext* context, const ::google::api::servicecontrol::v1::ReportRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::api::servicecontrol::v1::ReportResponse>* PrepareAsyncReportRaw(::grpc::ClientContext* context, const ::google::api::servicecontrol::v1::ReportRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Check_;
    const ::grpc::internal::RpcMethod rpcmethod_Report_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Checks an operation with Google Service Control to decide whether
    // the given operation should proceed. It should be called before the
    // operation is executed.
    //
    // If feasible, the client should cache the check results and reuse them for
    // 60 seconds. In case of server errors, the client can rely on the cached
    // results for longer time.
    //
    // NOTE: the [CheckRequest][google.api.servicecontrol.v1.CheckRequest] has the size limit of 64KB.
    //
    // This method requires the `servicemanagement.services.check` permission
    // on the specified service. For more information, see
    // [Google Cloud IAM](https://cloud.google.com/iam).
    virtual ::grpc::Status Check(::grpc::ServerContext* context, const ::google::api::servicecontrol::v1::CheckRequest* request, ::google::api::servicecontrol::v1::CheckResponse* response);
    // Reports operation results to Google Service Control, such as logs and
    // metrics. It should be called after an operation is completed.
    //
    // If feasible, the client should aggregate reporting data for up to 5
    // seconds to reduce API traffic. Limiting aggregation to 5 seconds is to
    // reduce data loss during client crashes. Clients should carefully choose
    // the aggregation time window to avoid data loss risk more than 0.01%
    // for business and compliance reasons.
    //
    // NOTE: the [ReportRequest][google.api.servicecontrol.v1.ReportRequest] has the size limit of 1MB.
    //
    // This method requires the `servicemanagement.services.report` permission
    // on the specified service. For more information, see
    // [Google Cloud IAM](https://cloud.google.com/iam).
    virtual ::grpc::Status Report(::grpc::ServerContext* context, const ::google::api::servicecontrol::v1::ReportRequest* request, ::google::api::servicecontrol::v1::ReportResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Check : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Check() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Check() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Check(::grpc::ServerContext* context, const ::google::api::servicecontrol::v1::CheckRequest* request, ::google::api::servicecontrol::v1::CheckResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheck(::grpc::ServerContext* context, ::google::api::servicecontrol::v1::CheckRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::api::servicecontrol::v1::CheckResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Report : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Report() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Report() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Report(::grpc::ServerContext* context, const ::google::api::servicecontrol::v1::ReportRequest* request, ::google::api::servicecontrol::v1::ReportResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReport(::grpc::ServerContext* context, ::google::api::servicecontrol::v1::ReportRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::api::servicecontrol::v1::ReportResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Check<WithAsyncMethod_Report<Service > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Check : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Check() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::google::api::servicecontrol::v1::CheckRequest, ::google::api::servicecontrol::v1::CheckResponse>(
          [this](::grpc::ServerContext* context,
                 const ::google::api::servicecontrol::v1::CheckRequest* request,
                 ::google::api::servicecontrol::v1::CheckResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Check(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_Check() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Check(::grpc::ServerContext* context, const ::google::api::servicecontrol::v1::CheckRequest* request, ::google::api::servicecontrol::v1::CheckResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Check(::grpc::ServerContext* context, const ::google::api::servicecontrol::v1::CheckRequest* request, ::google::api::servicecontrol::v1::CheckResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Report : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Report() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::google::api::servicecontrol::v1::ReportRequest, ::google::api::servicecontrol::v1::ReportResponse>(
          [this](::grpc::ServerContext* context,
                 const ::google::api::servicecontrol::v1::ReportRequest* request,
                 ::google::api::servicecontrol::v1::ReportResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Report(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_Report() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Report(::grpc::ServerContext* context, const ::google::api::servicecontrol::v1::ReportRequest* request, ::google::api::servicecontrol::v1::ReportResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Report(::grpc::ServerContext* context, const ::google::api::servicecontrol::v1::ReportRequest* request, ::google::api::servicecontrol::v1::ReportResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_Check<ExperimentalWithCallbackMethod_Report<Service > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Check : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Check() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Check() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Check(::grpc::ServerContext* context, const ::google::api::servicecontrol::v1::CheckRequest* request, ::google::api::servicecontrol::v1::CheckResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Report : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Report() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Report() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Report(::grpc::ServerContext* context, const ::google::api::servicecontrol::v1::ReportRequest* request, ::google::api::servicecontrol::v1::ReportResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Check : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Check() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Check() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Check(::grpc::ServerContext* context, const ::google::api::servicecontrol::v1::CheckRequest* request, ::google::api::servicecontrol::v1::CheckResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheck(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Report : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Report() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Report() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Report(::grpc::ServerContext* context, const ::google::api::servicecontrol::v1::ReportRequest* request, ::google::api::servicecontrol::v1::ReportResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReport(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Check : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Check() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Check(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Check() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Check(::grpc::ServerContext* context, const ::google::api::servicecontrol::v1::CheckRequest* request, ::google::api::servicecontrol::v1::CheckResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Check(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Report : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Report() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Report(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Report() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Report(::grpc::ServerContext* context, const ::google::api::servicecontrol::v1::ReportRequest* request, ::google::api::servicecontrol::v1::ReportResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Report(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Check : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Check() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::google::api::servicecontrol::v1::CheckRequest, ::google::api::servicecontrol::v1::CheckResponse>(std::bind(&WithStreamedUnaryMethod_Check<BaseClass>::StreamedCheck, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Check() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Check(::grpc::ServerContext* context, const ::google::api::servicecontrol::v1::CheckRequest* request, ::google::api::servicecontrol::v1::CheckResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCheck(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::api::servicecontrol::v1::CheckRequest,::google::api::servicecontrol::v1::CheckResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Report : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Report() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::google::api::servicecontrol::v1::ReportRequest, ::google::api::servicecontrol::v1::ReportResponse>(std::bind(&WithStreamedUnaryMethod_Report<BaseClass>::StreamedReport, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Report() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Report(::grpc::ServerContext* context, const ::google::api::servicecontrol::v1::ReportRequest* request, ::google::api::servicecontrol::v1::ReportResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReport(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::api::servicecontrol::v1::ReportRequest,::google::api::servicecontrol::v1::ReportResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Check<WithStreamedUnaryMethod_Report<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Check<WithStreamedUnaryMethod_Report<Service > > StreamedService;
};

}  // namespace v1
}  // namespace servicecontrol
}  // namespace api
}  // namespace google


#endif  // GRPC_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto__INCLUDED
