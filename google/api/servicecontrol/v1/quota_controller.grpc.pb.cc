// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/api/servicecontrol/v1/quota_controller.proto

#include "google/api/servicecontrol/v1/quota_controller.pb.h"
#include "google/api/servicecontrol/v1/quota_controller.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace google {
namespace api {
namespace servicecontrol {
namespace v1 {

static const char* QuotaController_method_names[] = {
  "/google.api.servicecontrol.v1.QuotaController/AllocateQuota",
};

std::unique_ptr< QuotaController::Stub> QuotaController::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< QuotaController::Stub> stub(new QuotaController::Stub(channel));
  return stub;
}

QuotaController::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_AllocateQuota_(QuotaController_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status QuotaController::Stub::AllocateQuota(::grpc::ClientContext* context, const ::google::api::servicecontrol::v1::AllocateQuotaRequest& request, ::google::api::servicecontrol::v1::AllocateQuotaResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AllocateQuota_, context, request, response);
}

void QuotaController::Stub::experimental_async::AllocateQuota(::grpc::ClientContext* context, const ::google::api::servicecontrol::v1::AllocateQuotaRequest* request, ::google::api::servicecontrol::v1::AllocateQuotaResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AllocateQuota_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::google::api::servicecontrol::v1::AllocateQuotaResponse>* QuotaController::Stub::AsyncAllocateQuotaRaw(::grpc::ClientContext* context, const ::google::api::servicecontrol::v1::AllocateQuotaRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::api::servicecontrol::v1::AllocateQuotaResponse>::Create(channel_.get(), cq, rpcmethod_AllocateQuota_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::api::servicecontrol::v1::AllocateQuotaResponse>* QuotaController::Stub::PrepareAsyncAllocateQuotaRaw(::grpc::ClientContext* context, const ::google::api::servicecontrol::v1::AllocateQuotaRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::api::servicecontrol::v1::AllocateQuotaResponse>::Create(channel_.get(), cq, rpcmethod_AllocateQuota_, context, request, false);
}

QuotaController::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      QuotaController_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< QuotaController::Service, ::google::api::servicecontrol::v1::AllocateQuotaRequest, ::google::api::servicecontrol::v1::AllocateQuotaResponse>(
          std::mem_fn(&QuotaController::Service::AllocateQuota), this)));
}

QuotaController::Service::~Service() {
}

::grpc::Status QuotaController::Service::AllocateQuota(::grpc::ServerContext* context, const ::google::api::servicecontrol::v1::AllocateQuotaRequest* request, ::google::api::servicecontrol::v1::AllocateQuotaResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace google
}  // namespace api
}  // namespace servicecontrol
}  // namespace v1

