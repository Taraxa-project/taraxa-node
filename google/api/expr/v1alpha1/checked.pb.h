// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/expr/v1alpha1/checked.proto

#ifndef PROTOBUF_INCLUDED_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto
#define PROTOBUF_INCLUDED_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/expr/v1alpha1/syntax.pb.h"
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/struct.pb.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto 

namespace protobuf_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[13];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto
namespace google {
namespace api {
namespace expr {
namespace v1alpha1 {
class CheckedExpr;
class CheckedExprDefaultTypeInternal;
extern CheckedExprDefaultTypeInternal _CheckedExpr_default_instance_;
class CheckedExpr_ReferenceMapEntry_DoNotUse;
class CheckedExpr_ReferenceMapEntry_DoNotUseDefaultTypeInternal;
extern CheckedExpr_ReferenceMapEntry_DoNotUseDefaultTypeInternal _CheckedExpr_ReferenceMapEntry_DoNotUse_default_instance_;
class CheckedExpr_TypeMapEntry_DoNotUse;
class CheckedExpr_TypeMapEntry_DoNotUseDefaultTypeInternal;
extern CheckedExpr_TypeMapEntry_DoNotUseDefaultTypeInternal _CheckedExpr_TypeMapEntry_DoNotUse_default_instance_;
class Decl;
class DeclDefaultTypeInternal;
extern DeclDefaultTypeInternal _Decl_default_instance_;
class Decl_FunctionDecl;
class Decl_FunctionDeclDefaultTypeInternal;
extern Decl_FunctionDeclDefaultTypeInternal _Decl_FunctionDecl_default_instance_;
class Decl_FunctionDecl_Overload;
class Decl_FunctionDecl_OverloadDefaultTypeInternal;
extern Decl_FunctionDecl_OverloadDefaultTypeInternal _Decl_FunctionDecl_Overload_default_instance_;
class Decl_IdentDecl;
class Decl_IdentDeclDefaultTypeInternal;
extern Decl_IdentDeclDefaultTypeInternal _Decl_IdentDecl_default_instance_;
class Reference;
class ReferenceDefaultTypeInternal;
extern ReferenceDefaultTypeInternal _Reference_default_instance_;
class Type;
class TypeDefaultTypeInternal;
extern TypeDefaultTypeInternal _Type_default_instance_;
class Type_AbstractType;
class Type_AbstractTypeDefaultTypeInternal;
extern Type_AbstractTypeDefaultTypeInternal _Type_AbstractType_default_instance_;
class Type_FunctionType;
class Type_FunctionTypeDefaultTypeInternal;
extern Type_FunctionTypeDefaultTypeInternal _Type_FunctionType_default_instance_;
class Type_ListType;
class Type_ListTypeDefaultTypeInternal;
extern Type_ListTypeDefaultTypeInternal _Type_ListType_default_instance_;
class Type_MapType;
class Type_MapTypeDefaultTypeInternal;
extern Type_MapTypeDefaultTypeInternal _Type_MapType_default_instance_;
}  // namespace v1alpha1
}  // namespace expr
}  // namespace api
}  // namespace google
namespace google {
namespace protobuf {
template<> ::google::api::expr::v1alpha1::CheckedExpr* Arena::CreateMaybeMessage<::google::api::expr::v1alpha1::CheckedExpr>(Arena*);
template<> ::google::api::expr::v1alpha1::CheckedExpr_ReferenceMapEntry_DoNotUse* Arena::CreateMaybeMessage<::google::api::expr::v1alpha1::CheckedExpr_ReferenceMapEntry_DoNotUse>(Arena*);
template<> ::google::api::expr::v1alpha1::CheckedExpr_TypeMapEntry_DoNotUse* Arena::CreateMaybeMessage<::google::api::expr::v1alpha1::CheckedExpr_TypeMapEntry_DoNotUse>(Arena*);
template<> ::google::api::expr::v1alpha1::Decl* Arena::CreateMaybeMessage<::google::api::expr::v1alpha1::Decl>(Arena*);
template<> ::google::api::expr::v1alpha1::Decl_FunctionDecl* Arena::CreateMaybeMessage<::google::api::expr::v1alpha1::Decl_FunctionDecl>(Arena*);
template<> ::google::api::expr::v1alpha1::Decl_FunctionDecl_Overload* Arena::CreateMaybeMessage<::google::api::expr::v1alpha1::Decl_FunctionDecl_Overload>(Arena*);
template<> ::google::api::expr::v1alpha1::Decl_IdentDecl* Arena::CreateMaybeMessage<::google::api::expr::v1alpha1::Decl_IdentDecl>(Arena*);
template<> ::google::api::expr::v1alpha1::Reference* Arena::CreateMaybeMessage<::google::api::expr::v1alpha1::Reference>(Arena*);
template<> ::google::api::expr::v1alpha1::Type* Arena::CreateMaybeMessage<::google::api::expr::v1alpha1::Type>(Arena*);
template<> ::google::api::expr::v1alpha1::Type_AbstractType* Arena::CreateMaybeMessage<::google::api::expr::v1alpha1::Type_AbstractType>(Arena*);
template<> ::google::api::expr::v1alpha1::Type_FunctionType* Arena::CreateMaybeMessage<::google::api::expr::v1alpha1::Type_FunctionType>(Arena*);
template<> ::google::api::expr::v1alpha1::Type_ListType* Arena::CreateMaybeMessage<::google::api::expr::v1alpha1::Type_ListType>(Arena*);
template<> ::google::api::expr::v1alpha1::Type_MapType* Arena::CreateMaybeMessage<::google::api::expr::v1alpha1::Type_MapType>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace google {
namespace api {
namespace expr {
namespace v1alpha1 {

enum Type_PrimitiveType {
  Type_PrimitiveType_PRIMITIVE_TYPE_UNSPECIFIED = 0,
  Type_PrimitiveType_BOOL = 1,
  Type_PrimitiveType_INT64 = 2,
  Type_PrimitiveType_UINT64 = 3,
  Type_PrimitiveType_DOUBLE = 4,
  Type_PrimitiveType_STRING = 5,
  Type_PrimitiveType_BYTES = 6,
  Type_PrimitiveType_Type_PrimitiveType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Type_PrimitiveType_Type_PrimitiveType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Type_PrimitiveType_IsValid(int value);
const Type_PrimitiveType Type_PrimitiveType_PrimitiveType_MIN = Type_PrimitiveType_PRIMITIVE_TYPE_UNSPECIFIED;
const Type_PrimitiveType Type_PrimitiveType_PrimitiveType_MAX = Type_PrimitiveType_BYTES;
const int Type_PrimitiveType_PrimitiveType_ARRAYSIZE = Type_PrimitiveType_PrimitiveType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Type_PrimitiveType_descriptor();
inline const ::std::string& Type_PrimitiveType_Name(Type_PrimitiveType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Type_PrimitiveType_descriptor(), value);
}
inline bool Type_PrimitiveType_Parse(
    const ::std::string& name, Type_PrimitiveType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Type_PrimitiveType>(
    Type_PrimitiveType_descriptor(), name, value);
}
enum Type_WellKnownType {
  Type_WellKnownType_WELL_KNOWN_TYPE_UNSPECIFIED = 0,
  Type_WellKnownType_ANY = 1,
  Type_WellKnownType_TIMESTAMP = 2,
  Type_WellKnownType_DURATION = 3,
  Type_WellKnownType_Type_WellKnownType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Type_WellKnownType_Type_WellKnownType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Type_WellKnownType_IsValid(int value);
const Type_WellKnownType Type_WellKnownType_WellKnownType_MIN = Type_WellKnownType_WELL_KNOWN_TYPE_UNSPECIFIED;
const Type_WellKnownType Type_WellKnownType_WellKnownType_MAX = Type_WellKnownType_DURATION;
const int Type_WellKnownType_WellKnownType_ARRAYSIZE = Type_WellKnownType_WellKnownType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Type_WellKnownType_descriptor();
inline const ::std::string& Type_WellKnownType_Name(Type_WellKnownType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Type_WellKnownType_descriptor(), value);
}
inline bool Type_WellKnownType_Parse(
    const ::std::string& name, Type_WellKnownType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Type_WellKnownType>(
    Type_WellKnownType_descriptor(), name, value);
}
// ===================================================================

class CheckedExpr_ReferenceMapEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<CheckedExpr_ReferenceMapEntry_DoNotUse, 
    ::google::protobuf::int64, ::google::api::expr::v1alpha1::Reference,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<CheckedExpr_ReferenceMapEntry_DoNotUse, 
    ::google::protobuf::int64, ::google::api::expr::v1alpha1::Reference,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  CheckedExpr_ReferenceMapEntry_DoNotUse();
  CheckedExpr_ReferenceMapEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const CheckedExpr_ReferenceMapEntry_DoNotUse& other);
  static const CheckedExpr_ReferenceMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CheckedExpr_ReferenceMapEntry_DoNotUse*>(&_CheckedExpr_ReferenceMapEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class CheckedExpr_TypeMapEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<CheckedExpr_TypeMapEntry_DoNotUse, 
    ::google::protobuf::int64, ::google::api::expr::v1alpha1::Type,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<CheckedExpr_TypeMapEntry_DoNotUse, 
    ::google::protobuf::int64, ::google::api::expr::v1alpha1::Type,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  CheckedExpr_TypeMapEntry_DoNotUse();
  CheckedExpr_TypeMapEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const CheckedExpr_TypeMapEntry_DoNotUse& other);
  static const CheckedExpr_TypeMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CheckedExpr_TypeMapEntry_DoNotUse*>(&_CheckedExpr_TypeMapEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class CheckedExpr : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.api.expr.v1alpha1.CheckedExpr) */ {
 public:
  CheckedExpr();
  virtual ~CheckedExpr();

  CheckedExpr(const CheckedExpr& from);

  inline CheckedExpr& operator=(const CheckedExpr& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CheckedExpr(CheckedExpr&& from) noexcept
    : CheckedExpr() {
    *this = ::std::move(from);
  }

  inline CheckedExpr& operator=(CheckedExpr&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckedExpr& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckedExpr* internal_default_instance() {
    return reinterpret_cast<const CheckedExpr*>(
               &_CheckedExpr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(CheckedExpr* other);
  void Swap(CheckedExpr* other);
  friend void swap(CheckedExpr& a, CheckedExpr& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CheckedExpr* New() const final {
    return CreateMaybeMessage<CheckedExpr>(NULL);
  }

  CheckedExpr* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CheckedExpr>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CheckedExpr& from);
  void MergeFrom(const CheckedExpr& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckedExpr* other);
  protected:
  explicit CheckedExpr(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<int64, .google.api.expr.v1alpha1.Reference> reference_map = 2;
  int reference_map_size() const;
  void clear_reference_map();
  static const int kReferenceMapFieldNumber = 2;
  const ::google::protobuf::Map< ::google::protobuf::int64, ::google::api::expr::v1alpha1::Reference >&
      reference_map() const;
  ::google::protobuf::Map< ::google::protobuf::int64, ::google::api::expr::v1alpha1::Reference >*
      mutable_reference_map();

  // map<int64, .google.api.expr.v1alpha1.Type> type_map = 3;
  int type_map_size() const;
  void clear_type_map();
  static const int kTypeMapFieldNumber = 3;
  const ::google::protobuf::Map< ::google::protobuf::int64, ::google::api::expr::v1alpha1::Type >&
      type_map() const;
  ::google::protobuf::Map< ::google::protobuf::int64, ::google::api::expr::v1alpha1::Type >*
      mutable_type_map();

  // .google.api.expr.v1alpha1.Expr expr = 4;
  bool has_expr() const;
  void clear_expr();
  static const int kExprFieldNumber = 4;
  private:
  const ::google::api::expr::v1alpha1::Expr& _internal_expr() const;
  public:
  const ::google::api::expr::v1alpha1::Expr& expr() const;
  ::google::api::expr::v1alpha1::Expr* release_expr();
  ::google::api::expr::v1alpha1::Expr* mutable_expr();
  void set_allocated_expr(::google::api::expr::v1alpha1::Expr* expr);
  void unsafe_arena_set_allocated_expr(
      ::google::api::expr::v1alpha1::Expr* expr);
  ::google::api::expr::v1alpha1::Expr* unsafe_arena_release_expr();

  // .google.api.expr.v1alpha1.SourceInfo source_info = 5;
  bool has_source_info() const;
  void clear_source_info();
  static const int kSourceInfoFieldNumber = 5;
  private:
  const ::google::api::expr::v1alpha1::SourceInfo& _internal_source_info() const;
  public:
  const ::google::api::expr::v1alpha1::SourceInfo& source_info() const;
  ::google::api::expr::v1alpha1::SourceInfo* release_source_info();
  ::google::api::expr::v1alpha1::SourceInfo* mutable_source_info();
  void set_allocated_source_info(::google::api::expr::v1alpha1::SourceInfo* source_info);
  void unsafe_arena_set_allocated_source_info(
      ::google::api::expr::v1alpha1::SourceInfo* source_info);
  ::google::api::expr::v1alpha1::SourceInfo* unsafe_arena_release_source_info();

  // @@protoc_insertion_point(class_scope:google.api.expr.v1alpha1.CheckedExpr)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::MapField<
      CheckedExpr_ReferenceMapEntry_DoNotUse,
      ::google::protobuf::int64, ::google::api::expr::v1alpha1::Reference,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > reference_map_;
  ::google::protobuf::internal::MapField<
      CheckedExpr_TypeMapEntry_DoNotUse,
      ::google::protobuf::int64, ::google::api::expr::v1alpha1::Type,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > type_map_;
  ::google::api::expr::v1alpha1::Expr* expr_;
  ::google::api::expr::v1alpha1::SourceInfo* source_info_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Type_ListType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.api.expr.v1alpha1.Type.ListType) */ {
 public:
  Type_ListType();
  virtual ~Type_ListType();

  Type_ListType(const Type_ListType& from);

  inline Type_ListType& operator=(const Type_ListType& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Type_ListType(Type_ListType&& from) noexcept
    : Type_ListType() {
    *this = ::std::move(from);
  }

  inline Type_ListType& operator=(Type_ListType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Type_ListType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Type_ListType* internal_default_instance() {
    return reinterpret_cast<const Type_ListType*>(
               &_Type_ListType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void UnsafeArenaSwap(Type_ListType* other);
  void Swap(Type_ListType* other);
  friend void swap(Type_ListType& a, Type_ListType& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Type_ListType* New() const final {
    return CreateMaybeMessage<Type_ListType>(NULL);
  }

  Type_ListType* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Type_ListType>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Type_ListType& from);
  void MergeFrom(const Type_ListType& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Type_ListType* other);
  protected:
  explicit Type_ListType(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.api.expr.v1alpha1.Type elem_type = 1;
  bool has_elem_type() const;
  void clear_elem_type();
  static const int kElemTypeFieldNumber = 1;
  private:
  const ::google::api::expr::v1alpha1::Type& _internal_elem_type() const;
  public:
  const ::google::api::expr::v1alpha1::Type& elem_type() const;
  ::google::api::expr::v1alpha1::Type* release_elem_type();
  ::google::api::expr::v1alpha1::Type* mutable_elem_type();
  void set_allocated_elem_type(::google::api::expr::v1alpha1::Type* elem_type);
  void unsafe_arena_set_allocated_elem_type(
      ::google::api::expr::v1alpha1::Type* elem_type);
  ::google::api::expr::v1alpha1::Type* unsafe_arena_release_elem_type();

  // @@protoc_insertion_point(class_scope:google.api.expr.v1alpha1.Type.ListType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::api::expr::v1alpha1::Type* elem_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Type_MapType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.api.expr.v1alpha1.Type.MapType) */ {
 public:
  Type_MapType();
  virtual ~Type_MapType();

  Type_MapType(const Type_MapType& from);

  inline Type_MapType& operator=(const Type_MapType& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Type_MapType(Type_MapType&& from) noexcept
    : Type_MapType() {
    *this = ::std::move(from);
  }

  inline Type_MapType& operator=(Type_MapType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Type_MapType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Type_MapType* internal_default_instance() {
    return reinterpret_cast<const Type_MapType*>(
               &_Type_MapType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void UnsafeArenaSwap(Type_MapType* other);
  void Swap(Type_MapType* other);
  friend void swap(Type_MapType& a, Type_MapType& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Type_MapType* New() const final {
    return CreateMaybeMessage<Type_MapType>(NULL);
  }

  Type_MapType* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Type_MapType>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Type_MapType& from);
  void MergeFrom(const Type_MapType& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Type_MapType* other);
  protected:
  explicit Type_MapType(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.api.expr.v1alpha1.Type key_type = 1;
  bool has_key_type() const;
  void clear_key_type();
  static const int kKeyTypeFieldNumber = 1;
  private:
  const ::google::api::expr::v1alpha1::Type& _internal_key_type() const;
  public:
  const ::google::api::expr::v1alpha1::Type& key_type() const;
  ::google::api::expr::v1alpha1::Type* release_key_type();
  ::google::api::expr::v1alpha1::Type* mutable_key_type();
  void set_allocated_key_type(::google::api::expr::v1alpha1::Type* key_type);
  void unsafe_arena_set_allocated_key_type(
      ::google::api::expr::v1alpha1::Type* key_type);
  ::google::api::expr::v1alpha1::Type* unsafe_arena_release_key_type();

  // .google.api.expr.v1alpha1.Type value_type = 2;
  bool has_value_type() const;
  void clear_value_type();
  static const int kValueTypeFieldNumber = 2;
  private:
  const ::google::api::expr::v1alpha1::Type& _internal_value_type() const;
  public:
  const ::google::api::expr::v1alpha1::Type& value_type() const;
  ::google::api::expr::v1alpha1::Type* release_value_type();
  ::google::api::expr::v1alpha1::Type* mutable_value_type();
  void set_allocated_value_type(::google::api::expr::v1alpha1::Type* value_type);
  void unsafe_arena_set_allocated_value_type(
      ::google::api::expr::v1alpha1::Type* value_type);
  ::google::api::expr::v1alpha1::Type* unsafe_arena_release_value_type();

  // @@protoc_insertion_point(class_scope:google.api.expr.v1alpha1.Type.MapType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::api::expr::v1alpha1::Type* key_type_;
  ::google::api::expr::v1alpha1::Type* value_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Type_FunctionType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.api.expr.v1alpha1.Type.FunctionType) */ {
 public:
  Type_FunctionType();
  virtual ~Type_FunctionType();

  Type_FunctionType(const Type_FunctionType& from);

  inline Type_FunctionType& operator=(const Type_FunctionType& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Type_FunctionType(Type_FunctionType&& from) noexcept
    : Type_FunctionType() {
    *this = ::std::move(from);
  }

  inline Type_FunctionType& operator=(Type_FunctionType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Type_FunctionType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Type_FunctionType* internal_default_instance() {
    return reinterpret_cast<const Type_FunctionType*>(
               &_Type_FunctionType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void UnsafeArenaSwap(Type_FunctionType* other);
  void Swap(Type_FunctionType* other);
  friend void swap(Type_FunctionType& a, Type_FunctionType& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Type_FunctionType* New() const final {
    return CreateMaybeMessage<Type_FunctionType>(NULL);
  }

  Type_FunctionType* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Type_FunctionType>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Type_FunctionType& from);
  void MergeFrom(const Type_FunctionType& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Type_FunctionType* other);
  protected:
  explicit Type_FunctionType(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.api.expr.v1alpha1.Type arg_types = 2;
  int arg_types_size() const;
  void clear_arg_types();
  static const int kArgTypesFieldNumber = 2;
  ::google::api::expr::v1alpha1::Type* mutable_arg_types(int index);
  ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::Type >*
      mutable_arg_types();
  const ::google::api::expr::v1alpha1::Type& arg_types(int index) const;
  ::google::api::expr::v1alpha1::Type* add_arg_types();
  const ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::Type >&
      arg_types() const;

  // .google.api.expr.v1alpha1.Type result_type = 1;
  bool has_result_type() const;
  void clear_result_type();
  static const int kResultTypeFieldNumber = 1;
  private:
  const ::google::api::expr::v1alpha1::Type& _internal_result_type() const;
  public:
  const ::google::api::expr::v1alpha1::Type& result_type() const;
  ::google::api::expr::v1alpha1::Type* release_result_type();
  ::google::api::expr::v1alpha1::Type* mutable_result_type();
  void set_allocated_result_type(::google::api::expr::v1alpha1::Type* result_type);
  void unsafe_arena_set_allocated_result_type(
      ::google::api::expr::v1alpha1::Type* result_type);
  ::google::api::expr::v1alpha1::Type* unsafe_arena_release_result_type();

  // @@protoc_insertion_point(class_scope:google.api.expr.v1alpha1.Type.FunctionType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::Type > arg_types_;
  ::google::api::expr::v1alpha1::Type* result_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Type_AbstractType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.api.expr.v1alpha1.Type.AbstractType) */ {
 public:
  Type_AbstractType();
  virtual ~Type_AbstractType();

  Type_AbstractType(const Type_AbstractType& from);

  inline Type_AbstractType& operator=(const Type_AbstractType& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Type_AbstractType(Type_AbstractType&& from) noexcept
    : Type_AbstractType() {
    *this = ::std::move(from);
  }

  inline Type_AbstractType& operator=(Type_AbstractType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Type_AbstractType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Type_AbstractType* internal_default_instance() {
    return reinterpret_cast<const Type_AbstractType*>(
               &_Type_AbstractType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void UnsafeArenaSwap(Type_AbstractType* other);
  void Swap(Type_AbstractType* other);
  friend void swap(Type_AbstractType& a, Type_AbstractType& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Type_AbstractType* New() const final {
    return CreateMaybeMessage<Type_AbstractType>(NULL);
  }

  Type_AbstractType* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Type_AbstractType>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Type_AbstractType& from);
  void MergeFrom(const Type_AbstractType& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Type_AbstractType* other);
  protected:
  explicit Type_AbstractType(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.api.expr.v1alpha1.Type parameter_types = 2;
  int parameter_types_size() const;
  void clear_parameter_types();
  static const int kParameterTypesFieldNumber = 2;
  ::google::api::expr::v1alpha1::Type* mutable_parameter_types(int index);
  ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::Type >*
      mutable_parameter_types();
  const ::google::api::expr::v1alpha1::Type& parameter_types(int index) const;
  ::google::api::expr::v1alpha1::Type* add_parameter_types();
  const ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::Type >&
      parameter_types() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // @@protoc_insertion_point(class_scope:google.api.expr.v1alpha1.Type.AbstractType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::Type > parameter_types_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Type : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.api.expr.v1alpha1.Type) */ {
 public:
  Type();
  virtual ~Type();

  Type(const Type& from);

  inline Type& operator=(const Type& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Type(Type&& from) noexcept
    : Type() {
    *this = ::std::move(from);
  }

  inline Type& operator=(Type&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Type& default_instance();

  enum TypeKindCase {
    kDyn = 1,
    kNull = 2,
    kPrimitive = 3,
    kWrapper = 4,
    kWellKnown = 5,
    kListType = 6,
    kMapType = 7,
    kFunction = 8,
    kMessageType = 9,
    kTypeParam = 10,
    kType = 11,
    kError = 12,
    kAbstractType = 14,
    TYPE_KIND_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Type* internal_default_instance() {
    return reinterpret_cast<const Type*>(
               &_Type_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void UnsafeArenaSwap(Type* other);
  void Swap(Type* other);
  friend void swap(Type& a, Type& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Type* New() const final {
    return CreateMaybeMessage<Type>(NULL);
  }

  Type* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Type>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Type& from);
  void MergeFrom(const Type& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Type* other);
  protected:
  explicit Type(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Type_ListType ListType;
  typedef Type_MapType MapType;
  typedef Type_FunctionType FunctionType;
  typedef Type_AbstractType AbstractType;

  typedef Type_PrimitiveType PrimitiveType;
  static const PrimitiveType PRIMITIVE_TYPE_UNSPECIFIED =
    Type_PrimitiveType_PRIMITIVE_TYPE_UNSPECIFIED;
  static const PrimitiveType BOOL =
    Type_PrimitiveType_BOOL;
  static const PrimitiveType INT64 =
    Type_PrimitiveType_INT64;
  static const PrimitiveType UINT64 =
    Type_PrimitiveType_UINT64;
  static const PrimitiveType DOUBLE =
    Type_PrimitiveType_DOUBLE;
  static const PrimitiveType STRING =
    Type_PrimitiveType_STRING;
  static const PrimitiveType BYTES =
    Type_PrimitiveType_BYTES;
  static inline bool PrimitiveType_IsValid(int value) {
    return Type_PrimitiveType_IsValid(value);
  }
  static const PrimitiveType PrimitiveType_MIN =
    Type_PrimitiveType_PrimitiveType_MIN;
  static const PrimitiveType PrimitiveType_MAX =
    Type_PrimitiveType_PrimitiveType_MAX;
  static const int PrimitiveType_ARRAYSIZE =
    Type_PrimitiveType_PrimitiveType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PrimitiveType_descriptor() {
    return Type_PrimitiveType_descriptor();
  }
  static inline const ::std::string& PrimitiveType_Name(PrimitiveType value) {
    return Type_PrimitiveType_Name(value);
  }
  static inline bool PrimitiveType_Parse(const ::std::string& name,
      PrimitiveType* value) {
    return Type_PrimitiveType_Parse(name, value);
  }

  typedef Type_WellKnownType WellKnownType;
  static const WellKnownType WELL_KNOWN_TYPE_UNSPECIFIED =
    Type_WellKnownType_WELL_KNOWN_TYPE_UNSPECIFIED;
  static const WellKnownType ANY =
    Type_WellKnownType_ANY;
  static const WellKnownType TIMESTAMP =
    Type_WellKnownType_TIMESTAMP;
  static const WellKnownType DURATION =
    Type_WellKnownType_DURATION;
  static inline bool WellKnownType_IsValid(int value) {
    return Type_WellKnownType_IsValid(value);
  }
  static const WellKnownType WellKnownType_MIN =
    Type_WellKnownType_WellKnownType_MIN;
  static const WellKnownType WellKnownType_MAX =
    Type_WellKnownType_WellKnownType_MAX;
  static const int WellKnownType_ARRAYSIZE =
    Type_WellKnownType_WellKnownType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  WellKnownType_descriptor() {
    return Type_WellKnownType_descriptor();
  }
  static inline const ::std::string& WellKnownType_Name(WellKnownType value) {
    return Type_WellKnownType_Name(value);
  }
  static inline bool WellKnownType_Parse(const ::std::string& name,
      WellKnownType* value) {
    return Type_WellKnownType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .google.protobuf.Empty dyn = 1;
  bool has_dyn() const;
  void clear_dyn();
  static const int kDynFieldNumber = 1;
  private:
  const ::google::protobuf::Empty& _internal_dyn() const;
  public:
  const ::google::protobuf::Empty& dyn() const;
  ::google::protobuf::Empty* release_dyn();
  ::google::protobuf::Empty* mutable_dyn();
  void set_allocated_dyn(::google::protobuf::Empty* dyn);
  void unsafe_arena_set_allocated_dyn(
      ::google::protobuf::Empty* dyn);
  ::google::protobuf::Empty* unsafe_arena_release_dyn();

  // .google.protobuf.NullValue null = 2;
  private:
  bool has_null() const;
  public:
  void clear_null();
  static const int kNullFieldNumber = 2;
  ::google::protobuf::NullValue null() const;
  void set_null(::google::protobuf::NullValue value);

  // .google.api.expr.v1alpha1.Type.PrimitiveType primitive = 3;
  private:
  bool has_primitive() const;
  public:
  void clear_primitive();
  static const int kPrimitiveFieldNumber = 3;
  ::google::api::expr::v1alpha1::Type_PrimitiveType primitive() const;
  void set_primitive(::google::api::expr::v1alpha1::Type_PrimitiveType value);

  // .google.api.expr.v1alpha1.Type.PrimitiveType wrapper = 4;
  private:
  bool has_wrapper() const;
  public:
  void clear_wrapper();
  static const int kWrapperFieldNumber = 4;
  ::google::api::expr::v1alpha1::Type_PrimitiveType wrapper() const;
  void set_wrapper(::google::api::expr::v1alpha1::Type_PrimitiveType value);

  // .google.api.expr.v1alpha1.Type.WellKnownType well_known = 5;
  private:
  bool has_well_known() const;
  public:
  void clear_well_known();
  static const int kWellKnownFieldNumber = 5;
  ::google::api::expr::v1alpha1::Type_WellKnownType well_known() const;
  void set_well_known(::google::api::expr::v1alpha1::Type_WellKnownType value);

  // .google.api.expr.v1alpha1.Type.ListType list_type = 6;
  bool has_list_type() const;
  void clear_list_type();
  static const int kListTypeFieldNumber = 6;
  private:
  const ::google::api::expr::v1alpha1::Type_ListType& _internal_list_type() const;
  public:
  const ::google::api::expr::v1alpha1::Type_ListType& list_type() const;
  ::google::api::expr::v1alpha1::Type_ListType* release_list_type();
  ::google::api::expr::v1alpha1::Type_ListType* mutable_list_type();
  void set_allocated_list_type(::google::api::expr::v1alpha1::Type_ListType* list_type);
  void unsafe_arena_set_allocated_list_type(
      ::google::api::expr::v1alpha1::Type_ListType* list_type);
  ::google::api::expr::v1alpha1::Type_ListType* unsafe_arena_release_list_type();

  // .google.api.expr.v1alpha1.Type.MapType map_type = 7;
  bool has_map_type() const;
  void clear_map_type();
  static const int kMapTypeFieldNumber = 7;
  private:
  const ::google::api::expr::v1alpha1::Type_MapType& _internal_map_type() const;
  public:
  const ::google::api::expr::v1alpha1::Type_MapType& map_type() const;
  ::google::api::expr::v1alpha1::Type_MapType* release_map_type();
  ::google::api::expr::v1alpha1::Type_MapType* mutable_map_type();
  void set_allocated_map_type(::google::api::expr::v1alpha1::Type_MapType* map_type);
  void unsafe_arena_set_allocated_map_type(
      ::google::api::expr::v1alpha1::Type_MapType* map_type);
  ::google::api::expr::v1alpha1::Type_MapType* unsafe_arena_release_map_type();

  // .google.api.expr.v1alpha1.Type.FunctionType function = 8;
  bool has_function() const;
  void clear_function();
  static const int kFunctionFieldNumber = 8;
  private:
  const ::google::api::expr::v1alpha1::Type_FunctionType& _internal_function() const;
  public:
  const ::google::api::expr::v1alpha1::Type_FunctionType& function() const;
  ::google::api::expr::v1alpha1::Type_FunctionType* release_function();
  ::google::api::expr::v1alpha1::Type_FunctionType* mutable_function();
  void set_allocated_function(::google::api::expr::v1alpha1::Type_FunctionType* function);
  void unsafe_arena_set_allocated_function(
      ::google::api::expr::v1alpha1::Type_FunctionType* function);
  ::google::api::expr::v1alpha1::Type_FunctionType* unsafe_arena_release_function();

  // string message_type = 9;
  private:
  bool has_message_type() const;
  public:
  void clear_message_type();
  static const int kMessageTypeFieldNumber = 9;
  const ::std::string& message_type() const;
  void set_message_type(const ::std::string& value);
  #if LANG_CXX11
  void set_message_type(::std::string&& value);
  #endif
  void set_message_type(const char* value);
  void set_message_type(const char* value, size_t size);
  ::std::string* mutable_message_type();
  ::std::string* release_message_type();
  void set_allocated_message_type(::std::string* message_type);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_message_type();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message_type(
      ::std::string* message_type);

  // string type_param = 10;
  private:
  bool has_type_param() const;
  public:
  void clear_type_param();
  static const int kTypeParamFieldNumber = 10;
  const ::std::string& type_param() const;
  void set_type_param(const ::std::string& value);
  #if LANG_CXX11
  void set_type_param(::std::string&& value);
  #endif
  void set_type_param(const char* value);
  void set_type_param(const char* value, size_t size);
  ::std::string* mutable_type_param();
  ::std::string* release_type_param();
  void set_allocated_type_param(::std::string* type_param);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_type_param();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_type_param(
      ::std::string* type_param);

  // .google.api.expr.v1alpha1.Type type = 11;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 11;
  private:
  const ::google::api::expr::v1alpha1::Type& _internal_type() const;
  public:
  const ::google::api::expr::v1alpha1::Type& type() const;
  ::google::api::expr::v1alpha1::Type* release_type();
  ::google::api::expr::v1alpha1::Type* mutable_type();
  void set_allocated_type(::google::api::expr::v1alpha1::Type* type);
  void unsafe_arena_set_allocated_type(
      ::google::api::expr::v1alpha1::Type* type);
  ::google::api::expr::v1alpha1::Type* unsafe_arena_release_type();

  // .google.protobuf.Empty error = 12;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 12;
  private:
  const ::google::protobuf::Empty& _internal_error() const;
  public:
  const ::google::protobuf::Empty& error() const;
  ::google::protobuf::Empty* release_error();
  ::google::protobuf::Empty* mutable_error();
  void set_allocated_error(::google::protobuf::Empty* error);
  void unsafe_arena_set_allocated_error(
      ::google::protobuf::Empty* error);
  ::google::protobuf::Empty* unsafe_arena_release_error();

  // .google.api.expr.v1alpha1.Type.AbstractType abstract_type = 14;
  bool has_abstract_type() const;
  void clear_abstract_type();
  static const int kAbstractTypeFieldNumber = 14;
  private:
  const ::google::api::expr::v1alpha1::Type_AbstractType& _internal_abstract_type() const;
  public:
  const ::google::api::expr::v1alpha1::Type_AbstractType& abstract_type() const;
  ::google::api::expr::v1alpha1::Type_AbstractType* release_abstract_type();
  ::google::api::expr::v1alpha1::Type_AbstractType* mutable_abstract_type();
  void set_allocated_abstract_type(::google::api::expr::v1alpha1::Type_AbstractType* abstract_type);
  void unsafe_arena_set_allocated_abstract_type(
      ::google::api::expr::v1alpha1::Type_AbstractType* abstract_type);
  ::google::api::expr::v1alpha1::Type_AbstractType* unsafe_arena_release_abstract_type();

  void clear_type_kind();
  TypeKindCase type_kind_case() const;
  // @@protoc_insertion_point(class_scope:google.api.expr.v1alpha1.Type)
 private:
  void set_has_dyn();
  void set_has_null();
  void set_has_primitive();
  void set_has_wrapper();
  void set_has_well_known();
  void set_has_list_type();
  void set_has_map_type();
  void set_has_function();
  void set_has_message_type();
  void set_has_type_param();
  void set_has_type();
  void set_has_error();
  void set_has_abstract_type();

  inline bool has_type_kind() const;
  inline void clear_has_type_kind();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union TypeKindUnion {
    TypeKindUnion() {}
    ::google::protobuf::Empty* dyn_;
    int null_;
    int primitive_;
    int wrapper_;
    int well_known_;
    ::google::api::expr::v1alpha1::Type_ListType* list_type_;
    ::google::api::expr::v1alpha1::Type_MapType* map_type_;
    ::google::api::expr::v1alpha1::Type_FunctionType* function_;
    ::google::protobuf::internal::ArenaStringPtr message_type_;
    ::google::protobuf::internal::ArenaStringPtr type_param_;
    ::google::api::expr::v1alpha1::Type* type_;
    ::google::protobuf::Empty* error_;
    ::google::api::expr::v1alpha1::Type_AbstractType* abstract_type_;
  } type_kind_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Decl_IdentDecl : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.api.expr.v1alpha1.Decl.IdentDecl) */ {
 public:
  Decl_IdentDecl();
  virtual ~Decl_IdentDecl();

  Decl_IdentDecl(const Decl_IdentDecl& from);

  inline Decl_IdentDecl& operator=(const Decl_IdentDecl& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Decl_IdentDecl(Decl_IdentDecl&& from) noexcept
    : Decl_IdentDecl() {
    *this = ::std::move(from);
  }

  inline Decl_IdentDecl& operator=(Decl_IdentDecl&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Decl_IdentDecl& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Decl_IdentDecl* internal_default_instance() {
    return reinterpret_cast<const Decl_IdentDecl*>(
               &_Decl_IdentDecl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void UnsafeArenaSwap(Decl_IdentDecl* other);
  void Swap(Decl_IdentDecl* other);
  friend void swap(Decl_IdentDecl& a, Decl_IdentDecl& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Decl_IdentDecl* New() const final {
    return CreateMaybeMessage<Decl_IdentDecl>(NULL);
  }

  Decl_IdentDecl* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Decl_IdentDecl>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Decl_IdentDecl& from);
  void MergeFrom(const Decl_IdentDecl& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Decl_IdentDecl* other);
  protected:
  explicit Decl_IdentDecl(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string doc = 3;
  void clear_doc();
  static const int kDocFieldNumber = 3;
  const ::std::string& doc() const;
  void set_doc(const ::std::string& value);
  #if LANG_CXX11
  void set_doc(::std::string&& value);
  #endif
  void set_doc(const char* value);
  void set_doc(const char* value, size_t size);
  ::std::string* mutable_doc();
  ::std::string* release_doc();
  void set_allocated_doc(::std::string* doc);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_doc();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_doc(
      ::std::string* doc);

  // .google.api.expr.v1alpha1.Type type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  private:
  const ::google::api::expr::v1alpha1::Type& _internal_type() const;
  public:
  const ::google::api::expr::v1alpha1::Type& type() const;
  ::google::api::expr::v1alpha1::Type* release_type();
  ::google::api::expr::v1alpha1::Type* mutable_type();
  void set_allocated_type(::google::api::expr::v1alpha1::Type* type);
  void unsafe_arena_set_allocated_type(
      ::google::api::expr::v1alpha1::Type* type);
  ::google::api::expr::v1alpha1::Type* unsafe_arena_release_type();

  // .google.api.expr.v1alpha1.Constant value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  private:
  const ::google::api::expr::v1alpha1::Constant& _internal_value() const;
  public:
  const ::google::api::expr::v1alpha1::Constant& value() const;
  ::google::api::expr::v1alpha1::Constant* release_value();
  ::google::api::expr::v1alpha1::Constant* mutable_value();
  void set_allocated_value(::google::api::expr::v1alpha1::Constant* value);
  void unsafe_arena_set_allocated_value(
      ::google::api::expr::v1alpha1::Constant* value);
  ::google::api::expr::v1alpha1::Constant* unsafe_arena_release_value();

  // @@protoc_insertion_point(class_scope:google.api.expr.v1alpha1.Decl.IdentDecl)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr doc_;
  ::google::api::expr::v1alpha1::Type* type_;
  ::google::api::expr::v1alpha1::Constant* value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Decl_FunctionDecl_Overload : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload) */ {
 public:
  Decl_FunctionDecl_Overload();
  virtual ~Decl_FunctionDecl_Overload();

  Decl_FunctionDecl_Overload(const Decl_FunctionDecl_Overload& from);

  inline Decl_FunctionDecl_Overload& operator=(const Decl_FunctionDecl_Overload& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Decl_FunctionDecl_Overload(Decl_FunctionDecl_Overload&& from) noexcept
    : Decl_FunctionDecl_Overload() {
    *this = ::std::move(from);
  }

  inline Decl_FunctionDecl_Overload& operator=(Decl_FunctionDecl_Overload&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Decl_FunctionDecl_Overload& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Decl_FunctionDecl_Overload* internal_default_instance() {
    return reinterpret_cast<const Decl_FunctionDecl_Overload*>(
               &_Decl_FunctionDecl_Overload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void UnsafeArenaSwap(Decl_FunctionDecl_Overload* other);
  void Swap(Decl_FunctionDecl_Overload* other);
  friend void swap(Decl_FunctionDecl_Overload& a, Decl_FunctionDecl_Overload& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Decl_FunctionDecl_Overload* New() const final {
    return CreateMaybeMessage<Decl_FunctionDecl_Overload>(NULL);
  }

  Decl_FunctionDecl_Overload* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Decl_FunctionDecl_Overload>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Decl_FunctionDecl_Overload& from);
  void MergeFrom(const Decl_FunctionDecl_Overload& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Decl_FunctionDecl_Overload* other);
  protected:
  explicit Decl_FunctionDecl_Overload(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.api.expr.v1alpha1.Type params = 2;
  int params_size() const;
  void clear_params();
  static const int kParamsFieldNumber = 2;
  ::google::api::expr::v1alpha1::Type* mutable_params(int index);
  ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::Type >*
      mutable_params();
  const ::google::api::expr::v1alpha1::Type& params(int index) const;
  ::google::api::expr::v1alpha1::Type* add_params();
  const ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::Type >&
      params() const;

  // repeated string type_params = 3;
  int type_params_size() const;
  void clear_type_params();
  static const int kTypeParamsFieldNumber = 3;
  const ::std::string& type_params(int index) const;
  ::std::string* mutable_type_params(int index);
  void set_type_params(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_type_params(int index, ::std::string&& value);
  #endif
  void set_type_params(int index, const char* value);
  void set_type_params(int index, const char* value, size_t size);
  ::std::string* add_type_params();
  void add_type_params(const ::std::string& value);
  #if LANG_CXX11
  void add_type_params(::std::string&& value);
  #endif
  void add_type_params(const char* value);
  void add_type_params(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& type_params() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_type_params();

  // string overload_id = 1;
  void clear_overload_id();
  static const int kOverloadIdFieldNumber = 1;
  const ::std::string& overload_id() const;
  void set_overload_id(const ::std::string& value);
  #if LANG_CXX11
  void set_overload_id(::std::string&& value);
  #endif
  void set_overload_id(const char* value);
  void set_overload_id(const char* value, size_t size);
  ::std::string* mutable_overload_id();
  ::std::string* release_overload_id();
  void set_allocated_overload_id(::std::string* overload_id);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_overload_id();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_overload_id(
      ::std::string* overload_id);

  // string doc = 6;
  void clear_doc();
  static const int kDocFieldNumber = 6;
  const ::std::string& doc() const;
  void set_doc(const ::std::string& value);
  #if LANG_CXX11
  void set_doc(::std::string&& value);
  #endif
  void set_doc(const char* value);
  void set_doc(const char* value, size_t size);
  ::std::string* mutable_doc();
  ::std::string* release_doc();
  void set_allocated_doc(::std::string* doc);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_doc();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_doc(
      ::std::string* doc);

  // .google.api.expr.v1alpha1.Type result_type = 4;
  bool has_result_type() const;
  void clear_result_type();
  static const int kResultTypeFieldNumber = 4;
  private:
  const ::google::api::expr::v1alpha1::Type& _internal_result_type() const;
  public:
  const ::google::api::expr::v1alpha1::Type& result_type() const;
  ::google::api::expr::v1alpha1::Type* release_result_type();
  ::google::api::expr::v1alpha1::Type* mutable_result_type();
  void set_allocated_result_type(::google::api::expr::v1alpha1::Type* result_type);
  void unsafe_arena_set_allocated_result_type(
      ::google::api::expr::v1alpha1::Type* result_type);
  ::google::api::expr::v1alpha1::Type* unsafe_arena_release_result_type();

  // bool is_instance_function = 5;
  void clear_is_instance_function();
  static const int kIsInstanceFunctionFieldNumber = 5;
  bool is_instance_function() const;
  void set_is_instance_function(bool value);

  // @@protoc_insertion_point(class_scope:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::Type > params_;
  ::google::protobuf::RepeatedPtrField< ::std::string> type_params_;
  ::google::protobuf::internal::ArenaStringPtr overload_id_;
  ::google::protobuf::internal::ArenaStringPtr doc_;
  ::google::api::expr::v1alpha1::Type* result_type_;
  bool is_instance_function_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Decl_FunctionDecl : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.api.expr.v1alpha1.Decl.FunctionDecl) */ {
 public:
  Decl_FunctionDecl();
  virtual ~Decl_FunctionDecl();

  Decl_FunctionDecl(const Decl_FunctionDecl& from);

  inline Decl_FunctionDecl& operator=(const Decl_FunctionDecl& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Decl_FunctionDecl(Decl_FunctionDecl&& from) noexcept
    : Decl_FunctionDecl() {
    *this = ::std::move(from);
  }

  inline Decl_FunctionDecl& operator=(Decl_FunctionDecl&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Decl_FunctionDecl& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Decl_FunctionDecl* internal_default_instance() {
    return reinterpret_cast<const Decl_FunctionDecl*>(
               &_Decl_FunctionDecl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void UnsafeArenaSwap(Decl_FunctionDecl* other);
  void Swap(Decl_FunctionDecl* other);
  friend void swap(Decl_FunctionDecl& a, Decl_FunctionDecl& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Decl_FunctionDecl* New() const final {
    return CreateMaybeMessage<Decl_FunctionDecl>(NULL);
  }

  Decl_FunctionDecl* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Decl_FunctionDecl>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Decl_FunctionDecl& from);
  void MergeFrom(const Decl_FunctionDecl& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Decl_FunctionDecl* other);
  protected:
  explicit Decl_FunctionDecl(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Decl_FunctionDecl_Overload Overload;

  // accessors -------------------------------------------------------

  // repeated .google.api.expr.v1alpha1.Decl.FunctionDecl.Overload overloads = 1;
  int overloads_size() const;
  void clear_overloads();
  static const int kOverloadsFieldNumber = 1;
  ::google::api::expr::v1alpha1::Decl_FunctionDecl_Overload* mutable_overloads(int index);
  ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::Decl_FunctionDecl_Overload >*
      mutable_overloads();
  const ::google::api::expr::v1alpha1::Decl_FunctionDecl_Overload& overloads(int index) const;
  ::google::api::expr::v1alpha1::Decl_FunctionDecl_Overload* add_overloads();
  const ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::Decl_FunctionDecl_Overload >&
      overloads() const;

  // @@protoc_insertion_point(class_scope:google.api.expr.v1alpha1.Decl.FunctionDecl)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::Decl_FunctionDecl_Overload > overloads_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Decl : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.api.expr.v1alpha1.Decl) */ {
 public:
  Decl();
  virtual ~Decl();

  Decl(const Decl& from);

  inline Decl& operator=(const Decl& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Decl(Decl&& from) noexcept
    : Decl() {
    *this = ::std::move(from);
  }

  inline Decl& operator=(Decl&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Decl& default_instance();

  enum DeclKindCase {
    kIdent = 2,
    kFunction = 3,
    DECL_KIND_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Decl* internal_default_instance() {
    return reinterpret_cast<const Decl*>(
               &_Decl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void UnsafeArenaSwap(Decl* other);
  void Swap(Decl* other);
  friend void swap(Decl& a, Decl& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Decl* New() const final {
    return CreateMaybeMessage<Decl>(NULL);
  }

  Decl* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Decl>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Decl& from);
  void MergeFrom(const Decl& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Decl* other);
  protected:
  explicit Decl(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Decl_IdentDecl IdentDecl;
  typedef Decl_FunctionDecl FunctionDecl;

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // .google.api.expr.v1alpha1.Decl.IdentDecl ident = 2;
  bool has_ident() const;
  void clear_ident();
  static const int kIdentFieldNumber = 2;
  private:
  const ::google::api::expr::v1alpha1::Decl_IdentDecl& _internal_ident() const;
  public:
  const ::google::api::expr::v1alpha1::Decl_IdentDecl& ident() const;
  ::google::api::expr::v1alpha1::Decl_IdentDecl* release_ident();
  ::google::api::expr::v1alpha1::Decl_IdentDecl* mutable_ident();
  void set_allocated_ident(::google::api::expr::v1alpha1::Decl_IdentDecl* ident);
  void unsafe_arena_set_allocated_ident(
      ::google::api::expr::v1alpha1::Decl_IdentDecl* ident);
  ::google::api::expr::v1alpha1::Decl_IdentDecl* unsafe_arena_release_ident();

  // .google.api.expr.v1alpha1.Decl.FunctionDecl function = 3;
  bool has_function() const;
  void clear_function();
  static const int kFunctionFieldNumber = 3;
  private:
  const ::google::api::expr::v1alpha1::Decl_FunctionDecl& _internal_function() const;
  public:
  const ::google::api::expr::v1alpha1::Decl_FunctionDecl& function() const;
  ::google::api::expr::v1alpha1::Decl_FunctionDecl* release_function();
  ::google::api::expr::v1alpha1::Decl_FunctionDecl* mutable_function();
  void set_allocated_function(::google::api::expr::v1alpha1::Decl_FunctionDecl* function);
  void unsafe_arena_set_allocated_function(
      ::google::api::expr::v1alpha1::Decl_FunctionDecl* function);
  ::google::api::expr::v1alpha1::Decl_FunctionDecl* unsafe_arena_release_function();

  void clear_decl_kind();
  DeclKindCase decl_kind_case() const;
  // @@protoc_insertion_point(class_scope:google.api.expr.v1alpha1.Decl)
 private:
  void set_has_ident();
  void set_has_function();

  inline bool has_decl_kind() const;
  inline void clear_has_decl_kind();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  union DeclKindUnion {
    DeclKindUnion() {}
    ::google::api::expr::v1alpha1::Decl_IdentDecl* ident_;
    ::google::api::expr::v1alpha1::Decl_FunctionDecl* function_;
  } decl_kind_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Reference : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.api.expr.v1alpha1.Reference) */ {
 public:
  Reference();
  virtual ~Reference();

  Reference(const Reference& from);

  inline Reference& operator=(const Reference& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Reference(Reference&& from) noexcept
    : Reference() {
    *this = ::std::move(from);
  }

  inline Reference& operator=(Reference&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Reference& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Reference* internal_default_instance() {
    return reinterpret_cast<const Reference*>(
               &_Reference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void UnsafeArenaSwap(Reference* other);
  void Swap(Reference* other);
  friend void swap(Reference& a, Reference& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Reference* New() const final {
    return CreateMaybeMessage<Reference>(NULL);
  }

  Reference* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Reference>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Reference& from);
  void MergeFrom(const Reference& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Reference* other);
  protected:
  explicit Reference(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string overload_id = 3;
  int overload_id_size() const;
  void clear_overload_id();
  static const int kOverloadIdFieldNumber = 3;
  const ::std::string& overload_id(int index) const;
  ::std::string* mutable_overload_id(int index);
  void set_overload_id(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_overload_id(int index, ::std::string&& value);
  #endif
  void set_overload_id(int index, const char* value);
  void set_overload_id(int index, const char* value, size_t size);
  ::std::string* add_overload_id();
  void add_overload_id(const ::std::string& value);
  #if LANG_CXX11
  void add_overload_id(::std::string&& value);
  #endif
  void add_overload_id(const char* value);
  void add_overload_id(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& overload_id() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_overload_id();

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // .google.api.expr.v1alpha1.Constant value = 4;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 4;
  private:
  const ::google::api::expr::v1alpha1::Constant& _internal_value() const;
  public:
  const ::google::api::expr::v1alpha1::Constant& value() const;
  ::google::api::expr::v1alpha1::Constant* release_value();
  ::google::api::expr::v1alpha1::Constant* mutable_value();
  void set_allocated_value(::google::api::expr::v1alpha1::Constant* value);
  void unsafe_arena_set_allocated_value(
      ::google::api::expr::v1alpha1::Constant* value);
  ::google::api::expr::v1alpha1::Constant* unsafe_arena_release_value();

  // @@protoc_insertion_point(class_scope:google.api.expr.v1alpha1.Reference)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::std::string> overload_id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::api::expr::v1alpha1::Constant* value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CheckedExpr

// map<int64, .google.api.expr.v1alpha1.Reference> reference_map = 2;
inline int CheckedExpr::reference_map_size() const {
  return reference_map_.size();
}
inline void CheckedExpr::clear_reference_map() {
  reference_map_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::int64, ::google::api::expr::v1alpha1::Reference >&
CheckedExpr::reference_map() const {
  // @@protoc_insertion_point(field_map:google.api.expr.v1alpha1.CheckedExpr.reference_map)
  return reference_map_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::int64, ::google::api::expr::v1alpha1::Reference >*
CheckedExpr::mutable_reference_map() {
  // @@protoc_insertion_point(field_mutable_map:google.api.expr.v1alpha1.CheckedExpr.reference_map)
  return reference_map_.MutableMap();
}

// map<int64, .google.api.expr.v1alpha1.Type> type_map = 3;
inline int CheckedExpr::type_map_size() const {
  return type_map_.size();
}
inline void CheckedExpr::clear_type_map() {
  type_map_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::int64, ::google::api::expr::v1alpha1::Type >&
CheckedExpr::type_map() const {
  // @@protoc_insertion_point(field_map:google.api.expr.v1alpha1.CheckedExpr.type_map)
  return type_map_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::int64, ::google::api::expr::v1alpha1::Type >*
CheckedExpr::mutable_type_map() {
  // @@protoc_insertion_point(field_mutable_map:google.api.expr.v1alpha1.CheckedExpr.type_map)
  return type_map_.MutableMap();
}

// .google.api.expr.v1alpha1.SourceInfo source_info = 5;
inline bool CheckedExpr::has_source_info() const {
  return this != internal_default_instance() && source_info_ != NULL;
}
inline const ::google::api::expr::v1alpha1::SourceInfo& CheckedExpr::_internal_source_info() const {
  return *source_info_;
}
inline const ::google::api::expr::v1alpha1::SourceInfo& CheckedExpr::source_info() const {
  const ::google::api::expr::v1alpha1::SourceInfo* p = source_info_;
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.CheckedExpr.source_info)
  return p != NULL ? *p : *reinterpret_cast<const ::google::api::expr::v1alpha1::SourceInfo*>(
      &::google::api::expr::v1alpha1::_SourceInfo_default_instance_);
}
inline ::google::api::expr::v1alpha1::SourceInfo* CheckedExpr::release_source_info() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.CheckedExpr.source_info)
  
  ::google::api::expr::v1alpha1::SourceInfo* temp = source_info_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  source_info_ = NULL;
  return temp;
}
inline ::google::api::expr::v1alpha1::SourceInfo* CheckedExpr::unsafe_arena_release_source_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1alpha1.CheckedExpr.source_info)
  
  ::google::api::expr::v1alpha1::SourceInfo* temp = source_info_;
  source_info_ = NULL;
  return temp;
}
inline ::google::api::expr::v1alpha1::SourceInfo* CheckedExpr::mutable_source_info() {
  
  if (source_info_ == NULL) {
    auto* p = CreateMaybeMessage<::google::api::expr::v1alpha1::SourceInfo>(GetArenaNoVirtual());
    source_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.CheckedExpr.source_info)
  return source_info_;
}
inline void CheckedExpr::set_allocated_source_info(::google::api::expr::v1alpha1::SourceInfo* source_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(source_info_);
  }
  if (source_info) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(source_info)->GetArena();
    if (message_arena != submessage_arena) {
      source_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, source_info, submessage_arena);
    }
    
  } else {
    
  }
  source_info_ = source_info;
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.CheckedExpr.source_info)
}

// .google.api.expr.v1alpha1.Expr expr = 4;
inline bool CheckedExpr::has_expr() const {
  return this != internal_default_instance() && expr_ != NULL;
}
inline const ::google::api::expr::v1alpha1::Expr& CheckedExpr::_internal_expr() const {
  return *expr_;
}
inline const ::google::api::expr::v1alpha1::Expr& CheckedExpr::expr() const {
  const ::google::api::expr::v1alpha1::Expr* p = expr_;
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.CheckedExpr.expr)
  return p != NULL ? *p : *reinterpret_cast<const ::google::api::expr::v1alpha1::Expr*>(
      &::google::api::expr::v1alpha1::_Expr_default_instance_);
}
inline ::google::api::expr::v1alpha1::Expr* CheckedExpr::release_expr() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.CheckedExpr.expr)
  
  ::google::api::expr::v1alpha1::Expr* temp = expr_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  expr_ = NULL;
  return temp;
}
inline ::google::api::expr::v1alpha1::Expr* CheckedExpr::unsafe_arena_release_expr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1alpha1.CheckedExpr.expr)
  
  ::google::api::expr::v1alpha1::Expr* temp = expr_;
  expr_ = NULL;
  return temp;
}
inline ::google::api::expr::v1alpha1::Expr* CheckedExpr::mutable_expr() {
  
  if (expr_ == NULL) {
    auto* p = CreateMaybeMessage<::google::api::expr::v1alpha1::Expr>(GetArenaNoVirtual());
    expr_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.CheckedExpr.expr)
  return expr_;
}
inline void CheckedExpr::set_allocated_expr(::google::api::expr::v1alpha1::Expr* expr) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(expr_);
  }
  if (expr) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(expr)->GetArena();
    if (message_arena != submessage_arena) {
      expr = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, expr, submessage_arena);
    }
    
  } else {
    
  }
  expr_ = expr;
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.CheckedExpr.expr)
}

// -------------------------------------------------------------------

// Type_ListType

// .google.api.expr.v1alpha1.Type elem_type = 1;
inline bool Type_ListType::has_elem_type() const {
  return this != internal_default_instance() && elem_type_ != NULL;
}
inline void Type_ListType::clear_elem_type() {
  if (GetArenaNoVirtual() == NULL && elem_type_ != NULL) {
    delete elem_type_;
  }
  elem_type_ = NULL;
}
inline const ::google::api::expr::v1alpha1::Type& Type_ListType::_internal_elem_type() const {
  return *elem_type_;
}
inline const ::google::api::expr::v1alpha1::Type& Type_ListType::elem_type() const {
  const ::google::api::expr::v1alpha1::Type* p = elem_type_;
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Type.ListType.elem_type)
  return p != NULL ? *p : *reinterpret_cast<const ::google::api::expr::v1alpha1::Type*>(
      &::google::api::expr::v1alpha1::_Type_default_instance_);
}
inline ::google::api::expr::v1alpha1::Type* Type_ListType::release_elem_type() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Type.ListType.elem_type)
  
  ::google::api::expr::v1alpha1::Type* temp = elem_type_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  elem_type_ = NULL;
  return temp;
}
inline ::google::api::expr::v1alpha1::Type* Type_ListType::unsafe_arena_release_elem_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1alpha1.Type.ListType.elem_type)
  
  ::google::api::expr::v1alpha1::Type* temp = elem_type_;
  elem_type_ = NULL;
  return temp;
}
inline ::google::api::expr::v1alpha1::Type* Type_ListType::mutable_elem_type() {
  
  if (elem_type_ == NULL) {
    auto* p = CreateMaybeMessage<::google::api::expr::v1alpha1::Type>(GetArenaNoVirtual());
    elem_type_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Type.ListType.elem_type)
  return elem_type_;
}
inline void Type_ListType::set_allocated_elem_type(::google::api::expr::v1alpha1::Type* elem_type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete elem_type_;
  }
  if (elem_type) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(elem_type);
    if (message_arena != submessage_arena) {
      elem_type = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, elem_type, submessage_arena);
    }
    
  } else {
    
  }
  elem_type_ = elem_type;
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Type.ListType.elem_type)
}

// -------------------------------------------------------------------

// Type_MapType

// .google.api.expr.v1alpha1.Type key_type = 1;
inline bool Type_MapType::has_key_type() const {
  return this != internal_default_instance() && key_type_ != NULL;
}
inline void Type_MapType::clear_key_type() {
  if (GetArenaNoVirtual() == NULL && key_type_ != NULL) {
    delete key_type_;
  }
  key_type_ = NULL;
}
inline const ::google::api::expr::v1alpha1::Type& Type_MapType::_internal_key_type() const {
  return *key_type_;
}
inline const ::google::api::expr::v1alpha1::Type& Type_MapType::key_type() const {
  const ::google::api::expr::v1alpha1::Type* p = key_type_;
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Type.MapType.key_type)
  return p != NULL ? *p : *reinterpret_cast<const ::google::api::expr::v1alpha1::Type*>(
      &::google::api::expr::v1alpha1::_Type_default_instance_);
}
inline ::google::api::expr::v1alpha1::Type* Type_MapType::release_key_type() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Type.MapType.key_type)
  
  ::google::api::expr::v1alpha1::Type* temp = key_type_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  key_type_ = NULL;
  return temp;
}
inline ::google::api::expr::v1alpha1::Type* Type_MapType::unsafe_arena_release_key_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1alpha1.Type.MapType.key_type)
  
  ::google::api::expr::v1alpha1::Type* temp = key_type_;
  key_type_ = NULL;
  return temp;
}
inline ::google::api::expr::v1alpha1::Type* Type_MapType::mutable_key_type() {
  
  if (key_type_ == NULL) {
    auto* p = CreateMaybeMessage<::google::api::expr::v1alpha1::Type>(GetArenaNoVirtual());
    key_type_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Type.MapType.key_type)
  return key_type_;
}
inline void Type_MapType::set_allocated_key_type(::google::api::expr::v1alpha1::Type* key_type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete key_type_;
  }
  if (key_type) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(key_type);
    if (message_arena != submessage_arena) {
      key_type = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, key_type, submessage_arena);
    }
    
  } else {
    
  }
  key_type_ = key_type;
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Type.MapType.key_type)
}

// .google.api.expr.v1alpha1.Type value_type = 2;
inline bool Type_MapType::has_value_type() const {
  return this != internal_default_instance() && value_type_ != NULL;
}
inline void Type_MapType::clear_value_type() {
  if (GetArenaNoVirtual() == NULL && value_type_ != NULL) {
    delete value_type_;
  }
  value_type_ = NULL;
}
inline const ::google::api::expr::v1alpha1::Type& Type_MapType::_internal_value_type() const {
  return *value_type_;
}
inline const ::google::api::expr::v1alpha1::Type& Type_MapType::value_type() const {
  const ::google::api::expr::v1alpha1::Type* p = value_type_;
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Type.MapType.value_type)
  return p != NULL ? *p : *reinterpret_cast<const ::google::api::expr::v1alpha1::Type*>(
      &::google::api::expr::v1alpha1::_Type_default_instance_);
}
inline ::google::api::expr::v1alpha1::Type* Type_MapType::release_value_type() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Type.MapType.value_type)
  
  ::google::api::expr::v1alpha1::Type* temp = value_type_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  value_type_ = NULL;
  return temp;
}
inline ::google::api::expr::v1alpha1::Type* Type_MapType::unsafe_arena_release_value_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1alpha1.Type.MapType.value_type)
  
  ::google::api::expr::v1alpha1::Type* temp = value_type_;
  value_type_ = NULL;
  return temp;
}
inline ::google::api::expr::v1alpha1::Type* Type_MapType::mutable_value_type() {
  
  if (value_type_ == NULL) {
    auto* p = CreateMaybeMessage<::google::api::expr::v1alpha1::Type>(GetArenaNoVirtual());
    value_type_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Type.MapType.value_type)
  return value_type_;
}
inline void Type_MapType::set_allocated_value_type(::google::api::expr::v1alpha1::Type* value_type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete value_type_;
  }
  if (value_type) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(value_type);
    if (message_arena != submessage_arena) {
      value_type = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_type, submessage_arena);
    }
    
  } else {
    
  }
  value_type_ = value_type;
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Type.MapType.value_type)
}

// -------------------------------------------------------------------

// Type_FunctionType

// .google.api.expr.v1alpha1.Type result_type = 1;
inline bool Type_FunctionType::has_result_type() const {
  return this != internal_default_instance() && result_type_ != NULL;
}
inline void Type_FunctionType::clear_result_type() {
  if (GetArenaNoVirtual() == NULL && result_type_ != NULL) {
    delete result_type_;
  }
  result_type_ = NULL;
}
inline const ::google::api::expr::v1alpha1::Type& Type_FunctionType::_internal_result_type() const {
  return *result_type_;
}
inline const ::google::api::expr::v1alpha1::Type& Type_FunctionType::result_type() const {
  const ::google::api::expr::v1alpha1::Type* p = result_type_;
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Type.FunctionType.result_type)
  return p != NULL ? *p : *reinterpret_cast<const ::google::api::expr::v1alpha1::Type*>(
      &::google::api::expr::v1alpha1::_Type_default_instance_);
}
inline ::google::api::expr::v1alpha1::Type* Type_FunctionType::release_result_type() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Type.FunctionType.result_type)
  
  ::google::api::expr::v1alpha1::Type* temp = result_type_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  result_type_ = NULL;
  return temp;
}
inline ::google::api::expr::v1alpha1::Type* Type_FunctionType::unsafe_arena_release_result_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1alpha1.Type.FunctionType.result_type)
  
  ::google::api::expr::v1alpha1::Type* temp = result_type_;
  result_type_ = NULL;
  return temp;
}
inline ::google::api::expr::v1alpha1::Type* Type_FunctionType::mutable_result_type() {
  
  if (result_type_ == NULL) {
    auto* p = CreateMaybeMessage<::google::api::expr::v1alpha1::Type>(GetArenaNoVirtual());
    result_type_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Type.FunctionType.result_type)
  return result_type_;
}
inline void Type_FunctionType::set_allocated_result_type(::google::api::expr::v1alpha1::Type* result_type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete result_type_;
  }
  if (result_type) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(result_type);
    if (message_arena != submessage_arena) {
      result_type = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, result_type, submessage_arena);
    }
    
  } else {
    
  }
  result_type_ = result_type;
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Type.FunctionType.result_type)
}

// repeated .google.api.expr.v1alpha1.Type arg_types = 2;
inline int Type_FunctionType::arg_types_size() const {
  return arg_types_.size();
}
inline void Type_FunctionType::clear_arg_types() {
  arg_types_.Clear();
}
inline ::google::api::expr::v1alpha1::Type* Type_FunctionType::mutable_arg_types(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Type.FunctionType.arg_types)
  return arg_types_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::Type >*
Type_FunctionType::mutable_arg_types() {
  // @@protoc_insertion_point(field_mutable_list:google.api.expr.v1alpha1.Type.FunctionType.arg_types)
  return &arg_types_;
}
inline const ::google::api::expr::v1alpha1::Type& Type_FunctionType::arg_types(int index) const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Type.FunctionType.arg_types)
  return arg_types_.Get(index);
}
inline ::google::api::expr::v1alpha1::Type* Type_FunctionType::add_arg_types() {
  // @@protoc_insertion_point(field_add:google.api.expr.v1alpha1.Type.FunctionType.arg_types)
  return arg_types_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::Type >&
Type_FunctionType::arg_types() const {
  // @@protoc_insertion_point(field_list:google.api.expr.v1alpha1.Type.FunctionType.arg_types)
  return arg_types_;
}

// -------------------------------------------------------------------

// Type_AbstractType

// string name = 1;
inline void Type_AbstractType::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Type_AbstractType::name() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Type.AbstractType.name)
  return name_.Get();
}
inline void Type_AbstractType::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Type.AbstractType.name)
}
#if LANG_CXX11
inline void Type_AbstractType::set_name(::std::string&& value) {
  
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.api.expr.v1alpha1.Type.AbstractType.name)
}
#endif
inline void Type_AbstractType::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.api.expr.v1alpha1.Type.AbstractType.name)
}
inline void Type_AbstractType::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.api.expr.v1alpha1.Type.AbstractType.name)
}
inline ::std::string* Type_AbstractType::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Type.AbstractType.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Type_AbstractType::release_name() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Type.AbstractType.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Type_AbstractType::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Type.AbstractType.name)
}
inline ::std::string* Type_AbstractType::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1alpha1.Type.AbstractType.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Type_AbstractType::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Type.AbstractType.name)
}

// repeated .google.api.expr.v1alpha1.Type parameter_types = 2;
inline int Type_AbstractType::parameter_types_size() const {
  return parameter_types_.size();
}
inline void Type_AbstractType::clear_parameter_types() {
  parameter_types_.Clear();
}
inline ::google::api::expr::v1alpha1::Type* Type_AbstractType::mutable_parameter_types(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Type.AbstractType.parameter_types)
  return parameter_types_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::Type >*
Type_AbstractType::mutable_parameter_types() {
  // @@protoc_insertion_point(field_mutable_list:google.api.expr.v1alpha1.Type.AbstractType.parameter_types)
  return &parameter_types_;
}
inline const ::google::api::expr::v1alpha1::Type& Type_AbstractType::parameter_types(int index) const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Type.AbstractType.parameter_types)
  return parameter_types_.Get(index);
}
inline ::google::api::expr::v1alpha1::Type* Type_AbstractType::add_parameter_types() {
  // @@protoc_insertion_point(field_add:google.api.expr.v1alpha1.Type.AbstractType.parameter_types)
  return parameter_types_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::Type >&
Type_AbstractType::parameter_types() const {
  // @@protoc_insertion_point(field_list:google.api.expr.v1alpha1.Type.AbstractType.parameter_types)
  return parameter_types_;
}

// -------------------------------------------------------------------

// Type

// .google.protobuf.Empty dyn = 1;
inline bool Type::has_dyn() const {
  return type_kind_case() == kDyn;
}
inline void Type::set_has_dyn() {
  _oneof_case_[0] = kDyn;
}
inline const ::google::protobuf::Empty& Type::_internal_dyn() const {
  return *type_kind_.dyn_;
}
inline ::google::protobuf::Empty* Type::release_dyn() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Type.dyn)
  if (has_dyn()) {
    clear_has_type_kind();
      ::google::protobuf::Empty* temp = type_kind_.dyn_;
    if (GetArenaNoVirtual() != NULL) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    type_kind_.dyn_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::protobuf::Empty& Type::dyn() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Type.dyn)
  return has_dyn()
      ? *type_kind_.dyn_
      : *reinterpret_cast< ::google::protobuf::Empty*>(&::google::protobuf::_Empty_default_instance_);
}
inline ::google::protobuf::Empty* Type::unsafe_arena_release_dyn() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1alpha1.Type.dyn)
  if (has_dyn()) {
    clear_has_type_kind();
    ::google::protobuf::Empty* temp = type_kind_.dyn_;
    type_kind_.dyn_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Type::unsafe_arena_set_allocated_dyn(::google::protobuf::Empty* dyn) {
  clear_type_kind();
  if (dyn) {
    set_has_dyn();
    type_kind_.dyn_ = dyn;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Type.dyn)
}
inline ::google::protobuf::Empty* Type::mutable_dyn() {
  if (!has_dyn()) {
    clear_type_kind();
    set_has_dyn();
    type_kind_.dyn_ = CreateMaybeMessage< ::google::protobuf::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Type.dyn)
  return type_kind_.dyn_;
}

// .google.protobuf.NullValue null = 2;
inline bool Type::has_null() const {
  return type_kind_case() == kNull;
}
inline void Type::set_has_null() {
  _oneof_case_[0] = kNull;
}
inline void Type::clear_null() {
  if (has_null()) {
    type_kind_.null_ = 0;
    clear_has_type_kind();
  }
}
inline ::google::protobuf::NullValue Type::null() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Type.null)
  if (has_null()) {
    return static_cast< ::google::protobuf::NullValue >(type_kind_.null_);
  }
  return static_cast< ::google::protobuf::NullValue >(0);
}
inline void Type::set_null(::google::protobuf::NullValue value) {
  if (!has_null()) {
    clear_type_kind();
    set_has_null();
  }
  type_kind_.null_ = value;
  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Type.null)
}

// .google.api.expr.v1alpha1.Type.PrimitiveType primitive = 3;
inline bool Type::has_primitive() const {
  return type_kind_case() == kPrimitive;
}
inline void Type::set_has_primitive() {
  _oneof_case_[0] = kPrimitive;
}
inline void Type::clear_primitive() {
  if (has_primitive()) {
    type_kind_.primitive_ = 0;
    clear_has_type_kind();
  }
}
inline ::google::api::expr::v1alpha1::Type_PrimitiveType Type::primitive() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Type.primitive)
  if (has_primitive()) {
    return static_cast< ::google::api::expr::v1alpha1::Type_PrimitiveType >(type_kind_.primitive_);
  }
  return static_cast< ::google::api::expr::v1alpha1::Type_PrimitiveType >(0);
}
inline void Type::set_primitive(::google::api::expr::v1alpha1::Type_PrimitiveType value) {
  if (!has_primitive()) {
    clear_type_kind();
    set_has_primitive();
  }
  type_kind_.primitive_ = value;
  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Type.primitive)
}

// .google.api.expr.v1alpha1.Type.PrimitiveType wrapper = 4;
inline bool Type::has_wrapper() const {
  return type_kind_case() == kWrapper;
}
inline void Type::set_has_wrapper() {
  _oneof_case_[0] = kWrapper;
}
inline void Type::clear_wrapper() {
  if (has_wrapper()) {
    type_kind_.wrapper_ = 0;
    clear_has_type_kind();
  }
}
inline ::google::api::expr::v1alpha1::Type_PrimitiveType Type::wrapper() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Type.wrapper)
  if (has_wrapper()) {
    return static_cast< ::google::api::expr::v1alpha1::Type_PrimitiveType >(type_kind_.wrapper_);
  }
  return static_cast< ::google::api::expr::v1alpha1::Type_PrimitiveType >(0);
}
inline void Type::set_wrapper(::google::api::expr::v1alpha1::Type_PrimitiveType value) {
  if (!has_wrapper()) {
    clear_type_kind();
    set_has_wrapper();
  }
  type_kind_.wrapper_ = value;
  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Type.wrapper)
}

// .google.api.expr.v1alpha1.Type.WellKnownType well_known = 5;
inline bool Type::has_well_known() const {
  return type_kind_case() == kWellKnown;
}
inline void Type::set_has_well_known() {
  _oneof_case_[0] = kWellKnown;
}
inline void Type::clear_well_known() {
  if (has_well_known()) {
    type_kind_.well_known_ = 0;
    clear_has_type_kind();
  }
}
inline ::google::api::expr::v1alpha1::Type_WellKnownType Type::well_known() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Type.well_known)
  if (has_well_known()) {
    return static_cast< ::google::api::expr::v1alpha1::Type_WellKnownType >(type_kind_.well_known_);
  }
  return static_cast< ::google::api::expr::v1alpha1::Type_WellKnownType >(0);
}
inline void Type::set_well_known(::google::api::expr::v1alpha1::Type_WellKnownType value) {
  if (!has_well_known()) {
    clear_type_kind();
    set_has_well_known();
  }
  type_kind_.well_known_ = value;
  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Type.well_known)
}

// .google.api.expr.v1alpha1.Type.ListType list_type = 6;
inline bool Type::has_list_type() const {
  return type_kind_case() == kListType;
}
inline void Type::set_has_list_type() {
  _oneof_case_[0] = kListType;
}
inline void Type::clear_list_type() {
  if (has_list_type()) {
    if (GetArenaNoVirtual() == NULL) {
      delete type_kind_.list_type_;
    }
    clear_has_type_kind();
  }
}
inline const ::google::api::expr::v1alpha1::Type_ListType& Type::_internal_list_type() const {
  return *type_kind_.list_type_;
}
inline ::google::api::expr::v1alpha1::Type_ListType* Type::release_list_type() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Type.list_type)
  if (has_list_type()) {
    clear_has_type_kind();
      ::google::api::expr::v1alpha1::Type_ListType* temp = type_kind_.list_type_;
    if (GetArenaNoVirtual() != NULL) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    type_kind_.list_type_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::api::expr::v1alpha1::Type_ListType& Type::list_type() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Type.list_type)
  return has_list_type()
      ? *type_kind_.list_type_
      : *reinterpret_cast< ::google::api::expr::v1alpha1::Type_ListType*>(&::google::api::expr::v1alpha1::_Type_ListType_default_instance_);
}
inline ::google::api::expr::v1alpha1::Type_ListType* Type::unsafe_arena_release_list_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1alpha1.Type.list_type)
  if (has_list_type()) {
    clear_has_type_kind();
    ::google::api::expr::v1alpha1::Type_ListType* temp = type_kind_.list_type_;
    type_kind_.list_type_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Type::unsafe_arena_set_allocated_list_type(::google::api::expr::v1alpha1::Type_ListType* list_type) {
  clear_type_kind();
  if (list_type) {
    set_has_list_type();
    type_kind_.list_type_ = list_type;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Type.list_type)
}
inline ::google::api::expr::v1alpha1::Type_ListType* Type::mutable_list_type() {
  if (!has_list_type()) {
    clear_type_kind();
    set_has_list_type();
    type_kind_.list_type_ = CreateMaybeMessage< ::google::api::expr::v1alpha1::Type_ListType >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Type.list_type)
  return type_kind_.list_type_;
}

// .google.api.expr.v1alpha1.Type.MapType map_type = 7;
inline bool Type::has_map_type() const {
  return type_kind_case() == kMapType;
}
inline void Type::set_has_map_type() {
  _oneof_case_[0] = kMapType;
}
inline void Type::clear_map_type() {
  if (has_map_type()) {
    if (GetArenaNoVirtual() == NULL) {
      delete type_kind_.map_type_;
    }
    clear_has_type_kind();
  }
}
inline const ::google::api::expr::v1alpha1::Type_MapType& Type::_internal_map_type() const {
  return *type_kind_.map_type_;
}
inline ::google::api::expr::v1alpha1::Type_MapType* Type::release_map_type() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Type.map_type)
  if (has_map_type()) {
    clear_has_type_kind();
      ::google::api::expr::v1alpha1::Type_MapType* temp = type_kind_.map_type_;
    if (GetArenaNoVirtual() != NULL) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    type_kind_.map_type_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::api::expr::v1alpha1::Type_MapType& Type::map_type() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Type.map_type)
  return has_map_type()
      ? *type_kind_.map_type_
      : *reinterpret_cast< ::google::api::expr::v1alpha1::Type_MapType*>(&::google::api::expr::v1alpha1::_Type_MapType_default_instance_);
}
inline ::google::api::expr::v1alpha1::Type_MapType* Type::unsafe_arena_release_map_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1alpha1.Type.map_type)
  if (has_map_type()) {
    clear_has_type_kind();
    ::google::api::expr::v1alpha1::Type_MapType* temp = type_kind_.map_type_;
    type_kind_.map_type_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Type::unsafe_arena_set_allocated_map_type(::google::api::expr::v1alpha1::Type_MapType* map_type) {
  clear_type_kind();
  if (map_type) {
    set_has_map_type();
    type_kind_.map_type_ = map_type;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Type.map_type)
}
inline ::google::api::expr::v1alpha1::Type_MapType* Type::mutable_map_type() {
  if (!has_map_type()) {
    clear_type_kind();
    set_has_map_type();
    type_kind_.map_type_ = CreateMaybeMessage< ::google::api::expr::v1alpha1::Type_MapType >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Type.map_type)
  return type_kind_.map_type_;
}

// .google.api.expr.v1alpha1.Type.FunctionType function = 8;
inline bool Type::has_function() const {
  return type_kind_case() == kFunction;
}
inline void Type::set_has_function() {
  _oneof_case_[0] = kFunction;
}
inline void Type::clear_function() {
  if (has_function()) {
    if (GetArenaNoVirtual() == NULL) {
      delete type_kind_.function_;
    }
    clear_has_type_kind();
  }
}
inline const ::google::api::expr::v1alpha1::Type_FunctionType& Type::_internal_function() const {
  return *type_kind_.function_;
}
inline ::google::api::expr::v1alpha1::Type_FunctionType* Type::release_function() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Type.function)
  if (has_function()) {
    clear_has_type_kind();
      ::google::api::expr::v1alpha1::Type_FunctionType* temp = type_kind_.function_;
    if (GetArenaNoVirtual() != NULL) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    type_kind_.function_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::api::expr::v1alpha1::Type_FunctionType& Type::function() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Type.function)
  return has_function()
      ? *type_kind_.function_
      : *reinterpret_cast< ::google::api::expr::v1alpha1::Type_FunctionType*>(&::google::api::expr::v1alpha1::_Type_FunctionType_default_instance_);
}
inline ::google::api::expr::v1alpha1::Type_FunctionType* Type::unsafe_arena_release_function() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1alpha1.Type.function)
  if (has_function()) {
    clear_has_type_kind();
    ::google::api::expr::v1alpha1::Type_FunctionType* temp = type_kind_.function_;
    type_kind_.function_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Type::unsafe_arena_set_allocated_function(::google::api::expr::v1alpha1::Type_FunctionType* function) {
  clear_type_kind();
  if (function) {
    set_has_function();
    type_kind_.function_ = function;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Type.function)
}
inline ::google::api::expr::v1alpha1::Type_FunctionType* Type::mutable_function() {
  if (!has_function()) {
    clear_type_kind();
    set_has_function();
    type_kind_.function_ = CreateMaybeMessage< ::google::api::expr::v1alpha1::Type_FunctionType >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Type.function)
  return type_kind_.function_;
}

// string message_type = 9;
inline bool Type::has_message_type() const {
  return type_kind_case() == kMessageType;
}
inline void Type::set_has_message_type() {
  _oneof_case_[0] = kMessageType;
}
inline void Type::clear_message_type() {
  if (has_message_type()) {
    type_kind_.message_type_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
    clear_has_type_kind();
  }
}
inline const ::std::string& Type::message_type() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Type.message_type)
  if (has_message_type()) {
    return type_kind_.message_type_.Get();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Type::set_message_type(const ::std::string& value) {
  if (!has_message_type()) {
    clear_type_kind();
    set_has_message_type();
    type_kind_.message_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  type_kind_.message_type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Type.message_type)
}
#if LANG_CXX11
inline void Type::set_message_type(::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Type.message_type)
  if (!has_message_type()) {
    clear_type_kind();
    set_has_message_type();
    type_kind_.message_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  type_kind_.message_type_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.api.expr.v1alpha1.Type.message_type)
}
#endif
inline void Type::set_message_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_message_type()) {
    clear_type_kind();
    set_has_message_type();
    type_kind_.message_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  type_kind_.message_type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.api.expr.v1alpha1.Type.message_type)
}
inline void Type::set_message_type(const char* value,
                             size_t size) {
  if (!has_message_type()) {
    clear_type_kind();
    set_has_message_type();
    type_kind_.message_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  type_kind_.message_type_.Set(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.api.expr.v1alpha1.Type.message_type)
}
inline ::std::string* Type::mutable_message_type() {
  if (!has_message_type()) {
    clear_type_kind();
    set_has_message_type();
    type_kind_.message_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return type_kind_.message_type_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Type.message_type)
}
inline ::std::string* Type::release_message_type() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Type.message_type)
  if (has_message_type()) {
    clear_has_type_kind();
    return type_kind_.message_type_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
  } else {
    return NULL;
  }
}
inline void Type::set_allocated_message_type(::std::string* message_type) {
  if (!has_message_type()) {
    type_kind_.message_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_type_kind();
  if (message_type != NULL) {
    set_has_message_type();
    type_kind_.message_type_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message_type,
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Type.message_type)
}
inline ::std::string* Type::unsafe_arena_release_message_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1alpha1.Type.message_type)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (has_message_type()) {
    clear_has_type_kind();
    return type_kind_.message_type_.UnsafeArenaRelease(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  } else {
    return NULL;
  }
}
inline void Type::unsafe_arena_set_allocated_message_type(::std::string* message_type) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (!has_message_type()) {
    type_kind_.message_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_type_kind();
  if (message_type) {
    set_has_message_type();
    type_kind_.message_type_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message_type, GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Type.message_type)
}

// string type_param = 10;
inline bool Type::has_type_param() const {
  return type_kind_case() == kTypeParam;
}
inline void Type::set_has_type_param() {
  _oneof_case_[0] = kTypeParam;
}
inline void Type::clear_type_param() {
  if (has_type_param()) {
    type_kind_.type_param_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
    clear_has_type_kind();
  }
}
inline const ::std::string& Type::type_param() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Type.type_param)
  if (has_type_param()) {
    return type_kind_.type_param_.Get();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Type::set_type_param(const ::std::string& value) {
  if (!has_type_param()) {
    clear_type_kind();
    set_has_type_param();
    type_kind_.type_param_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  type_kind_.type_param_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Type.type_param)
}
#if LANG_CXX11
inline void Type::set_type_param(::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Type.type_param)
  if (!has_type_param()) {
    clear_type_kind();
    set_has_type_param();
    type_kind_.type_param_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  type_kind_.type_param_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.api.expr.v1alpha1.Type.type_param)
}
#endif
inline void Type::set_type_param(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_type_param()) {
    clear_type_kind();
    set_has_type_param();
    type_kind_.type_param_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  type_kind_.type_param_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.api.expr.v1alpha1.Type.type_param)
}
inline void Type::set_type_param(const char* value,
                             size_t size) {
  if (!has_type_param()) {
    clear_type_kind();
    set_has_type_param();
    type_kind_.type_param_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  type_kind_.type_param_.Set(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.api.expr.v1alpha1.Type.type_param)
}
inline ::std::string* Type::mutable_type_param() {
  if (!has_type_param()) {
    clear_type_kind();
    set_has_type_param();
    type_kind_.type_param_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return type_kind_.type_param_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Type.type_param)
}
inline ::std::string* Type::release_type_param() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Type.type_param)
  if (has_type_param()) {
    clear_has_type_kind();
    return type_kind_.type_param_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
  } else {
    return NULL;
  }
}
inline void Type::set_allocated_type_param(::std::string* type_param) {
  if (!has_type_param()) {
    type_kind_.type_param_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_type_kind();
  if (type_param != NULL) {
    set_has_type_param();
    type_kind_.type_param_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type_param,
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Type.type_param)
}
inline ::std::string* Type::unsafe_arena_release_type_param() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1alpha1.Type.type_param)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (has_type_param()) {
    clear_has_type_kind();
    return type_kind_.type_param_.UnsafeArenaRelease(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  } else {
    return NULL;
  }
}
inline void Type::unsafe_arena_set_allocated_type_param(::std::string* type_param) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (!has_type_param()) {
    type_kind_.type_param_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_type_kind();
  if (type_param) {
    set_has_type_param();
    type_kind_.type_param_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type_param, GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Type.type_param)
}

// .google.api.expr.v1alpha1.Type type = 11;
inline bool Type::has_type() const {
  return type_kind_case() == kType;
}
inline void Type::set_has_type() {
  _oneof_case_[0] = kType;
}
inline void Type::clear_type() {
  if (has_type()) {
    if (GetArenaNoVirtual() == NULL) {
      delete type_kind_.type_;
    }
    clear_has_type_kind();
  }
}
inline const ::google::api::expr::v1alpha1::Type& Type::_internal_type() const {
  return *type_kind_.type_;
}
inline ::google::api::expr::v1alpha1::Type* Type::release_type() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Type.type)
  if (has_type()) {
    clear_has_type_kind();
      ::google::api::expr::v1alpha1::Type* temp = type_kind_.type_;
    if (GetArenaNoVirtual() != NULL) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    type_kind_.type_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::api::expr::v1alpha1::Type& Type::type() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Type.type)
  return has_type()
      ? *type_kind_.type_
      : *reinterpret_cast< ::google::api::expr::v1alpha1::Type*>(&::google::api::expr::v1alpha1::_Type_default_instance_);
}
inline ::google::api::expr::v1alpha1::Type* Type::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1alpha1.Type.type)
  if (has_type()) {
    clear_has_type_kind();
    ::google::api::expr::v1alpha1::Type* temp = type_kind_.type_;
    type_kind_.type_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Type::unsafe_arena_set_allocated_type(::google::api::expr::v1alpha1::Type* type) {
  clear_type_kind();
  if (type) {
    set_has_type();
    type_kind_.type_ = type;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Type.type)
}
inline ::google::api::expr::v1alpha1::Type* Type::mutable_type() {
  if (!has_type()) {
    clear_type_kind();
    set_has_type();
    type_kind_.type_ = CreateMaybeMessage< ::google::api::expr::v1alpha1::Type >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Type.type)
  return type_kind_.type_;
}

// .google.protobuf.Empty error = 12;
inline bool Type::has_error() const {
  return type_kind_case() == kError;
}
inline void Type::set_has_error() {
  _oneof_case_[0] = kError;
}
inline const ::google::protobuf::Empty& Type::_internal_error() const {
  return *type_kind_.error_;
}
inline ::google::protobuf::Empty* Type::release_error() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Type.error)
  if (has_error()) {
    clear_has_type_kind();
      ::google::protobuf::Empty* temp = type_kind_.error_;
    if (GetArenaNoVirtual() != NULL) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    type_kind_.error_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::protobuf::Empty& Type::error() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Type.error)
  return has_error()
      ? *type_kind_.error_
      : *reinterpret_cast< ::google::protobuf::Empty*>(&::google::protobuf::_Empty_default_instance_);
}
inline ::google::protobuf::Empty* Type::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1alpha1.Type.error)
  if (has_error()) {
    clear_has_type_kind();
    ::google::protobuf::Empty* temp = type_kind_.error_;
    type_kind_.error_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Type::unsafe_arena_set_allocated_error(::google::protobuf::Empty* error) {
  clear_type_kind();
  if (error) {
    set_has_error();
    type_kind_.error_ = error;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Type.error)
}
inline ::google::protobuf::Empty* Type::mutable_error() {
  if (!has_error()) {
    clear_type_kind();
    set_has_error();
    type_kind_.error_ = CreateMaybeMessage< ::google::protobuf::Empty >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Type.error)
  return type_kind_.error_;
}

// .google.api.expr.v1alpha1.Type.AbstractType abstract_type = 14;
inline bool Type::has_abstract_type() const {
  return type_kind_case() == kAbstractType;
}
inline void Type::set_has_abstract_type() {
  _oneof_case_[0] = kAbstractType;
}
inline void Type::clear_abstract_type() {
  if (has_abstract_type()) {
    if (GetArenaNoVirtual() == NULL) {
      delete type_kind_.abstract_type_;
    }
    clear_has_type_kind();
  }
}
inline const ::google::api::expr::v1alpha1::Type_AbstractType& Type::_internal_abstract_type() const {
  return *type_kind_.abstract_type_;
}
inline ::google::api::expr::v1alpha1::Type_AbstractType* Type::release_abstract_type() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Type.abstract_type)
  if (has_abstract_type()) {
    clear_has_type_kind();
      ::google::api::expr::v1alpha1::Type_AbstractType* temp = type_kind_.abstract_type_;
    if (GetArenaNoVirtual() != NULL) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    type_kind_.abstract_type_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::api::expr::v1alpha1::Type_AbstractType& Type::abstract_type() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Type.abstract_type)
  return has_abstract_type()
      ? *type_kind_.abstract_type_
      : *reinterpret_cast< ::google::api::expr::v1alpha1::Type_AbstractType*>(&::google::api::expr::v1alpha1::_Type_AbstractType_default_instance_);
}
inline ::google::api::expr::v1alpha1::Type_AbstractType* Type::unsafe_arena_release_abstract_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1alpha1.Type.abstract_type)
  if (has_abstract_type()) {
    clear_has_type_kind();
    ::google::api::expr::v1alpha1::Type_AbstractType* temp = type_kind_.abstract_type_;
    type_kind_.abstract_type_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Type::unsafe_arena_set_allocated_abstract_type(::google::api::expr::v1alpha1::Type_AbstractType* abstract_type) {
  clear_type_kind();
  if (abstract_type) {
    set_has_abstract_type();
    type_kind_.abstract_type_ = abstract_type;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Type.abstract_type)
}
inline ::google::api::expr::v1alpha1::Type_AbstractType* Type::mutable_abstract_type() {
  if (!has_abstract_type()) {
    clear_type_kind();
    set_has_abstract_type();
    type_kind_.abstract_type_ = CreateMaybeMessage< ::google::api::expr::v1alpha1::Type_AbstractType >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Type.abstract_type)
  return type_kind_.abstract_type_;
}

inline bool Type::has_type_kind() const {
  return type_kind_case() != TYPE_KIND_NOT_SET;
}
inline void Type::clear_has_type_kind() {
  _oneof_case_[0] = TYPE_KIND_NOT_SET;
}
inline Type::TypeKindCase Type::type_kind_case() const {
  return Type::TypeKindCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Decl_IdentDecl

// .google.api.expr.v1alpha1.Type type = 1;
inline bool Decl_IdentDecl::has_type() const {
  return this != internal_default_instance() && type_ != NULL;
}
inline void Decl_IdentDecl::clear_type() {
  if (GetArenaNoVirtual() == NULL && type_ != NULL) {
    delete type_;
  }
  type_ = NULL;
}
inline const ::google::api::expr::v1alpha1::Type& Decl_IdentDecl::_internal_type() const {
  return *type_;
}
inline const ::google::api::expr::v1alpha1::Type& Decl_IdentDecl::type() const {
  const ::google::api::expr::v1alpha1::Type* p = type_;
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Decl.IdentDecl.type)
  return p != NULL ? *p : *reinterpret_cast<const ::google::api::expr::v1alpha1::Type*>(
      &::google::api::expr::v1alpha1::_Type_default_instance_);
}
inline ::google::api::expr::v1alpha1::Type* Decl_IdentDecl::release_type() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Decl.IdentDecl.type)
  
  ::google::api::expr::v1alpha1::Type* temp = type_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  type_ = NULL;
  return temp;
}
inline ::google::api::expr::v1alpha1::Type* Decl_IdentDecl::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1alpha1.Decl.IdentDecl.type)
  
  ::google::api::expr::v1alpha1::Type* temp = type_;
  type_ = NULL;
  return temp;
}
inline ::google::api::expr::v1alpha1::Type* Decl_IdentDecl::mutable_type() {
  
  if (type_ == NULL) {
    auto* p = CreateMaybeMessage<::google::api::expr::v1alpha1::Type>(GetArenaNoVirtual());
    type_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Decl.IdentDecl.type)
  return type_;
}
inline void Decl_IdentDecl::set_allocated_type(::google::api::expr::v1alpha1::Type* type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete type_;
  }
  if (type) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(type);
    if (message_arena != submessage_arena) {
      type = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    
  } else {
    
  }
  type_ = type;
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Decl.IdentDecl.type)
}

// .google.api.expr.v1alpha1.Constant value = 2;
inline bool Decl_IdentDecl::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
inline const ::google::api::expr::v1alpha1::Constant& Decl_IdentDecl::_internal_value() const {
  return *value_;
}
inline const ::google::api::expr::v1alpha1::Constant& Decl_IdentDecl::value() const {
  const ::google::api::expr::v1alpha1::Constant* p = value_;
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Decl.IdentDecl.value)
  return p != NULL ? *p : *reinterpret_cast<const ::google::api::expr::v1alpha1::Constant*>(
      &::google::api::expr::v1alpha1::_Constant_default_instance_);
}
inline ::google::api::expr::v1alpha1::Constant* Decl_IdentDecl::release_value() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Decl.IdentDecl.value)
  
  ::google::api::expr::v1alpha1::Constant* temp = value_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  value_ = NULL;
  return temp;
}
inline ::google::api::expr::v1alpha1::Constant* Decl_IdentDecl::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1alpha1.Decl.IdentDecl.value)
  
  ::google::api::expr::v1alpha1::Constant* temp = value_;
  value_ = NULL;
  return temp;
}
inline ::google::api::expr::v1alpha1::Constant* Decl_IdentDecl::mutable_value() {
  
  if (value_ == NULL) {
    auto* p = CreateMaybeMessage<::google::api::expr::v1alpha1::Constant>(GetArenaNoVirtual());
    value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Decl.IdentDecl.value)
  return value_;
}
inline void Decl_IdentDecl::set_allocated_value(::google::api::expr::v1alpha1::Constant* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_);
  }
  if (value) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Decl.IdentDecl.value)
}

// string doc = 3;
inline void Decl_IdentDecl::clear_doc() {
  doc_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Decl_IdentDecl::doc() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Decl.IdentDecl.doc)
  return doc_.Get();
}
inline void Decl_IdentDecl::set_doc(const ::std::string& value) {
  
  doc_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Decl.IdentDecl.doc)
}
#if LANG_CXX11
inline void Decl_IdentDecl::set_doc(::std::string&& value) {
  
  doc_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.api.expr.v1alpha1.Decl.IdentDecl.doc)
}
#endif
inline void Decl_IdentDecl::set_doc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  doc_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.api.expr.v1alpha1.Decl.IdentDecl.doc)
}
inline void Decl_IdentDecl::set_doc(const char* value,
    size_t size) {
  
  doc_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.api.expr.v1alpha1.Decl.IdentDecl.doc)
}
inline ::std::string* Decl_IdentDecl::mutable_doc() {
  
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Decl.IdentDecl.doc)
  return doc_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Decl_IdentDecl::release_doc() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Decl.IdentDecl.doc)
  
  return doc_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Decl_IdentDecl::set_allocated_doc(::std::string* doc) {
  if (doc != NULL) {
    
  } else {
    
  }
  doc_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), doc,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Decl.IdentDecl.doc)
}
inline ::std::string* Decl_IdentDecl::unsafe_arena_release_doc() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1alpha1.Decl.IdentDecl.doc)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return doc_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Decl_IdentDecl::unsafe_arena_set_allocated_doc(
    ::std::string* doc) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (doc != NULL) {
    
  } else {
    
  }
  doc_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      doc, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Decl.IdentDecl.doc)
}

// -------------------------------------------------------------------

// Decl_FunctionDecl_Overload

// string overload_id = 1;
inline void Decl_FunctionDecl_Overload::clear_overload_id() {
  overload_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Decl_FunctionDecl_Overload::overload_id() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.overload_id)
  return overload_id_.Get();
}
inline void Decl_FunctionDecl_Overload::set_overload_id(const ::std::string& value) {
  
  overload_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.overload_id)
}
#if LANG_CXX11
inline void Decl_FunctionDecl_Overload::set_overload_id(::std::string&& value) {
  
  overload_id_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.overload_id)
}
#endif
inline void Decl_FunctionDecl_Overload::set_overload_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  overload_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.overload_id)
}
inline void Decl_FunctionDecl_Overload::set_overload_id(const char* value,
    size_t size) {
  
  overload_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.overload_id)
}
inline ::std::string* Decl_FunctionDecl_Overload::mutable_overload_id() {
  
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.overload_id)
  return overload_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Decl_FunctionDecl_Overload::release_overload_id() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.overload_id)
  
  return overload_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Decl_FunctionDecl_Overload::set_allocated_overload_id(::std::string* overload_id) {
  if (overload_id != NULL) {
    
  } else {
    
  }
  overload_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), overload_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.overload_id)
}
inline ::std::string* Decl_FunctionDecl_Overload::unsafe_arena_release_overload_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.overload_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return overload_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Decl_FunctionDecl_Overload::unsafe_arena_set_allocated_overload_id(
    ::std::string* overload_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (overload_id != NULL) {
    
  } else {
    
  }
  overload_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      overload_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.overload_id)
}

// repeated .google.api.expr.v1alpha1.Type params = 2;
inline int Decl_FunctionDecl_Overload::params_size() const {
  return params_.size();
}
inline void Decl_FunctionDecl_Overload::clear_params() {
  params_.Clear();
}
inline ::google::api::expr::v1alpha1::Type* Decl_FunctionDecl_Overload::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.params)
  return params_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::Type >*
Decl_FunctionDecl_Overload::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.params)
  return &params_;
}
inline const ::google::api::expr::v1alpha1::Type& Decl_FunctionDecl_Overload::params(int index) const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.params)
  return params_.Get(index);
}
inline ::google::api::expr::v1alpha1::Type* Decl_FunctionDecl_Overload::add_params() {
  // @@protoc_insertion_point(field_add:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.params)
  return params_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::Type >&
Decl_FunctionDecl_Overload::params() const {
  // @@protoc_insertion_point(field_list:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.params)
  return params_;
}

// repeated string type_params = 3;
inline int Decl_FunctionDecl_Overload::type_params_size() const {
  return type_params_.size();
}
inline void Decl_FunctionDecl_Overload::clear_type_params() {
  type_params_.Clear();
}
inline const ::std::string& Decl_FunctionDecl_Overload::type_params(int index) const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.type_params)
  return type_params_.Get(index);
}
inline ::std::string* Decl_FunctionDecl_Overload::mutable_type_params(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.type_params)
  return type_params_.Mutable(index);
}
inline void Decl_FunctionDecl_Overload::set_type_params(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.type_params)
  type_params_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Decl_FunctionDecl_Overload::set_type_params(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.type_params)
  type_params_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Decl_FunctionDecl_Overload::set_type_params(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  type_params_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.type_params)
}
inline void Decl_FunctionDecl_Overload::set_type_params(int index, const char* value, size_t size) {
  type_params_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.type_params)
}
inline ::std::string* Decl_FunctionDecl_Overload::add_type_params() {
  // @@protoc_insertion_point(field_add_mutable:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.type_params)
  return type_params_.Add();
}
inline void Decl_FunctionDecl_Overload::add_type_params(const ::std::string& value) {
  type_params_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.type_params)
}
#if LANG_CXX11
inline void Decl_FunctionDecl_Overload::add_type_params(::std::string&& value) {
  type_params_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.type_params)
}
#endif
inline void Decl_FunctionDecl_Overload::add_type_params(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  type_params_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.type_params)
}
inline void Decl_FunctionDecl_Overload::add_type_params(const char* value, size_t size) {
  type_params_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.type_params)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Decl_FunctionDecl_Overload::type_params() const {
  // @@protoc_insertion_point(field_list:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.type_params)
  return type_params_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Decl_FunctionDecl_Overload::mutable_type_params() {
  // @@protoc_insertion_point(field_mutable_list:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.type_params)
  return &type_params_;
}

// .google.api.expr.v1alpha1.Type result_type = 4;
inline bool Decl_FunctionDecl_Overload::has_result_type() const {
  return this != internal_default_instance() && result_type_ != NULL;
}
inline void Decl_FunctionDecl_Overload::clear_result_type() {
  if (GetArenaNoVirtual() == NULL && result_type_ != NULL) {
    delete result_type_;
  }
  result_type_ = NULL;
}
inline const ::google::api::expr::v1alpha1::Type& Decl_FunctionDecl_Overload::_internal_result_type() const {
  return *result_type_;
}
inline const ::google::api::expr::v1alpha1::Type& Decl_FunctionDecl_Overload::result_type() const {
  const ::google::api::expr::v1alpha1::Type* p = result_type_;
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.result_type)
  return p != NULL ? *p : *reinterpret_cast<const ::google::api::expr::v1alpha1::Type*>(
      &::google::api::expr::v1alpha1::_Type_default_instance_);
}
inline ::google::api::expr::v1alpha1::Type* Decl_FunctionDecl_Overload::release_result_type() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.result_type)
  
  ::google::api::expr::v1alpha1::Type* temp = result_type_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  result_type_ = NULL;
  return temp;
}
inline ::google::api::expr::v1alpha1::Type* Decl_FunctionDecl_Overload::unsafe_arena_release_result_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.result_type)
  
  ::google::api::expr::v1alpha1::Type* temp = result_type_;
  result_type_ = NULL;
  return temp;
}
inline ::google::api::expr::v1alpha1::Type* Decl_FunctionDecl_Overload::mutable_result_type() {
  
  if (result_type_ == NULL) {
    auto* p = CreateMaybeMessage<::google::api::expr::v1alpha1::Type>(GetArenaNoVirtual());
    result_type_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.result_type)
  return result_type_;
}
inline void Decl_FunctionDecl_Overload::set_allocated_result_type(::google::api::expr::v1alpha1::Type* result_type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete result_type_;
  }
  if (result_type) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(result_type);
    if (message_arena != submessage_arena) {
      result_type = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, result_type, submessage_arena);
    }
    
  } else {
    
  }
  result_type_ = result_type;
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.result_type)
}

// bool is_instance_function = 5;
inline void Decl_FunctionDecl_Overload::clear_is_instance_function() {
  is_instance_function_ = false;
}
inline bool Decl_FunctionDecl_Overload::is_instance_function() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.is_instance_function)
  return is_instance_function_;
}
inline void Decl_FunctionDecl_Overload::set_is_instance_function(bool value) {
  
  is_instance_function_ = value;
  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.is_instance_function)
}

// string doc = 6;
inline void Decl_FunctionDecl_Overload::clear_doc() {
  doc_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Decl_FunctionDecl_Overload::doc() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.doc)
  return doc_.Get();
}
inline void Decl_FunctionDecl_Overload::set_doc(const ::std::string& value) {
  
  doc_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.doc)
}
#if LANG_CXX11
inline void Decl_FunctionDecl_Overload::set_doc(::std::string&& value) {
  
  doc_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.doc)
}
#endif
inline void Decl_FunctionDecl_Overload::set_doc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  doc_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.doc)
}
inline void Decl_FunctionDecl_Overload::set_doc(const char* value,
    size_t size) {
  
  doc_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.doc)
}
inline ::std::string* Decl_FunctionDecl_Overload::mutable_doc() {
  
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.doc)
  return doc_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Decl_FunctionDecl_Overload::release_doc() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.doc)
  
  return doc_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Decl_FunctionDecl_Overload::set_allocated_doc(::std::string* doc) {
  if (doc != NULL) {
    
  } else {
    
  }
  doc_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), doc,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.doc)
}
inline ::std::string* Decl_FunctionDecl_Overload::unsafe_arena_release_doc() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.doc)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return doc_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Decl_FunctionDecl_Overload::unsafe_arena_set_allocated_doc(
    ::std::string* doc) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (doc != NULL) {
    
  } else {
    
  }
  doc_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      doc, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.doc)
}

// -------------------------------------------------------------------

// Decl_FunctionDecl

// repeated .google.api.expr.v1alpha1.Decl.FunctionDecl.Overload overloads = 1;
inline int Decl_FunctionDecl::overloads_size() const {
  return overloads_.size();
}
inline void Decl_FunctionDecl::clear_overloads() {
  overloads_.Clear();
}
inline ::google::api::expr::v1alpha1::Decl_FunctionDecl_Overload* Decl_FunctionDecl::mutable_overloads(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Decl.FunctionDecl.overloads)
  return overloads_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::Decl_FunctionDecl_Overload >*
Decl_FunctionDecl::mutable_overloads() {
  // @@protoc_insertion_point(field_mutable_list:google.api.expr.v1alpha1.Decl.FunctionDecl.overloads)
  return &overloads_;
}
inline const ::google::api::expr::v1alpha1::Decl_FunctionDecl_Overload& Decl_FunctionDecl::overloads(int index) const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Decl.FunctionDecl.overloads)
  return overloads_.Get(index);
}
inline ::google::api::expr::v1alpha1::Decl_FunctionDecl_Overload* Decl_FunctionDecl::add_overloads() {
  // @@protoc_insertion_point(field_add:google.api.expr.v1alpha1.Decl.FunctionDecl.overloads)
  return overloads_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1alpha1::Decl_FunctionDecl_Overload >&
Decl_FunctionDecl::overloads() const {
  // @@protoc_insertion_point(field_list:google.api.expr.v1alpha1.Decl.FunctionDecl.overloads)
  return overloads_;
}

// -------------------------------------------------------------------

// Decl

// string name = 1;
inline void Decl::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Decl::name() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Decl.name)
  return name_.Get();
}
inline void Decl::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Decl.name)
}
#if LANG_CXX11
inline void Decl::set_name(::std::string&& value) {
  
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.api.expr.v1alpha1.Decl.name)
}
#endif
inline void Decl::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.api.expr.v1alpha1.Decl.name)
}
inline void Decl::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.api.expr.v1alpha1.Decl.name)
}
inline ::std::string* Decl::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Decl.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Decl::release_name() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Decl.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Decl::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Decl.name)
}
inline ::std::string* Decl::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1alpha1.Decl.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Decl::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Decl.name)
}

// .google.api.expr.v1alpha1.Decl.IdentDecl ident = 2;
inline bool Decl::has_ident() const {
  return decl_kind_case() == kIdent;
}
inline void Decl::set_has_ident() {
  _oneof_case_[0] = kIdent;
}
inline void Decl::clear_ident() {
  if (has_ident()) {
    if (GetArenaNoVirtual() == NULL) {
      delete decl_kind_.ident_;
    }
    clear_has_decl_kind();
  }
}
inline const ::google::api::expr::v1alpha1::Decl_IdentDecl& Decl::_internal_ident() const {
  return *decl_kind_.ident_;
}
inline ::google::api::expr::v1alpha1::Decl_IdentDecl* Decl::release_ident() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Decl.ident)
  if (has_ident()) {
    clear_has_decl_kind();
      ::google::api::expr::v1alpha1::Decl_IdentDecl* temp = decl_kind_.ident_;
    if (GetArenaNoVirtual() != NULL) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    decl_kind_.ident_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::api::expr::v1alpha1::Decl_IdentDecl& Decl::ident() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Decl.ident)
  return has_ident()
      ? *decl_kind_.ident_
      : *reinterpret_cast< ::google::api::expr::v1alpha1::Decl_IdentDecl*>(&::google::api::expr::v1alpha1::_Decl_IdentDecl_default_instance_);
}
inline ::google::api::expr::v1alpha1::Decl_IdentDecl* Decl::unsafe_arena_release_ident() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1alpha1.Decl.ident)
  if (has_ident()) {
    clear_has_decl_kind();
    ::google::api::expr::v1alpha1::Decl_IdentDecl* temp = decl_kind_.ident_;
    decl_kind_.ident_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Decl::unsafe_arena_set_allocated_ident(::google::api::expr::v1alpha1::Decl_IdentDecl* ident) {
  clear_decl_kind();
  if (ident) {
    set_has_ident();
    decl_kind_.ident_ = ident;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Decl.ident)
}
inline ::google::api::expr::v1alpha1::Decl_IdentDecl* Decl::mutable_ident() {
  if (!has_ident()) {
    clear_decl_kind();
    set_has_ident();
    decl_kind_.ident_ = CreateMaybeMessage< ::google::api::expr::v1alpha1::Decl_IdentDecl >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Decl.ident)
  return decl_kind_.ident_;
}

// .google.api.expr.v1alpha1.Decl.FunctionDecl function = 3;
inline bool Decl::has_function() const {
  return decl_kind_case() == kFunction;
}
inline void Decl::set_has_function() {
  _oneof_case_[0] = kFunction;
}
inline void Decl::clear_function() {
  if (has_function()) {
    if (GetArenaNoVirtual() == NULL) {
      delete decl_kind_.function_;
    }
    clear_has_decl_kind();
  }
}
inline const ::google::api::expr::v1alpha1::Decl_FunctionDecl& Decl::_internal_function() const {
  return *decl_kind_.function_;
}
inline ::google::api::expr::v1alpha1::Decl_FunctionDecl* Decl::release_function() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Decl.function)
  if (has_function()) {
    clear_has_decl_kind();
      ::google::api::expr::v1alpha1::Decl_FunctionDecl* temp = decl_kind_.function_;
    if (GetArenaNoVirtual() != NULL) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    decl_kind_.function_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::api::expr::v1alpha1::Decl_FunctionDecl& Decl::function() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Decl.function)
  return has_function()
      ? *decl_kind_.function_
      : *reinterpret_cast< ::google::api::expr::v1alpha1::Decl_FunctionDecl*>(&::google::api::expr::v1alpha1::_Decl_FunctionDecl_default_instance_);
}
inline ::google::api::expr::v1alpha1::Decl_FunctionDecl* Decl::unsafe_arena_release_function() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1alpha1.Decl.function)
  if (has_function()) {
    clear_has_decl_kind();
    ::google::api::expr::v1alpha1::Decl_FunctionDecl* temp = decl_kind_.function_;
    decl_kind_.function_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Decl::unsafe_arena_set_allocated_function(::google::api::expr::v1alpha1::Decl_FunctionDecl* function) {
  clear_decl_kind();
  if (function) {
    set_has_function();
    decl_kind_.function_ = function;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Decl.function)
}
inline ::google::api::expr::v1alpha1::Decl_FunctionDecl* Decl::mutable_function() {
  if (!has_function()) {
    clear_decl_kind();
    set_has_function();
    decl_kind_.function_ = CreateMaybeMessage< ::google::api::expr::v1alpha1::Decl_FunctionDecl >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Decl.function)
  return decl_kind_.function_;
}

inline bool Decl::has_decl_kind() const {
  return decl_kind_case() != DECL_KIND_NOT_SET;
}
inline void Decl::clear_has_decl_kind() {
  _oneof_case_[0] = DECL_KIND_NOT_SET;
}
inline Decl::DeclKindCase Decl::decl_kind_case() const {
  return Decl::DeclKindCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Reference

// string name = 1;
inline void Reference::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Reference::name() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Reference.name)
  return name_.Get();
}
inline void Reference::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Reference.name)
}
#if LANG_CXX11
inline void Reference::set_name(::std::string&& value) {
  
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.api.expr.v1alpha1.Reference.name)
}
#endif
inline void Reference::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.api.expr.v1alpha1.Reference.name)
}
inline void Reference::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.api.expr.v1alpha1.Reference.name)
}
inline ::std::string* Reference::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Reference.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Reference::release_name() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Reference.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Reference::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Reference.name)
}
inline ::std::string* Reference::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1alpha1.Reference.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Reference::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Reference.name)
}

// repeated string overload_id = 3;
inline int Reference::overload_id_size() const {
  return overload_id_.size();
}
inline void Reference::clear_overload_id() {
  overload_id_.Clear();
}
inline const ::std::string& Reference::overload_id(int index) const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Reference.overload_id)
  return overload_id_.Get(index);
}
inline ::std::string* Reference::mutable_overload_id(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Reference.overload_id)
  return overload_id_.Mutable(index);
}
inline void Reference::set_overload_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Reference.overload_id)
  overload_id_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Reference::set_overload_id(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Reference.overload_id)
  overload_id_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Reference::set_overload_id(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  overload_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.api.expr.v1alpha1.Reference.overload_id)
}
inline void Reference::set_overload_id(int index, const char* value, size_t size) {
  overload_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.api.expr.v1alpha1.Reference.overload_id)
}
inline ::std::string* Reference::add_overload_id() {
  // @@protoc_insertion_point(field_add_mutable:google.api.expr.v1alpha1.Reference.overload_id)
  return overload_id_.Add();
}
inline void Reference::add_overload_id(const ::std::string& value) {
  overload_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.api.expr.v1alpha1.Reference.overload_id)
}
#if LANG_CXX11
inline void Reference::add_overload_id(::std::string&& value) {
  overload_id_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.api.expr.v1alpha1.Reference.overload_id)
}
#endif
inline void Reference::add_overload_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  overload_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.api.expr.v1alpha1.Reference.overload_id)
}
inline void Reference::add_overload_id(const char* value, size_t size) {
  overload_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.api.expr.v1alpha1.Reference.overload_id)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Reference::overload_id() const {
  // @@protoc_insertion_point(field_list:google.api.expr.v1alpha1.Reference.overload_id)
  return overload_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Reference::mutable_overload_id() {
  // @@protoc_insertion_point(field_mutable_list:google.api.expr.v1alpha1.Reference.overload_id)
  return &overload_id_;
}

// .google.api.expr.v1alpha1.Constant value = 4;
inline bool Reference::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
inline const ::google::api::expr::v1alpha1::Constant& Reference::_internal_value() const {
  return *value_;
}
inline const ::google::api::expr::v1alpha1::Constant& Reference::value() const {
  const ::google::api::expr::v1alpha1::Constant* p = value_;
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Reference.value)
  return p != NULL ? *p : *reinterpret_cast<const ::google::api::expr::v1alpha1::Constant*>(
      &::google::api::expr::v1alpha1::_Constant_default_instance_);
}
inline ::google::api::expr::v1alpha1::Constant* Reference::release_value() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Reference.value)
  
  ::google::api::expr::v1alpha1::Constant* temp = value_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  value_ = NULL;
  return temp;
}
inline ::google::api::expr::v1alpha1::Constant* Reference::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1alpha1.Reference.value)
  
  ::google::api::expr::v1alpha1::Constant* temp = value_;
  value_ = NULL;
  return temp;
}
inline ::google::api::expr::v1alpha1::Constant* Reference::mutable_value() {
  
  if (value_ == NULL) {
    auto* p = CreateMaybeMessage<::google::api::expr::v1alpha1::Constant>(GetArenaNoVirtual());
    value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Reference.value)
  return value_;
}
inline void Reference::set_allocated_value(::google::api::expr::v1alpha1::Constant* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_);
  }
  if (value) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Reference.value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha1
}  // namespace expr
}  // namespace api
}  // namespace google

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::google::api::expr::v1alpha1::Type_PrimitiveType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::api::expr::v1alpha1::Type_PrimitiveType>() {
  return ::google::api::expr::v1alpha1::Type_PrimitiveType_descriptor();
}
template <> struct is_proto_enum< ::google::api::expr::v1alpha1::Type_WellKnownType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::api::expr::v1alpha1::Type_WellKnownType>() {
  return ::google::api::expr::v1alpha1::Type_WellKnownType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto
