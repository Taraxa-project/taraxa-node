// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/expr/v1beta1/decl.proto

#ifndef PROTOBUF_INCLUDED_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto
#define PROTOBUF_INCLUDED_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/expr/v1beta1/expr.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto 

namespace protobuf_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto
namespace google {
namespace api {
namespace expr {
namespace v1beta1 {
class Decl;
class DeclDefaultTypeInternal;
extern DeclDefaultTypeInternal _Decl_default_instance_;
class DeclType;
class DeclTypeDefaultTypeInternal;
extern DeclTypeDefaultTypeInternal _DeclType_default_instance_;
class FunctionDecl;
class FunctionDeclDefaultTypeInternal;
extern FunctionDeclDefaultTypeInternal _FunctionDecl_default_instance_;
class IdentDecl;
class IdentDeclDefaultTypeInternal;
extern IdentDeclDefaultTypeInternal _IdentDecl_default_instance_;
}  // namespace v1beta1
}  // namespace expr
}  // namespace api
}  // namespace google
namespace google {
namespace protobuf {
template<> ::google::api::expr::v1beta1::Decl* Arena::CreateMaybeMessage<::google::api::expr::v1beta1::Decl>(Arena*);
template<> ::google::api::expr::v1beta1::DeclType* Arena::CreateMaybeMessage<::google::api::expr::v1beta1::DeclType>(Arena*);
template<> ::google::api::expr::v1beta1::FunctionDecl* Arena::CreateMaybeMessage<::google::api::expr::v1beta1::FunctionDecl>(Arena*);
template<> ::google::api::expr::v1beta1::IdentDecl* Arena::CreateMaybeMessage<::google::api::expr::v1beta1::IdentDecl>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace google {
namespace api {
namespace expr {
namespace v1beta1 {

// ===================================================================

class Decl : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.api.expr.v1beta1.Decl) */ {
 public:
  Decl();
  virtual ~Decl();

  Decl(const Decl& from);

  inline Decl& operator=(const Decl& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Decl(Decl&& from) noexcept
    : Decl() {
    *this = ::std::move(from);
  }

  inline Decl& operator=(Decl&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Decl& default_instance();

  enum KindCase {
    kIdent = 4,
    kFunction = 5,
    KIND_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Decl* internal_default_instance() {
    return reinterpret_cast<const Decl*>(
               &_Decl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(Decl* other);
  void Swap(Decl* other);
  friend void swap(Decl& a, Decl& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Decl* New() const final {
    return CreateMaybeMessage<Decl>(NULL);
  }

  Decl* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Decl>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Decl& from);
  void MergeFrom(const Decl& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Decl* other);
  protected:
  explicit Decl(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // string doc = 3;
  void clear_doc();
  static const int kDocFieldNumber = 3;
  const ::std::string& doc() const;
  void set_doc(const ::std::string& value);
  #if LANG_CXX11
  void set_doc(::std::string&& value);
  #endif
  void set_doc(const char* value);
  void set_doc(const char* value, size_t size);
  ::std::string* mutable_doc();
  ::std::string* release_doc();
  void set_allocated_doc(::std::string* doc);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_doc();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_doc(
      ::std::string* doc);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // .google.api.expr.v1beta1.IdentDecl ident = 4;
  bool has_ident() const;
  void clear_ident();
  static const int kIdentFieldNumber = 4;
  private:
  const ::google::api::expr::v1beta1::IdentDecl& _internal_ident() const;
  public:
  const ::google::api::expr::v1beta1::IdentDecl& ident() const;
  ::google::api::expr::v1beta1::IdentDecl* release_ident();
  ::google::api::expr::v1beta1::IdentDecl* mutable_ident();
  void set_allocated_ident(::google::api::expr::v1beta1::IdentDecl* ident);
  void unsafe_arena_set_allocated_ident(
      ::google::api::expr::v1beta1::IdentDecl* ident);
  ::google::api::expr::v1beta1::IdentDecl* unsafe_arena_release_ident();

  // .google.api.expr.v1beta1.FunctionDecl function = 5;
  bool has_function() const;
  void clear_function();
  static const int kFunctionFieldNumber = 5;
  private:
  const ::google::api::expr::v1beta1::FunctionDecl& _internal_function() const;
  public:
  const ::google::api::expr::v1beta1::FunctionDecl& function() const;
  ::google::api::expr::v1beta1::FunctionDecl* release_function();
  ::google::api::expr::v1beta1::FunctionDecl* mutable_function();
  void set_allocated_function(::google::api::expr::v1beta1::FunctionDecl* function);
  void unsafe_arena_set_allocated_function(
      ::google::api::expr::v1beta1::FunctionDecl* function);
  ::google::api::expr::v1beta1::FunctionDecl* unsafe_arena_release_function();

  void clear_kind();
  KindCase kind_case() const;
  // @@protoc_insertion_point(class_scope:google.api.expr.v1beta1.Decl)
 private:
  void set_has_ident();
  void set_has_function();

  inline bool has_kind() const;
  inline void clear_has_kind();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr doc_;
  ::google::protobuf::int32 id_;
  union KindUnion {
    KindUnion() {}
    ::google::api::expr::v1beta1::IdentDecl* ident_;
    ::google::api::expr::v1beta1::FunctionDecl* function_;
  } kind_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeclType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.api.expr.v1beta1.DeclType) */ {
 public:
  DeclType();
  virtual ~DeclType();

  DeclType(const DeclType& from);

  inline DeclType& operator=(const DeclType& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeclType(DeclType&& from) noexcept
    : DeclType() {
    *this = ::std::move(from);
  }

  inline DeclType& operator=(DeclType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeclType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeclType* internal_default_instance() {
    return reinterpret_cast<const DeclType*>(
               &_DeclType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void UnsafeArenaSwap(DeclType* other);
  void Swap(DeclType* other);
  friend void swap(DeclType& a, DeclType& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeclType* New() const final {
    return CreateMaybeMessage<DeclType>(NULL);
  }

  DeclType* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeclType>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeclType& from);
  void MergeFrom(const DeclType& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeclType* other);
  protected:
  explicit DeclType(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.api.expr.v1beta1.DeclType type_params = 4;
  int type_params_size() const;
  void clear_type_params();
  static const int kTypeParamsFieldNumber = 4;
  ::google::api::expr::v1beta1::DeclType* mutable_type_params(int index);
  ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1beta1::DeclType >*
      mutable_type_params();
  const ::google::api::expr::v1beta1::DeclType& type_params(int index) const;
  ::google::api::expr::v1beta1::DeclType* add_type_params();
  const ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1beta1::DeclType >&
      type_params() const;

  // string type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_type();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_type(
      ::std::string* type);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.api.expr.v1beta1.DeclType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1beta1::DeclType > type_params_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::int32 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IdentDecl : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.api.expr.v1beta1.IdentDecl) */ {
 public:
  IdentDecl();
  virtual ~IdentDecl();

  IdentDecl(const IdentDecl& from);

  inline IdentDecl& operator=(const IdentDecl& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IdentDecl(IdentDecl&& from) noexcept
    : IdentDecl() {
    *this = ::std::move(from);
  }

  inline IdentDecl& operator=(IdentDecl&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const IdentDecl& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IdentDecl* internal_default_instance() {
    return reinterpret_cast<const IdentDecl*>(
               &_IdentDecl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(IdentDecl* other);
  void Swap(IdentDecl* other);
  friend void swap(IdentDecl& a, IdentDecl& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IdentDecl* New() const final {
    return CreateMaybeMessage<IdentDecl>(NULL);
  }

  IdentDecl* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IdentDecl>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IdentDecl& from);
  void MergeFrom(const IdentDecl& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IdentDecl* other);
  protected:
  explicit IdentDecl(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.api.expr.v1beta1.DeclType type = 3;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  private:
  const ::google::api::expr::v1beta1::DeclType& _internal_type() const;
  public:
  const ::google::api::expr::v1beta1::DeclType& type() const;
  ::google::api::expr::v1beta1::DeclType* release_type();
  ::google::api::expr::v1beta1::DeclType* mutable_type();
  void set_allocated_type(::google::api::expr::v1beta1::DeclType* type);
  void unsafe_arena_set_allocated_type(
      ::google::api::expr::v1beta1::DeclType* type);
  ::google::api::expr::v1beta1::DeclType* unsafe_arena_release_type();

  // .google.api.expr.v1beta1.Expr value = 4;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 4;
  private:
  const ::google::api::expr::v1beta1::Expr& _internal_value() const;
  public:
  const ::google::api::expr::v1beta1::Expr& value() const;
  ::google::api::expr::v1beta1::Expr* release_value();
  ::google::api::expr::v1beta1::Expr* mutable_value();
  void set_allocated_value(::google::api::expr::v1beta1::Expr* value);
  void unsafe_arena_set_allocated_value(
      ::google::api::expr::v1beta1::Expr* value);
  ::google::api::expr::v1beta1::Expr* unsafe_arena_release_value();

  // @@protoc_insertion_point(class_scope:google.api.expr.v1beta1.IdentDecl)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::api::expr::v1beta1::DeclType* type_;
  ::google::api::expr::v1beta1::Expr* value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FunctionDecl : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.api.expr.v1beta1.FunctionDecl) */ {
 public:
  FunctionDecl();
  virtual ~FunctionDecl();

  FunctionDecl(const FunctionDecl& from);

  inline FunctionDecl& operator=(const FunctionDecl& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FunctionDecl(FunctionDecl&& from) noexcept
    : FunctionDecl() {
    *this = ::std::move(from);
  }

  inline FunctionDecl& operator=(FunctionDecl&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const FunctionDecl& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FunctionDecl* internal_default_instance() {
    return reinterpret_cast<const FunctionDecl*>(
               &_FunctionDecl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void UnsafeArenaSwap(FunctionDecl* other);
  void Swap(FunctionDecl* other);
  friend void swap(FunctionDecl& a, FunctionDecl& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FunctionDecl* New() const final {
    return CreateMaybeMessage<FunctionDecl>(NULL);
  }

  FunctionDecl* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FunctionDecl>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FunctionDecl& from);
  void MergeFrom(const FunctionDecl& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FunctionDecl* other);
  protected:
  explicit FunctionDecl(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.api.expr.v1beta1.IdentDecl args = 1;
  int args_size() const;
  void clear_args();
  static const int kArgsFieldNumber = 1;
  ::google::api::expr::v1beta1::IdentDecl* mutable_args(int index);
  ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1beta1::IdentDecl >*
      mutable_args();
  const ::google::api::expr::v1beta1::IdentDecl& args(int index) const;
  ::google::api::expr::v1beta1::IdentDecl* add_args();
  const ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1beta1::IdentDecl >&
      args() const;

  // .google.api.expr.v1beta1.DeclType return_type = 2;
  bool has_return_type() const;
  void clear_return_type();
  static const int kReturnTypeFieldNumber = 2;
  private:
  const ::google::api::expr::v1beta1::DeclType& _internal_return_type() const;
  public:
  const ::google::api::expr::v1beta1::DeclType& return_type() const;
  ::google::api::expr::v1beta1::DeclType* release_return_type();
  ::google::api::expr::v1beta1::DeclType* mutable_return_type();
  void set_allocated_return_type(::google::api::expr::v1beta1::DeclType* return_type);
  void unsafe_arena_set_allocated_return_type(
      ::google::api::expr::v1beta1::DeclType* return_type);
  ::google::api::expr::v1beta1::DeclType* unsafe_arena_release_return_type();

  // bool receiver_function = 3;
  void clear_receiver_function();
  static const int kReceiverFunctionFieldNumber = 3;
  bool receiver_function() const;
  void set_receiver_function(bool value);

  // @@protoc_insertion_point(class_scope:google.api.expr.v1beta1.FunctionDecl)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1beta1::IdentDecl > args_;
  ::google::api::expr::v1beta1::DeclType* return_type_;
  bool receiver_function_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Decl

// int32 id = 1;
inline void Decl::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 Decl::id() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1beta1.Decl.id)
  return id_;
}
inline void Decl::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:google.api.expr.v1beta1.Decl.id)
}

// string name = 2;
inline void Decl::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Decl::name() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1beta1.Decl.name)
  return name_.Get();
}
inline void Decl::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.api.expr.v1beta1.Decl.name)
}
#if LANG_CXX11
inline void Decl::set_name(::std::string&& value) {
  
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.api.expr.v1beta1.Decl.name)
}
#endif
inline void Decl::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.api.expr.v1beta1.Decl.name)
}
inline void Decl::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.api.expr.v1beta1.Decl.name)
}
inline ::std::string* Decl::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1beta1.Decl.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Decl::release_name() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1beta1.Decl.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Decl::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1beta1.Decl.name)
}
inline ::std::string* Decl::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1beta1.Decl.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Decl::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1beta1.Decl.name)
}

// string doc = 3;
inline void Decl::clear_doc() {
  doc_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Decl::doc() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1beta1.Decl.doc)
  return doc_.Get();
}
inline void Decl::set_doc(const ::std::string& value) {
  
  doc_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.api.expr.v1beta1.Decl.doc)
}
#if LANG_CXX11
inline void Decl::set_doc(::std::string&& value) {
  
  doc_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.api.expr.v1beta1.Decl.doc)
}
#endif
inline void Decl::set_doc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  doc_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.api.expr.v1beta1.Decl.doc)
}
inline void Decl::set_doc(const char* value,
    size_t size) {
  
  doc_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.api.expr.v1beta1.Decl.doc)
}
inline ::std::string* Decl::mutable_doc() {
  
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1beta1.Decl.doc)
  return doc_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Decl::release_doc() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1beta1.Decl.doc)
  
  return doc_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Decl::set_allocated_doc(::std::string* doc) {
  if (doc != NULL) {
    
  } else {
    
  }
  doc_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), doc,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1beta1.Decl.doc)
}
inline ::std::string* Decl::unsafe_arena_release_doc() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1beta1.Decl.doc)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return doc_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Decl::unsafe_arena_set_allocated_doc(
    ::std::string* doc) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (doc != NULL) {
    
  } else {
    
  }
  doc_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      doc, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1beta1.Decl.doc)
}

// .google.api.expr.v1beta1.IdentDecl ident = 4;
inline bool Decl::has_ident() const {
  return kind_case() == kIdent;
}
inline void Decl::set_has_ident() {
  _oneof_case_[0] = kIdent;
}
inline void Decl::clear_ident() {
  if (has_ident()) {
    if (GetArenaNoVirtual() == NULL) {
      delete kind_.ident_;
    }
    clear_has_kind();
  }
}
inline const ::google::api::expr::v1beta1::IdentDecl& Decl::_internal_ident() const {
  return *kind_.ident_;
}
inline ::google::api::expr::v1beta1::IdentDecl* Decl::release_ident() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1beta1.Decl.ident)
  if (has_ident()) {
    clear_has_kind();
      ::google::api::expr::v1beta1::IdentDecl* temp = kind_.ident_;
    if (GetArenaNoVirtual() != NULL) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    kind_.ident_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::api::expr::v1beta1::IdentDecl& Decl::ident() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1beta1.Decl.ident)
  return has_ident()
      ? *kind_.ident_
      : *reinterpret_cast< ::google::api::expr::v1beta1::IdentDecl*>(&::google::api::expr::v1beta1::_IdentDecl_default_instance_);
}
inline ::google::api::expr::v1beta1::IdentDecl* Decl::unsafe_arena_release_ident() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1beta1.Decl.ident)
  if (has_ident()) {
    clear_has_kind();
    ::google::api::expr::v1beta1::IdentDecl* temp = kind_.ident_;
    kind_.ident_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Decl::unsafe_arena_set_allocated_ident(::google::api::expr::v1beta1::IdentDecl* ident) {
  clear_kind();
  if (ident) {
    set_has_ident();
    kind_.ident_ = ident;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1beta1.Decl.ident)
}
inline ::google::api::expr::v1beta1::IdentDecl* Decl::mutable_ident() {
  if (!has_ident()) {
    clear_kind();
    set_has_ident();
    kind_.ident_ = CreateMaybeMessage< ::google::api::expr::v1beta1::IdentDecl >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1beta1.Decl.ident)
  return kind_.ident_;
}

// .google.api.expr.v1beta1.FunctionDecl function = 5;
inline bool Decl::has_function() const {
  return kind_case() == kFunction;
}
inline void Decl::set_has_function() {
  _oneof_case_[0] = kFunction;
}
inline void Decl::clear_function() {
  if (has_function()) {
    if (GetArenaNoVirtual() == NULL) {
      delete kind_.function_;
    }
    clear_has_kind();
  }
}
inline const ::google::api::expr::v1beta1::FunctionDecl& Decl::_internal_function() const {
  return *kind_.function_;
}
inline ::google::api::expr::v1beta1::FunctionDecl* Decl::release_function() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1beta1.Decl.function)
  if (has_function()) {
    clear_has_kind();
      ::google::api::expr::v1beta1::FunctionDecl* temp = kind_.function_;
    if (GetArenaNoVirtual() != NULL) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    kind_.function_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::api::expr::v1beta1::FunctionDecl& Decl::function() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1beta1.Decl.function)
  return has_function()
      ? *kind_.function_
      : *reinterpret_cast< ::google::api::expr::v1beta1::FunctionDecl*>(&::google::api::expr::v1beta1::_FunctionDecl_default_instance_);
}
inline ::google::api::expr::v1beta1::FunctionDecl* Decl::unsafe_arena_release_function() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1beta1.Decl.function)
  if (has_function()) {
    clear_has_kind();
    ::google::api::expr::v1beta1::FunctionDecl* temp = kind_.function_;
    kind_.function_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Decl::unsafe_arena_set_allocated_function(::google::api::expr::v1beta1::FunctionDecl* function) {
  clear_kind();
  if (function) {
    set_has_function();
    kind_.function_ = function;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1beta1.Decl.function)
}
inline ::google::api::expr::v1beta1::FunctionDecl* Decl::mutable_function() {
  if (!has_function()) {
    clear_kind();
    set_has_function();
    kind_.function_ = CreateMaybeMessage< ::google::api::expr::v1beta1::FunctionDecl >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1beta1.Decl.function)
  return kind_.function_;
}

inline bool Decl::has_kind() const {
  return kind_case() != KIND_NOT_SET;
}
inline void Decl::clear_has_kind() {
  _oneof_case_[0] = KIND_NOT_SET;
}
inline Decl::KindCase Decl::kind_case() const {
  return Decl::KindCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// DeclType

// int32 id = 1;
inline void DeclType::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 DeclType::id() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1beta1.DeclType.id)
  return id_;
}
inline void DeclType::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:google.api.expr.v1beta1.DeclType.id)
}

// string type = 2;
inline void DeclType::clear_type() {
  type_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& DeclType::type() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1beta1.DeclType.type)
  return type_.Get();
}
inline void DeclType::set_type(const ::std::string& value) {
  
  type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.api.expr.v1beta1.DeclType.type)
}
#if LANG_CXX11
inline void DeclType::set_type(::std::string&& value) {
  
  type_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.api.expr.v1beta1.DeclType.type)
}
#endif
inline void DeclType::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.api.expr.v1beta1.DeclType.type)
}
inline void DeclType::set_type(const char* value,
    size_t size) {
  
  type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.api.expr.v1beta1.DeclType.type)
}
inline ::std::string* DeclType::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1beta1.DeclType.type)
  return type_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* DeclType::release_type() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1beta1.DeclType.type)
  
  return type_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void DeclType::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1beta1.DeclType.type)
}
inline ::std::string* DeclType::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1beta1.DeclType.type)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return type_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void DeclType::unsafe_arena_set_allocated_type(
    ::std::string* type) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (type != NULL) {
    
  } else {
    
  }
  type_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      type, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1beta1.DeclType.type)
}

// repeated .google.api.expr.v1beta1.DeclType type_params = 4;
inline int DeclType::type_params_size() const {
  return type_params_.size();
}
inline void DeclType::clear_type_params() {
  type_params_.Clear();
}
inline ::google::api::expr::v1beta1::DeclType* DeclType::mutable_type_params(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1beta1.DeclType.type_params)
  return type_params_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1beta1::DeclType >*
DeclType::mutable_type_params() {
  // @@protoc_insertion_point(field_mutable_list:google.api.expr.v1beta1.DeclType.type_params)
  return &type_params_;
}
inline const ::google::api::expr::v1beta1::DeclType& DeclType::type_params(int index) const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1beta1.DeclType.type_params)
  return type_params_.Get(index);
}
inline ::google::api::expr::v1beta1::DeclType* DeclType::add_type_params() {
  // @@protoc_insertion_point(field_add:google.api.expr.v1beta1.DeclType.type_params)
  return type_params_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1beta1::DeclType >&
DeclType::type_params() const {
  // @@protoc_insertion_point(field_list:google.api.expr.v1beta1.DeclType.type_params)
  return type_params_;
}

// -------------------------------------------------------------------

// IdentDecl

// .google.api.expr.v1beta1.DeclType type = 3;
inline bool IdentDecl::has_type() const {
  return this != internal_default_instance() && type_ != NULL;
}
inline void IdentDecl::clear_type() {
  if (GetArenaNoVirtual() == NULL && type_ != NULL) {
    delete type_;
  }
  type_ = NULL;
}
inline const ::google::api::expr::v1beta1::DeclType& IdentDecl::_internal_type() const {
  return *type_;
}
inline const ::google::api::expr::v1beta1::DeclType& IdentDecl::type() const {
  const ::google::api::expr::v1beta1::DeclType* p = type_;
  // @@protoc_insertion_point(field_get:google.api.expr.v1beta1.IdentDecl.type)
  return p != NULL ? *p : *reinterpret_cast<const ::google::api::expr::v1beta1::DeclType*>(
      &::google::api::expr::v1beta1::_DeclType_default_instance_);
}
inline ::google::api::expr::v1beta1::DeclType* IdentDecl::release_type() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1beta1.IdentDecl.type)
  
  ::google::api::expr::v1beta1::DeclType* temp = type_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  type_ = NULL;
  return temp;
}
inline ::google::api::expr::v1beta1::DeclType* IdentDecl::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1beta1.IdentDecl.type)
  
  ::google::api::expr::v1beta1::DeclType* temp = type_;
  type_ = NULL;
  return temp;
}
inline ::google::api::expr::v1beta1::DeclType* IdentDecl::mutable_type() {
  
  if (type_ == NULL) {
    auto* p = CreateMaybeMessage<::google::api::expr::v1beta1::DeclType>(GetArenaNoVirtual());
    type_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1beta1.IdentDecl.type)
  return type_;
}
inline void IdentDecl::set_allocated_type(::google::api::expr::v1beta1::DeclType* type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete type_;
  }
  if (type) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(type);
    if (message_arena != submessage_arena) {
      type = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    
  } else {
    
  }
  type_ = type;
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1beta1.IdentDecl.type)
}

// .google.api.expr.v1beta1.Expr value = 4;
inline bool IdentDecl::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
inline const ::google::api::expr::v1beta1::Expr& IdentDecl::_internal_value() const {
  return *value_;
}
inline const ::google::api::expr::v1beta1::Expr& IdentDecl::value() const {
  const ::google::api::expr::v1beta1::Expr* p = value_;
  // @@protoc_insertion_point(field_get:google.api.expr.v1beta1.IdentDecl.value)
  return p != NULL ? *p : *reinterpret_cast<const ::google::api::expr::v1beta1::Expr*>(
      &::google::api::expr::v1beta1::_Expr_default_instance_);
}
inline ::google::api::expr::v1beta1::Expr* IdentDecl::release_value() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1beta1.IdentDecl.value)
  
  ::google::api::expr::v1beta1::Expr* temp = value_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  value_ = NULL;
  return temp;
}
inline ::google::api::expr::v1beta1::Expr* IdentDecl::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1beta1.IdentDecl.value)
  
  ::google::api::expr::v1beta1::Expr* temp = value_;
  value_ = NULL;
  return temp;
}
inline ::google::api::expr::v1beta1::Expr* IdentDecl::mutable_value() {
  
  if (value_ == NULL) {
    auto* p = CreateMaybeMessage<::google::api::expr::v1beta1::Expr>(GetArenaNoVirtual());
    value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1beta1.IdentDecl.value)
  return value_;
}
inline void IdentDecl::set_allocated_value(::google::api::expr::v1beta1::Expr* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_);
  }
  if (value) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1beta1.IdentDecl.value)
}

// -------------------------------------------------------------------

// FunctionDecl

// repeated .google.api.expr.v1beta1.IdentDecl args = 1;
inline int FunctionDecl::args_size() const {
  return args_.size();
}
inline void FunctionDecl::clear_args() {
  args_.Clear();
}
inline ::google::api::expr::v1beta1::IdentDecl* FunctionDecl::mutable_args(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1beta1.FunctionDecl.args)
  return args_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1beta1::IdentDecl >*
FunctionDecl::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:google.api.expr.v1beta1.FunctionDecl.args)
  return &args_;
}
inline const ::google::api::expr::v1beta1::IdentDecl& FunctionDecl::args(int index) const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1beta1.FunctionDecl.args)
  return args_.Get(index);
}
inline ::google::api::expr::v1beta1::IdentDecl* FunctionDecl::add_args() {
  // @@protoc_insertion_point(field_add:google.api.expr.v1beta1.FunctionDecl.args)
  return args_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::api::expr::v1beta1::IdentDecl >&
FunctionDecl::args() const {
  // @@protoc_insertion_point(field_list:google.api.expr.v1beta1.FunctionDecl.args)
  return args_;
}

// .google.api.expr.v1beta1.DeclType return_type = 2;
inline bool FunctionDecl::has_return_type() const {
  return this != internal_default_instance() && return_type_ != NULL;
}
inline void FunctionDecl::clear_return_type() {
  if (GetArenaNoVirtual() == NULL && return_type_ != NULL) {
    delete return_type_;
  }
  return_type_ = NULL;
}
inline const ::google::api::expr::v1beta1::DeclType& FunctionDecl::_internal_return_type() const {
  return *return_type_;
}
inline const ::google::api::expr::v1beta1::DeclType& FunctionDecl::return_type() const {
  const ::google::api::expr::v1beta1::DeclType* p = return_type_;
  // @@protoc_insertion_point(field_get:google.api.expr.v1beta1.FunctionDecl.return_type)
  return p != NULL ? *p : *reinterpret_cast<const ::google::api::expr::v1beta1::DeclType*>(
      &::google::api::expr::v1beta1::_DeclType_default_instance_);
}
inline ::google::api::expr::v1beta1::DeclType* FunctionDecl::release_return_type() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1beta1.FunctionDecl.return_type)
  
  ::google::api::expr::v1beta1::DeclType* temp = return_type_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  return_type_ = NULL;
  return temp;
}
inline ::google::api::expr::v1beta1::DeclType* FunctionDecl::unsafe_arena_release_return_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1beta1.FunctionDecl.return_type)
  
  ::google::api::expr::v1beta1::DeclType* temp = return_type_;
  return_type_ = NULL;
  return temp;
}
inline ::google::api::expr::v1beta1::DeclType* FunctionDecl::mutable_return_type() {
  
  if (return_type_ == NULL) {
    auto* p = CreateMaybeMessage<::google::api::expr::v1beta1::DeclType>(GetArenaNoVirtual());
    return_type_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1beta1.FunctionDecl.return_type)
  return return_type_;
}
inline void FunctionDecl::set_allocated_return_type(::google::api::expr::v1beta1::DeclType* return_type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete return_type_;
  }
  if (return_type) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(return_type);
    if (message_arena != submessage_arena) {
      return_type = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, return_type, submessage_arena);
    }
    
  } else {
    
  }
  return_type_ = return_type;
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1beta1.FunctionDecl.return_type)
}

// bool receiver_function = 3;
inline void FunctionDecl::clear_receiver_function() {
  receiver_function_ = false;
}
inline bool FunctionDecl::receiver_function() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1beta1.FunctionDecl.receiver_function)
  return receiver_function_;
}
inline void FunctionDecl::set_receiver_function(bool value) {
  
  receiver_function_ = value;
  // @@protoc_insertion_point(field_set:google.api.expr.v1beta1.FunctionDecl.receiver_function)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1beta1
}  // namespace expr
}  // namespace api
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto
