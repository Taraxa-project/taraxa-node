// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/api/servicemanagement/v1/servicemanager.proto
// Original file comments:
// Copyright 2018 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_google_2fapi_2fservicemanagement_2fv1_2fservicemanager_2eproto__INCLUDED
#define GRPC_google_2fapi_2fservicemanagement_2fv1_2fservicemanager_2eproto__INCLUDED

#include "google/api/servicemanagement/v1/servicemanager.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace google {
namespace api {
namespace servicemanagement {
namespace v1 {

// [Google Service Management API](/service-management/overview)
class ServiceManager final {
 public:
  static constexpr char const* service_full_name() {
    return "google.api.servicemanagement.v1.ServiceManager";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Lists managed services.
    //
    // Returns all public services. For authenticated users, also returns all
    // services the calling user has "servicemanagement.services.get" permission
    // for.
    //
    // **BETA:** If the caller specifies the `consumer_id`, it returns only the
    // services enabled on the consumer. The `consumer_id` must have the format
    // of "project:{PROJECT-ID}".
    virtual ::grpc::Status ListServices(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::ListServicesRequest& request, ::google::api::servicemanagement::v1::ListServicesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::api::servicemanagement::v1::ListServicesResponse>> AsyncListServices(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::ListServicesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::api::servicemanagement::v1::ListServicesResponse>>(AsyncListServicesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::api::servicemanagement::v1::ListServicesResponse>> PrepareAsyncListServices(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::ListServicesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::api::servicemanagement::v1::ListServicesResponse>>(PrepareAsyncListServicesRaw(context, request, cq));
    }
    // Gets a managed service. Authentication is required unless the service is
    // public.
    virtual ::grpc::Status GetService(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::GetServiceRequest& request, ::google::api::servicemanagement::v1::ManagedService* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::api::servicemanagement::v1::ManagedService>> AsyncGetService(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::GetServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::api::servicemanagement::v1::ManagedService>>(AsyncGetServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::api::servicemanagement::v1::ManagedService>> PrepareAsyncGetService(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::GetServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::api::servicemanagement::v1::ManagedService>>(PrepareAsyncGetServiceRaw(context, request, cq));
    }
    // Creates a new managed service.
    // Please note one producer project can own no more than 20 services.
    //
    // Operation<response: ManagedService>
    virtual ::grpc::Status CreateService(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::CreateServiceRequest& request, ::google::longrunning::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> AsyncCreateService(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::CreateServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(AsyncCreateServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> PrepareAsyncCreateService(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::CreateServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(PrepareAsyncCreateServiceRaw(context, request, cq));
    }
    // Deletes a managed service. This method will change the service to the
    // `Soft-Delete` state for 30 days. Within this period, service producers may
    // call [UndeleteService][google.api.servicemanagement.v1.ServiceManager.UndeleteService] to restore the service.
    // After 30 days, the service will be permanently deleted.
    //
    // Operation<response: google.protobuf.Empty>
    virtual ::grpc::Status DeleteService(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::DeleteServiceRequest& request, ::google::longrunning::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> AsyncDeleteService(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::DeleteServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(AsyncDeleteServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> PrepareAsyncDeleteService(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::DeleteServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(PrepareAsyncDeleteServiceRaw(context, request, cq));
    }
    // Revives a previously deleted managed service. The method restores the
    // service using the configuration at the time the service was deleted.
    // The target service must exist and must have been deleted within the
    // last 30 days.
    //
    // Operation<response: UndeleteServiceResponse>
    virtual ::grpc::Status UndeleteService(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::UndeleteServiceRequest& request, ::google::longrunning::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> AsyncUndeleteService(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::UndeleteServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(AsyncUndeleteServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> PrepareAsyncUndeleteService(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::UndeleteServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(PrepareAsyncUndeleteServiceRaw(context, request, cq));
    }
    // Lists the history of the service configuration for a managed service,
    // from the newest to the oldest.
    virtual ::grpc::Status ListServiceConfigs(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::ListServiceConfigsRequest& request, ::google::api::servicemanagement::v1::ListServiceConfigsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::api::servicemanagement::v1::ListServiceConfigsResponse>> AsyncListServiceConfigs(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::ListServiceConfigsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::api::servicemanagement::v1::ListServiceConfigsResponse>>(AsyncListServiceConfigsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::api::servicemanagement::v1::ListServiceConfigsResponse>> PrepareAsyncListServiceConfigs(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::ListServiceConfigsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::api::servicemanagement::v1::ListServiceConfigsResponse>>(PrepareAsyncListServiceConfigsRaw(context, request, cq));
    }
    // Gets a service configuration (version) for a managed service.
    virtual ::grpc::Status GetServiceConfig(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::GetServiceConfigRequest& request, ::google::api::Service* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::api::Service>> AsyncGetServiceConfig(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::GetServiceConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::api::Service>>(AsyncGetServiceConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::api::Service>> PrepareAsyncGetServiceConfig(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::GetServiceConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::api::Service>>(PrepareAsyncGetServiceConfigRaw(context, request, cq));
    }
    // Creates a new service configuration (version) for a managed service.
    // This method only stores the service configuration. To roll out the service
    // configuration to backend systems please call
    // [CreateServiceRollout][google.api.servicemanagement.v1.ServiceManager.CreateServiceRollout].
    //
    // Only the 100 most recent service configurations and ones referenced by
    // existing rollouts are kept for each service. The rest will be deleted
    // eventually.
    virtual ::grpc::Status CreateServiceConfig(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::CreateServiceConfigRequest& request, ::google::api::Service* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::api::Service>> AsyncCreateServiceConfig(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::CreateServiceConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::api::Service>>(AsyncCreateServiceConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::api::Service>> PrepareAsyncCreateServiceConfig(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::CreateServiceConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::api::Service>>(PrepareAsyncCreateServiceConfigRaw(context, request, cq));
    }
    // Creates a new service configuration (version) for a managed service based
    // on
    // user-supplied configuration source files (for example: OpenAPI
    // Specification). This method stores the source configurations as well as the
    // generated service configuration. To rollout the service configuration to
    // other services,
    // please call [CreateServiceRollout][google.api.servicemanagement.v1.ServiceManager.CreateServiceRollout].
    //
    // Only the 100 most recent configuration sources and ones referenced by
    // existing service configurtions are kept for each service. The rest will be
    // deleted eventually.
    //
    // Operation<response: SubmitConfigSourceResponse>
    virtual ::grpc::Status SubmitConfigSource(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::SubmitConfigSourceRequest& request, ::google::longrunning::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> AsyncSubmitConfigSource(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::SubmitConfigSourceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(AsyncSubmitConfigSourceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> PrepareAsyncSubmitConfigSource(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::SubmitConfigSourceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(PrepareAsyncSubmitConfigSourceRaw(context, request, cq));
    }
    // Lists the history of the service configuration rollouts for a managed
    // service, from the newest to the oldest.
    virtual ::grpc::Status ListServiceRollouts(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::ListServiceRolloutsRequest& request, ::google::api::servicemanagement::v1::ListServiceRolloutsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::api::servicemanagement::v1::ListServiceRolloutsResponse>> AsyncListServiceRollouts(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::ListServiceRolloutsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::api::servicemanagement::v1::ListServiceRolloutsResponse>>(AsyncListServiceRolloutsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::api::servicemanagement::v1::ListServiceRolloutsResponse>> PrepareAsyncListServiceRollouts(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::ListServiceRolloutsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::api::servicemanagement::v1::ListServiceRolloutsResponse>>(PrepareAsyncListServiceRolloutsRaw(context, request, cq));
    }
    // Gets a service configuration [rollout][google.api.servicemanagement.v1.Rollout].
    virtual ::grpc::Status GetServiceRollout(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::GetServiceRolloutRequest& request, ::google::api::servicemanagement::v1::Rollout* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::api::servicemanagement::v1::Rollout>> AsyncGetServiceRollout(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::GetServiceRolloutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::api::servicemanagement::v1::Rollout>>(AsyncGetServiceRolloutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::api::servicemanagement::v1::Rollout>> PrepareAsyncGetServiceRollout(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::GetServiceRolloutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::api::servicemanagement::v1::Rollout>>(PrepareAsyncGetServiceRolloutRaw(context, request, cq));
    }
    // Creates a new service configuration rollout. Based on rollout, the
    // Google Service Management will roll out the service configurations to
    // different backend services. For example, the logging configuration will be
    // pushed to Google Cloud Logging.
    //
    // Please note that any previous pending and running Rollouts and associated
    // Operations will be automatically cancelled so that the latest Rollout will
    // not be blocked by previous Rollouts.
    //
    // Only the 100 most recent (in any state) and the last 10 successful (if not
    // already part of the set of 100 most recent) rollouts are kept for each
    // service. The rest will be deleted eventually.
    //
    // Operation<response: Rollout>
    virtual ::grpc::Status CreateServiceRollout(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::CreateServiceRolloutRequest& request, ::google::longrunning::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> AsyncCreateServiceRollout(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::CreateServiceRolloutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(AsyncCreateServiceRolloutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> PrepareAsyncCreateServiceRollout(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::CreateServiceRolloutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(PrepareAsyncCreateServiceRolloutRaw(context, request, cq));
    }
    // Generates and returns a report (errors, warnings and changes from
    // existing configurations) associated with
    // GenerateConfigReportRequest.new_value
    //
    // If GenerateConfigReportRequest.old_value is specified,
    // GenerateConfigReportRequest will contain a single ChangeReport based on the
    // comparison between GenerateConfigReportRequest.new_value and
    // GenerateConfigReportRequest.old_value.
    // If GenerateConfigReportRequest.old_value is not specified, this method
    // will compare GenerateConfigReportRequest.new_value with the last pushed
    // service configuration.
    virtual ::grpc::Status GenerateConfigReport(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::GenerateConfigReportRequest& request, ::google::api::servicemanagement::v1::GenerateConfigReportResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::api::servicemanagement::v1::GenerateConfigReportResponse>> AsyncGenerateConfigReport(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::GenerateConfigReportRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::api::servicemanagement::v1::GenerateConfigReportResponse>>(AsyncGenerateConfigReportRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::api::servicemanagement::v1::GenerateConfigReportResponse>> PrepareAsyncGenerateConfigReport(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::GenerateConfigReportRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::api::servicemanagement::v1::GenerateConfigReportResponse>>(PrepareAsyncGenerateConfigReportRaw(context, request, cq));
    }
    // Enables a [service][google.api.servicemanagement.v1.ManagedService] for a project, so it can be used
    // for the project. See
    // [Cloud Auth Guide](https://cloud.google.com/docs/authentication) for
    // more information.
    //
    // Operation<response: EnableServiceResponse>
    virtual ::grpc::Status EnableService(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::EnableServiceRequest& request, ::google::longrunning::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> AsyncEnableService(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::EnableServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(AsyncEnableServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> PrepareAsyncEnableService(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::EnableServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(PrepareAsyncEnableServiceRaw(context, request, cq));
    }
    // Disables a [service][google.api.servicemanagement.v1.ManagedService] for a project, so it can no longer be
    // be used for the project. It prevents accidental usage that may cause
    // unexpected billing charges or security leaks.
    //
    // Operation<response: DisableServiceResponse>
    virtual ::grpc::Status DisableService(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::DisableServiceRequest& request, ::google::longrunning::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> AsyncDisableService(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::DisableServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(AsyncDisableServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> PrepareAsyncDisableService(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::DisableServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(PrepareAsyncDisableServiceRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Lists managed services.
      //
      // Returns all public services. For authenticated users, also returns all
      // services the calling user has "servicemanagement.services.get" permission
      // for.
      //
      // **BETA:** If the caller specifies the `consumer_id`, it returns only the
      // services enabled on the consumer. The `consumer_id` must have the format
      // of "project:{PROJECT-ID}".
      virtual void ListServices(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::ListServicesRequest* request, ::google::api::servicemanagement::v1::ListServicesResponse* response, std::function<void(::grpc::Status)>) = 0;
      // Gets a managed service. Authentication is required unless the service is
      // public.
      virtual void GetService(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::GetServiceRequest* request, ::google::api::servicemanagement::v1::ManagedService* response, std::function<void(::grpc::Status)>) = 0;
      // Creates a new managed service.
      // Please note one producer project can own no more than 20 services.
      //
      // Operation<response: ManagedService>
      virtual void CreateService(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::CreateServiceRequest* request, ::google::longrunning::Operation* response, std::function<void(::grpc::Status)>) = 0;
      // Deletes a managed service. This method will change the service to the
      // `Soft-Delete` state for 30 days. Within this period, service producers may
      // call [UndeleteService][google.api.servicemanagement.v1.ServiceManager.UndeleteService] to restore the service.
      // After 30 days, the service will be permanently deleted.
      //
      // Operation<response: google.protobuf.Empty>
      virtual void DeleteService(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::DeleteServiceRequest* request, ::google::longrunning::Operation* response, std::function<void(::grpc::Status)>) = 0;
      // Revives a previously deleted managed service. The method restores the
      // service using the configuration at the time the service was deleted.
      // The target service must exist and must have been deleted within the
      // last 30 days.
      //
      // Operation<response: UndeleteServiceResponse>
      virtual void UndeleteService(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::UndeleteServiceRequest* request, ::google::longrunning::Operation* response, std::function<void(::grpc::Status)>) = 0;
      // Lists the history of the service configuration for a managed service,
      // from the newest to the oldest.
      virtual void ListServiceConfigs(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::ListServiceConfigsRequest* request, ::google::api::servicemanagement::v1::ListServiceConfigsResponse* response, std::function<void(::grpc::Status)>) = 0;
      // Gets a service configuration (version) for a managed service.
      virtual void GetServiceConfig(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::GetServiceConfigRequest* request, ::google::api::Service* response, std::function<void(::grpc::Status)>) = 0;
      // Creates a new service configuration (version) for a managed service.
      // This method only stores the service configuration. To roll out the service
      // configuration to backend systems please call
      // [CreateServiceRollout][google.api.servicemanagement.v1.ServiceManager.CreateServiceRollout].
      //
      // Only the 100 most recent service configurations and ones referenced by
      // existing rollouts are kept for each service. The rest will be deleted
      // eventually.
      virtual void CreateServiceConfig(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::CreateServiceConfigRequest* request, ::google::api::Service* response, std::function<void(::grpc::Status)>) = 0;
      // Creates a new service configuration (version) for a managed service based
      // on
      // user-supplied configuration source files (for example: OpenAPI
      // Specification). This method stores the source configurations as well as the
      // generated service configuration. To rollout the service configuration to
      // other services,
      // please call [CreateServiceRollout][google.api.servicemanagement.v1.ServiceManager.CreateServiceRollout].
      //
      // Only the 100 most recent configuration sources and ones referenced by
      // existing service configurtions are kept for each service. The rest will be
      // deleted eventually.
      //
      // Operation<response: SubmitConfigSourceResponse>
      virtual void SubmitConfigSource(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::SubmitConfigSourceRequest* request, ::google::longrunning::Operation* response, std::function<void(::grpc::Status)>) = 0;
      // Lists the history of the service configuration rollouts for a managed
      // service, from the newest to the oldest.
      virtual void ListServiceRollouts(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::ListServiceRolloutsRequest* request, ::google::api::servicemanagement::v1::ListServiceRolloutsResponse* response, std::function<void(::grpc::Status)>) = 0;
      // Gets a service configuration [rollout][google.api.servicemanagement.v1.Rollout].
      virtual void GetServiceRollout(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::GetServiceRolloutRequest* request, ::google::api::servicemanagement::v1::Rollout* response, std::function<void(::grpc::Status)>) = 0;
      // Creates a new service configuration rollout. Based on rollout, the
      // Google Service Management will roll out the service configurations to
      // different backend services. For example, the logging configuration will be
      // pushed to Google Cloud Logging.
      //
      // Please note that any previous pending and running Rollouts and associated
      // Operations will be automatically cancelled so that the latest Rollout will
      // not be blocked by previous Rollouts.
      //
      // Only the 100 most recent (in any state) and the last 10 successful (if not
      // already part of the set of 100 most recent) rollouts are kept for each
      // service. The rest will be deleted eventually.
      //
      // Operation<response: Rollout>
      virtual void CreateServiceRollout(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::CreateServiceRolloutRequest* request, ::google::longrunning::Operation* response, std::function<void(::grpc::Status)>) = 0;
      // Generates and returns a report (errors, warnings and changes from
      // existing configurations) associated with
      // GenerateConfigReportRequest.new_value
      //
      // If GenerateConfigReportRequest.old_value is specified,
      // GenerateConfigReportRequest will contain a single ChangeReport based on the
      // comparison between GenerateConfigReportRequest.new_value and
      // GenerateConfigReportRequest.old_value.
      // If GenerateConfigReportRequest.old_value is not specified, this method
      // will compare GenerateConfigReportRequest.new_value with the last pushed
      // service configuration.
      virtual void GenerateConfigReport(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::GenerateConfigReportRequest* request, ::google::api::servicemanagement::v1::GenerateConfigReportResponse* response, std::function<void(::grpc::Status)>) = 0;
      // Enables a [service][google.api.servicemanagement.v1.ManagedService] for a project, so it can be used
      // for the project. See
      // [Cloud Auth Guide](https://cloud.google.com/docs/authentication) for
      // more information.
      //
      // Operation<response: EnableServiceResponse>
      virtual void EnableService(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::EnableServiceRequest* request, ::google::longrunning::Operation* response, std::function<void(::grpc::Status)>) = 0;
      // Disables a [service][google.api.servicemanagement.v1.ManagedService] for a project, so it can no longer be
      // be used for the project. It prevents accidental usage that may cause
      // unexpected billing charges or security leaks.
      //
      // Operation<response: DisableServiceResponse>
      virtual void DisableService(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::DisableServiceRequest* request, ::google::longrunning::Operation* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::api::servicemanagement::v1::ListServicesResponse>* AsyncListServicesRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::ListServicesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::api::servicemanagement::v1::ListServicesResponse>* PrepareAsyncListServicesRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::ListServicesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::api::servicemanagement::v1::ManagedService>* AsyncGetServiceRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::GetServiceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::api::servicemanagement::v1::ManagedService>* PrepareAsyncGetServiceRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::GetServiceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* AsyncCreateServiceRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::CreateServiceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* PrepareAsyncCreateServiceRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::CreateServiceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* AsyncDeleteServiceRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::DeleteServiceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* PrepareAsyncDeleteServiceRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::DeleteServiceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* AsyncUndeleteServiceRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::UndeleteServiceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* PrepareAsyncUndeleteServiceRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::UndeleteServiceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::api::servicemanagement::v1::ListServiceConfigsResponse>* AsyncListServiceConfigsRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::ListServiceConfigsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::api::servicemanagement::v1::ListServiceConfigsResponse>* PrepareAsyncListServiceConfigsRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::ListServiceConfigsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::api::Service>* AsyncGetServiceConfigRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::GetServiceConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::api::Service>* PrepareAsyncGetServiceConfigRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::GetServiceConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::api::Service>* AsyncCreateServiceConfigRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::CreateServiceConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::api::Service>* PrepareAsyncCreateServiceConfigRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::CreateServiceConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* AsyncSubmitConfigSourceRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::SubmitConfigSourceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* PrepareAsyncSubmitConfigSourceRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::SubmitConfigSourceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::api::servicemanagement::v1::ListServiceRolloutsResponse>* AsyncListServiceRolloutsRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::ListServiceRolloutsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::api::servicemanagement::v1::ListServiceRolloutsResponse>* PrepareAsyncListServiceRolloutsRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::ListServiceRolloutsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::api::servicemanagement::v1::Rollout>* AsyncGetServiceRolloutRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::GetServiceRolloutRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::api::servicemanagement::v1::Rollout>* PrepareAsyncGetServiceRolloutRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::GetServiceRolloutRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* AsyncCreateServiceRolloutRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::CreateServiceRolloutRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* PrepareAsyncCreateServiceRolloutRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::CreateServiceRolloutRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::api::servicemanagement::v1::GenerateConfigReportResponse>* AsyncGenerateConfigReportRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::GenerateConfigReportRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::api::servicemanagement::v1::GenerateConfigReportResponse>* PrepareAsyncGenerateConfigReportRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::GenerateConfigReportRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* AsyncEnableServiceRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::EnableServiceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* PrepareAsyncEnableServiceRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::EnableServiceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* AsyncDisableServiceRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::DisableServiceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* PrepareAsyncDisableServiceRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::DisableServiceRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status ListServices(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::ListServicesRequest& request, ::google::api::servicemanagement::v1::ListServicesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::api::servicemanagement::v1::ListServicesResponse>> AsyncListServices(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::ListServicesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::api::servicemanagement::v1::ListServicesResponse>>(AsyncListServicesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::api::servicemanagement::v1::ListServicesResponse>> PrepareAsyncListServices(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::ListServicesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::api::servicemanagement::v1::ListServicesResponse>>(PrepareAsyncListServicesRaw(context, request, cq));
    }
    ::grpc::Status GetService(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::GetServiceRequest& request, ::google::api::servicemanagement::v1::ManagedService* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::api::servicemanagement::v1::ManagedService>> AsyncGetService(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::GetServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::api::servicemanagement::v1::ManagedService>>(AsyncGetServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::api::servicemanagement::v1::ManagedService>> PrepareAsyncGetService(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::GetServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::api::servicemanagement::v1::ManagedService>>(PrepareAsyncGetServiceRaw(context, request, cq));
    }
    ::grpc::Status CreateService(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::CreateServiceRequest& request, ::google::longrunning::Operation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> AsyncCreateService(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::CreateServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(AsyncCreateServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> PrepareAsyncCreateService(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::CreateServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(PrepareAsyncCreateServiceRaw(context, request, cq));
    }
    ::grpc::Status DeleteService(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::DeleteServiceRequest& request, ::google::longrunning::Operation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> AsyncDeleteService(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::DeleteServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(AsyncDeleteServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> PrepareAsyncDeleteService(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::DeleteServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(PrepareAsyncDeleteServiceRaw(context, request, cq));
    }
    ::grpc::Status UndeleteService(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::UndeleteServiceRequest& request, ::google::longrunning::Operation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> AsyncUndeleteService(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::UndeleteServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(AsyncUndeleteServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> PrepareAsyncUndeleteService(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::UndeleteServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(PrepareAsyncUndeleteServiceRaw(context, request, cq));
    }
    ::grpc::Status ListServiceConfigs(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::ListServiceConfigsRequest& request, ::google::api::servicemanagement::v1::ListServiceConfigsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::api::servicemanagement::v1::ListServiceConfigsResponse>> AsyncListServiceConfigs(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::ListServiceConfigsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::api::servicemanagement::v1::ListServiceConfigsResponse>>(AsyncListServiceConfigsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::api::servicemanagement::v1::ListServiceConfigsResponse>> PrepareAsyncListServiceConfigs(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::ListServiceConfigsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::api::servicemanagement::v1::ListServiceConfigsResponse>>(PrepareAsyncListServiceConfigsRaw(context, request, cq));
    }
    ::grpc::Status GetServiceConfig(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::GetServiceConfigRequest& request, ::google::api::Service* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::api::Service>> AsyncGetServiceConfig(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::GetServiceConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::api::Service>>(AsyncGetServiceConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::api::Service>> PrepareAsyncGetServiceConfig(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::GetServiceConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::api::Service>>(PrepareAsyncGetServiceConfigRaw(context, request, cq));
    }
    ::grpc::Status CreateServiceConfig(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::CreateServiceConfigRequest& request, ::google::api::Service* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::api::Service>> AsyncCreateServiceConfig(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::CreateServiceConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::api::Service>>(AsyncCreateServiceConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::api::Service>> PrepareAsyncCreateServiceConfig(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::CreateServiceConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::api::Service>>(PrepareAsyncCreateServiceConfigRaw(context, request, cq));
    }
    ::grpc::Status SubmitConfigSource(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::SubmitConfigSourceRequest& request, ::google::longrunning::Operation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> AsyncSubmitConfigSource(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::SubmitConfigSourceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(AsyncSubmitConfigSourceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> PrepareAsyncSubmitConfigSource(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::SubmitConfigSourceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(PrepareAsyncSubmitConfigSourceRaw(context, request, cq));
    }
    ::grpc::Status ListServiceRollouts(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::ListServiceRolloutsRequest& request, ::google::api::servicemanagement::v1::ListServiceRolloutsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::api::servicemanagement::v1::ListServiceRolloutsResponse>> AsyncListServiceRollouts(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::ListServiceRolloutsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::api::servicemanagement::v1::ListServiceRolloutsResponse>>(AsyncListServiceRolloutsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::api::servicemanagement::v1::ListServiceRolloutsResponse>> PrepareAsyncListServiceRollouts(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::ListServiceRolloutsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::api::servicemanagement::v1::ListServiceRolloutsResponse>>(PrepareAsyncListServiceRolloutsRaw(context, request, cq));
    }
    ::grpc::Status GetServiceRollout(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::GetServiceRolloutRequest& request, ::google::api::servicemanagement::v1::Rollout* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::api::servicemanagement::v1::Rollout>> AsyncGetServiceRollout(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::GetServiceRolloutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::api::servicemanagement::v1::Rollout>>(AsyncGetServiceRolloutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::api::servicemanagement::v1::Rollout>> PrepareAsyncGetServiceRollout(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::GetServiceRolloutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::api::servicemanagement::v1::Rollout>>(PrepareAsyncGetServiceRolloutRaw(context, request, cq));
    }
    ::grpc::Status CreateServiceRollout(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::CreateServiceRolloutRequest& request, ::google::longrunning::Operation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> AsyncCreateServiceRollout(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::CreateServiceRolloutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(AsyncCreateServiceRolloutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> PrepareAsyncCreateServiceRollout(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::CreateServiceRolloutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(PrepareAsyncCreateServiceRolloutRaw(context, request, cq));
    }
    ::grpc::Status GenerateConfigReport(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::GenerateConfigReportRequest& request, ::google::api::servicemanagement::v1::GenerateConfigReportResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::api::servicemanagement::v1::GenerateConfigReportResponse>> AsyncGenerateConfigReport(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::GenerateConfigReportRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::api::servicemanagement::v1::GenerateConfigReportResponse>>(AsyncGenerateConfigReportRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::api::servicemanagement::v1::GenerateConfigReportResponse>> PrepareAsyncGenerateConfigReport(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::GenerateConfigReportRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::api::servicemanagement::v1::GenerateConfigReportResponse>>(PrepareAsyncGenerateConfigReportRaw(context, request, cq));
    }
    ::grpc::Status EnableService(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::EnableServiceRequest& request, ::google::longrunning::Operation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> AsyncEnableService(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::EnableServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(AsyncEnableServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> PrepareAsyncEnableService(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::EnableServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(PrepareAsyncEnableServiceRaw(context, request, cq));
    }
    ::grpc::Status DisableService(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::DisableServiceRequest& request, ::google::longrunning::Operation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> AsyncDisableService(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::DisableServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(AsyncDisableServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> PrepareAsyncDisableService(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::DisableServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(PrepareAsyncDisableServiceRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void ListServices(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::ListServicesRequest* request, ::google::api::servicemanagement::v1::ListServicesResponse* response, std::function<void(::grpc::Status)>) override;
      void GetService(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::GetServiceRequest* request, ::google::api::servicemanagement::v1::ManagedService* response, std::function<void(::grpc::Status)>) override;
      void CreateService(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::CreateServiceRequest* request, ::google::longrunning::Operation* response, std::function<void(::grpc::Status)>) override;
      void DeleteService(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::DeleteServiceRequest* request, ::google::longrunning::Operation* response, std::function<void(::grpc::Status)>) override;
      void UndeleteService(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::UndeleteServiceRequest* request, ::google::longrunning::Operation* response, std::function<void(::grpc::Status)>) override;
      void ListServiceConfigs(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::ListServiceConfigsRequest* request, ::google::api::servicemanagement::v1::ListServiceConfigsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetServiceConfig(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::GetServiceConfigRequest* request, ::google::api::Service* response, std::function<void(::grpc::Status)>) override;
      void CreateServiceConfig(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::CreateServiceConfigRequest* request, ::google::api::Service* response, std::function<void(::grpc::Status)>) override;
      void SubmitConfigSource(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::SubmitConfigSourceRequest* request, ::google::longrunning::Operation* response, std::function<void(::grpc::Status)>) override;
      void ListServiceRollouts(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::ListServiceRolloutsRequest* request, ::google::api::servicemanagement::v1::ListServiceRolloutsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetServiceRollout(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::GetServiceRolloutRequest* request, ::google::api::servicemanagement::v1::Rollout* response, std::function<void(::grpc::Status)>) override;
      void CreateServiceRollout(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::CreateServiceRolloutRequest* request, ::google::longrunning::Operation* response, std::function<void(::grpc::Status)>) override;
      void GenerateConfigReport(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::GenerateConfigReportRequest* request, ::google::api::servicemanagement::v1::GenerateConfigReportResponse* response, std::function<void(::grpc::Status)>) override;
      void EnableService(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::EnableServiceRequest* request, ::google::longrunning::Operation* response, std::function<void(::grpc::Status)>) override;
      void DisableService(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::DisableServiceRequest* request, ::google::longrunning::Operation* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::google::api::servicemanagement::v1::ListServicesResponse>* AsyncListServicesRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::ListServicesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::api::servicemanagement::v1::ListServicesResponse>* PrepareAsyncListServicesRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::ListServicesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::api::servicemanagement::v1::ManagedService>* AsyncGetServiceRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::GetServiceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::api::servicemanagement::v1::ManagedService>* PrepareAsyncGetServiceRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::GetServiceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* AsyncCreateServiceRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::CreateServiceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* PrepareAsyncCreateServiceRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::CreateServiceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* AsyncDeleteServiceRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::DeleteServiceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* PrepareAsyncDeleteServiceRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::DeleteServiceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* AsyncUndeleteServiceRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::UndeleteServiceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* PrepareAsyncUndeleteServiceRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::UndeleteServiceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::api::servicemanagement::v1::ListServiceConfigsResponse>* AsyncListServiceConfigsRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::ListServiceConfigsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::api::servicemanagement::v1::ListServiceConfigsResponse>* PrepareAsyncListServiceConfigsRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::ListServiceConfigsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::api::Service>* AsyncGetServiceConfigRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::GetServiceConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::api::Service>* PrepareAsyncGetServiceConfigRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::GetServiceConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::api::Service>* AsyncCreateServiceConfigRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::CreateServiceConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::api::Service>* PrepareAsyncCreateServiceConfigRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::CreateServiceConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* AsyncSubmitConfigSourceRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::SubmitConfigSourceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* PrepareAsyncSubmitConfigSourceRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::SubmitConfigSourceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::api::servicemanagement::v1::ListServiceRolloutsResponse>* AsyncListServiceRolloutsRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::ListServiceRolloutsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::api::servicemanagement::v1::ListServiceRolloutsResponse>* PrepareAsyncListServiceRolloutsRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::ListServiceRolloutsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::api::servicemanagement::v1::Rollout>* AsyncGetServiceRolloutRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::GetServiceRolloutRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::api::servicemanagement::v1::Rollout>* PrepareAsyncGetServiceRolloutRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::GetServiceRolloutRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* AsyncCreateServiceRolloutRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::CreateServiceRolloutRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* PrepareAsyncCreateServiceRolloutRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::CreateServiceRolloutRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::api::servicemanagement::v1::GenerateConfigReportResponse>* AsyncGenerateConfigReportRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::GenerateConfigReportRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::api::servicemanagement::v1::GenerateConfigReportResponse>* PrepareAsyncGenerateConfigReportRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::GenerateConfigReportRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* AsyncEnableServiceRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::EnableServiceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* PrepareAsyncEnableServiceRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::EnableServiceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* AsyncDisableServiceRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::DisableServiceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* PrepareAsyncDisableServiceRaw(::grpc::ClientContext* context, const ::google::api::servicemanagement::v1::DisableServiceRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ListServices_;
    const ::grpc::internal::RpcMethod rpcmethod_GetService_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateService_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteService_;
    const ::grpc::internal::RpcMethod rpcmethod_UndeleteService_;
    const ::grpc::internal::RpcMethod rpcmethod_ListServiceConfigs_;
    const ::grpc::internal::RpcMethod rpcmethod_GetServiceConfig_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateServiceConfig_;
    const ::grpc::internal::RpcMethod rpcmethod_SubmitConfigSource_;
    const ::grpc::internal::RpcMethod rpcmethod_ListServiceRollouts_;
    const ::grpc::internal::RpcMethod rpcmethod_GetServiceRollout_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateServiceRollout_;
    const ::grpc::internal::RpcMethod rpcmethod_GenerateConfigReport_;
    const ::grpc::internal::RpcMethod rpcmethod_EnableService_;
    const ::grpc::internal::RpcMethod rpcmethod_DisableService_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Lists managed services.
    //
    // Returns all public services. For authenticated users, also returns all
    // services the calling user has "servicemanagement.services.get" permission
    // for.
    //
    // **BETA:** If the caller specifies the `consumer_id`, it returns only the
    // services enabled on the consumer. The `consumer_id` must have the format
    // of "project:{PROJECT-ID}".
    virtual ::grpc::Status ListServices(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::ListServicesRequest* request, ::google::api::servicemanagement::v1::ListServicesResponse* response);
    // Gets a managed service. Authentication is required unless the service is
    // public.
    virtual ::grpc::Status GetService(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::GetServiceRequest* request, ::google::api::servicemanagement::v1::ManagedService* response);
    // Creates a new managed service.
    // Please note one producer project can own no more than 20 services.
    //
    // Operation<response: ManagedService>
    virtual ::grpc::Status CreateService(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::CreateServiceRequest* request, ::google::longrunning::Operation* response);
    // Deletes a managed service. This method will change the service to the
    // `Soft-Delete` state for 30 days. Within this period, service producers may
    // call [UndeleteService][google.api.servicemanagement.v1.ServiceManager.UndeleteService] to restore the service.
    // After 30 days, the service will be permanently deleted.
    //
    // Operation<response: google.protobuf.Empty>
    virtual ::grpc::Status DeleteService(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::DeleteServiceRequest* request, ::google::longrunning::Operation* response);
    // Revives a previously deleted managed service. The method restores the
    // service using the configuration at the time the service was deleted.
    // The target service must exist and must have been deleted within the
    // last 30 days.
    //
    // Operation<response: UndeleteServiceResponse>
    virtual ::grpc::Status UndeleteService(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::UndeleteServiceRequest* request, ::google::longrunning::Operation* response);
    // Lists the history of the service configuration for a managed service,
    // from the newest to the oldest.
    virtual ::grpc::Status ListServiceConfigs(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::ListServiceConfigsRequest* request, ::google::api::servicemanagement::v1::ListServiceConfigsResponse* response);
    // Gets a service configuration (version) for a managed service.
    virtual ::grpc::Status GetServiceConfig(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::GetServiceConfigRequest* request, ::google::api::Service* response);
    // Creates a new service configuration (version) for a managed service.
    // This method only stores the service configuration. To roll out the service
    // configuration to backend systems please call
    // [CreateServiceRollout][google.api.servicemanagement.v1.ServiceManager.CreateServiceRollout].
    //
    // Only the 100 most recent service configurations and ones referenced by
    // existing rollouts are kept for each service. The rest will be deleted
    // eventually.
    virtual ::grpc::Status CreateServiceConfig(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::CreateServiceConfigRequest* request, ::google::api::Service* response);
    // Creates a new service configuration (version) for a managed service based
    // on
    // user-supplied configuration source files (for example: OpenAPI
    // Specification). This method stores the source configurations as well as the
    // generated service configuration. To rollout the service configuration to
    // other services,
    // please call [CreateServiceRollout][google.api.servicemanagement.v1.ServiceManager.CreateServiceRollout].
    //
    // Only the 100 most recent configuration sources and ones referenced by
    // existing service configurtions are kept for each service. The rest will be
    // deleted eventually.
    //
    // Operation<response: SubmitConfigSourceResponse>
    virtual ::grpc::Status SubmitConfigSource(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::SubmitConfigSourceRequest* request, ::google::longrunning::Operation* response);
    // Lists the history of the service configuration rollouts for a managed
    // service, from the newest to the oldest.
    virtual ::grpc::Status ListServiceRollouts(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::ListServiceRolloutsRequest* request, ::google::api::servicemanagement::v1::ListServiceRolloutsResponse* response);
    // Gets a service configuration [rollout][google.api.servicemanagement.v1.Rollout].
    virtual ::grpc::Status GetServiceRollout(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::GetServiceRolloutRequest* request, ::google::api::servicemanagement::v1::Rollout* response);
    // Creates a new service configuration rollout. Based on rollout, the
    // Google Service Management will roll out the service configurations to
    // different backend services. For example, the logging configuration will be
    // pushed to Google Cloud Logging.
    //
    // Please note that any previous pending and running Rollouts and associated
    // Operations will be automatically cancelled so that the latest Rollout will
    // not be blocked by previous Rollouts.
    //
    // Only the 100 most recent (in any state) and the last 10 successful (if not
    // already part of the set of 100 most recent) rollouts are kept for each
    // service. The rest will be deleted eventually.
    //
    // Operation<response: Rollout>
    virtual ::grpc::Status CreateServiceRollout(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::CreateServiceRolloutRequest* request, ::google::longrunning::Operation* response);
    // Generates and returns a report (errors, warnings and changes from
    // existing configurations) associated with
    // GenerateConfigReportRequest.new_value
    //
    // If GenerateConfigReportRequest.old_value is specified,
    // GenerateConfigReportRequest will contain a single ChangeReport based on the
    // comparison between GenerateConfigReportRequest.new_value and
    // GenerateConfigReportRequest.old_value.
    // If GenerateConfigReportRequest.old_value is not specified, this method
    // will compare GenerateConfigReportRequest.new_value with the last pushed
    // service configuration.
    virtual ::grpc::Status GenerateConfigReport(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::GenerateConfigReportRequest* request, ::google::api::servicemanagement::v1::GenerateConfigReportResponse* response);
    // Enables a [service][google.api.servicemanagement.v1.ManagedService] for a project, so it can be used
    // for the project. See
    // [Cloud Auth Guide](https://cloud.google.com/docs/authentication) for
    // more information.
    //
    // Operation<response: EnableServiceResponse>
    virtual ::grpc::Status EnableService(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::EnableServiceRequest* request, ::google::longrunning::Operation* response);
    // Disables a [service][google.api.servicemanagement.v1.ManagedService] for a project, so it can no longer be
    // be used for the project. It prevents accidental usage that may cause
    // unexpected billing charges or security leaks.
    //
    // Operation<response: DisableServiceResponse>
    virtual ::grpc::Status DisableService(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::DisableServiceRequest* request, ::google::longrunning::Operation* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ListServices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListServices() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ListServices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListServices(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::ListServicesRequest* request, ::google::api::servicemanagement::v1::ListServicesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListServices(::grpc::ServerContext* context, ::google::api::servicemanagement::v1::ListServicesRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::api::servicemanagement::v1::ListServicesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetService() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetService(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::GetServiceRequest* request, ::google::api::servicemanagement::v1::ManagedService* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetService(::grpc::ServerContext* context, ::google::api::servicemanagement::v1::GetServiceRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::api::servicemanagement::v1::ManagedService>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateService() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_CreateService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateService(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::CreateServiceRequest* request, ::google::longrunning::Operation* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateService(::grpc::ServerContext* context, ::google::api::servicemanagement::v1::CreateServiceRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::longrunning::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeleteService() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_DeleteService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteService(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::DeleteServiceRequest* request, ::google::longrunning::Operation* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteService(::grpc::ServerContext* context, ::google::api::servicemanagement::v1::DeleteServiceRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::longrunning::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UndeleteService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UndeleteService() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_UndeleteService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UndeleteService(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::UndeleteServiceRequest* request, ::google::longrunning::Operation* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUndeleteService(::grpc::ServerContext* context, ::google::api::servicemanagement::v1::UndeleteServiceRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::longrunning::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListServiceConfigs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListServiceConfigs() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_ListServiceConfigs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListServiceConfigs(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::ListServiceConfigsRequest* request, ::google::api::servicemanagement::v1::ListServiceConfigsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListServiceConfigs(::grpc::ServerContext* context, ::google::api::servicemanagement::v1::ListServiceConfigsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::api::servicemanagement::v1::ListServiceConfigsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetServiceConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetServiceConfig() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_GetServiceConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceConfig(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::GetServiceConfigRequest* request, ::google::api::Service* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetServiceConfig(::grpc::ServerContext* context, ::google::api::servicemanagement::v1::GetServiceConfigRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::api::Service>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateServiceConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateServiceConfig() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_CreateServiceConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateServiceConfig(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::CreateServiceConfigRequest* request, ::google::api::Service* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateServiceConfig(::grpc::ServerContext* context, ::google::api::servicemanagement::v1::CreateServiceConfigRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::api::Service>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubmitConfigSource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SubmitConfigSource() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_SubmitConfigSource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitConfigSource(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::SubmitConfigSourceRequest* request, ::google::longrunning::Operation* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitConfigSource(::grpc::ServerContext* context, ::google::api::servicemanagement::v1::SubmitConfigSourceRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::longrunning::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListServiceRollouts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListServiceRollouts() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_ListServiceRollouts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListServiceRollouts(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::ListServiceRolloutsRequest* request, ::google::api::servicemanagement::v1::ListServiceRolloutsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListServiceRollouts(::grpc::ServerContext* context, ::google::api::servicemanagement::v1::ListServiceRolloutsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::api::servicemanagement::v1::ListServiceRolloutsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetServiceRollout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetServiceRollout() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_GetServiceRollout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceRollout(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::GetServiceRolloutRequest* request, ::google::api::servicemanagement::v1::Rollout* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetServiceRollout(::grpc::ServerContext* context, ::google::api::servicemanagement::v1::GetServiceRolloutRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::api::servicemanagement::v1::Rollout>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateServiceRollout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateServiceRollout() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_CreateServiceRollout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateServiceRollout(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::CreateServiceRolloutRequest* request, ::google::longrunning::Operation* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateServiceRollout(::grpc::ServerContext* context, ::google::api::servicemanagement::v1::CreateServiceRolloutRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::longrunning::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GenerateConfigReport : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GenerateConfigReport() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_GenerateConfigReport() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateConfigReport(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::GenerateConfigReportRequest* request, ::google::api::servicemanagement::v1::GenerateConfigReportResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGenerateConfigReport(::grpc::ServerContext* context, ::google::api::servicemanagement::v1::GenerateConfigReportRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::api::servicemanagement::v1::GenerateConfigReportResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_EnableService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_EnableService() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_EnableService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EnableService(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::EnableServiceRequest* request, ::google::longrunning::Operation* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEnableService(::grpc::ServerContext* context, ::google::api::servicemanagement::v1::EnableServiceRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::longrunning::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DisableService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DisableService() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_DisableService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DisableService(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::DisableServiceRequest* request, ::google::longrunning::Operation* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDisableService(::grpc::ServerContext* context, ::google::api::servicemanagement::v1::DisableServiceRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::longrunning::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ListServices<WithAsyncMethod_GetService<WithAsyncMethod_CreateService<WithAsyncMethod_DeleteService<WithAsyncMethod_UndeleteService<WithAsyncMethod_ListServiceConfigs<WithAsyncMethod_GetServiceConfig<WithAsyncMethod_CreateServiceConfig<WithAsyncMethod_SubmitConfigSource<WithAsyncMethod_ListServiceRollouts<WithAsyncMethod_GetServiceRollout<WithAsyncMethod_CreateServiceRollout<WithAsyncMethod_GenerateConfigReport<WithAsyncMethod_EnableService<WithAsyncMethod_DisableService<Service > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListServices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_ListServices() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::google::api::servicemanagement::v1::ListServicesRequest, ::google::api::servicemanagement::v1::ListServicesResponse>(
          [this](::grpc::ServerContext* context,
                 const ::google::api::servicemanagement::v1::ListServicesRequest* request,
                 ::google::api::servicemanagement::v1::ListServicesResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->ListServices(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_ListServices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListServices(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::ListServicesRequest* request, ::google::api::servicemanagement::v1::ListServicesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ListServices(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::ListServicesRequest* request, ::google::api::servicemanagement::v1::ListServicesResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetService() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::google::api::servicemanagement::v1::GetServiceRequest, ::google::api::servicemanagement::v1::ManagedService>(
          [this](::grpc::ServerContext* context,
                 const ::google::api::servicemanagement::v1::GetServiceRequest* request,
                 ::google::api::servicemanagement::v1::ManagedService* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetService(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_GetService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetService(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::GetServiceRequest* request, ::google::api::servicemanagement::v1::ManagedService* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetService(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::GetServiceRequest* request, ::google::api::servicemanagement::v1::ManagedService* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_CreateService() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::google::api::servicemanagement::v1::CreateServiceRequest, ::google::longrunning::Operation>(
          [this](::grpc::ServerContext* context,
                 const ::google::api::servicemanagement::v1::CreateServiceRequest* request,
                 ::google::longrunning::Operation* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->CreateService(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_CreateService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateService(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::CreateServiceRequest* request, ::google::longrunning::Operation* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CreateService(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::CreateServiceRequest* request, ::google::longrunning::Operation* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_DeleteService() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::google::api::servicemanagement::v1::DeleteServiceRequest, ::google::longrunning::Operation>(
          [this](::grpc::ServerContext* context,
                 const ::google::api::servicemanagement::v1::DeleteServiceRequest* request,
                 ::google::longrunning::Operation* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->DeleteService(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_DeleteService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteService(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::DeleteServiceRequest* request, ::google::longrunning::Operation* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DeleteService(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::DeleteServiceRequest* request, ::google::longrunning::Operation* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UndeleteService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_UndeleteService() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::google::api::servicemanagement::v1::UndeleteServiceRequest, ::google::longrunning::Operation>(
          [this](::grpc::ServerContext* context,
                 const ::google::api::servicemanagement::v1::UndeleteServiceRequest* request,
                 ::google::longrunning::Operation* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->UndeleteService(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_UndeleteService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UndeleteService(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::UndeleteServiceRequest* request, ::google::longrunning::Operation* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void UndeleteService(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::UndeleteServiceRequest* request, ::google::longrunning::Operation* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListServiceConfigs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_ListServiceConfigs() {
      ::grpc::Service::experimental().MarkMethodCallback(5,
        new ::grpc::internal::CallbackUnaryHandler< ::google::api::servicemanagement::v1::ListServiceConfigsRequest, ::google::api::servicemanagement::v1::ListServiceConfigsResponse>(
          [this](::grpc::ServerContext* context,
                 const ::google::api::servicemanagement::v1::ListServiceConfigsRequest* request,
                 ::google::api::servicemanagement::v1::ListServiceConfigsResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->ListServiceConfigs(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_ListServiceConfigs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListServiceConfigs(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::ListServiceConfigsRequest* request, ::google::api::servicemanagement::v1::ListServiceConfigsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ListServiceConfigs(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::ListServiceConfigsRequest* request, ::google::api::servicemanagement::v1::ListServiceConfigsResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetServiceConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetServiceConfig() {
      ::grpc::Service::experimental().MarkMethodCallback(6,
        new ::grpc::internal::CallbackUnaryHandler< ::google::api::servicemanagement::v1::GetServiceConfigRequest, ::google::api::Service>(
          [this](::grpc::ServerContext* context,
                 const ::google::api::servicemanagement::v1::GetServiceConfigRequest* request,
                 ::google::api::Service* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetServiceConfig(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_GetServiceConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceConfig(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::GetServiceConfigRequest* request, ::google::api::Service* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetServiceConfig(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::GetServiceConfigRequest* request, ::google::api::Service* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateServiceConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_CreateServiceConfig() {
      ::grpc::Service::experimental().MarkMethodCallback(7,
        new ::grpc::internal::CallbackUnaryHandler< ::google::api::servicemanagement::v1::CreateServiceConfigRequest, ::google::api::Service>(
          [this](::grpc::ServerContext* context,
                 const ::google::api::servicemanagement::v1::CreateServiceConfigRequest* request,
                 ::google::api::Service* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->CreateServiceConfig(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_CreateServiceConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateServiceConfig(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::CreateServiceConfigRequest* request, ::google::api::Service* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CreateServiceConfig(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::CreateServiceConfigRequest* request, ::google::api::Service* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SubmitConfigSource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_SubmitConfigSource() {
      ::grpc::Service::experimental().MarkMethodCallback(8,
        new ::grpc::internal::CallbackUnaryHandler< ::google::api::servicemanagement::v1::SubmitConfigSourceRequest, ::google::longrunning::Operation>(
          [this](::grpc::ServerContext* context,
                 const ::google::api::servicemanagement::v1::SubmitConfigSourceRequest* request,
                 ::google::longrunning::Operation* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SubmitConfigSource(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_SubmitConfigSource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitConfigSource(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::SubmitConfigSourceRequest* request, ::google::longrunning::Operation* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SubmitConfigSource(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::SubmitConfigSourceRequest* request, ::google::longrunning::Operation* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListServiceRollouts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_ListServiceRollouts() {
      ::grpc::Service::experimental().MarkMethodCallback(9,
        new ::grpc::internal::CallbackUnaryHandler< ::google::api::servicemanagement::v1::ListServiceRolloutsRequest, ::google::api::servicemanagement::v1::ListServiceRolloutsResponse>(
          [this](::grpc::ServerContext* context,
                 const ::google::api::servicemanagement::v1::ListServiceRolloutsRequest* request,
                 ::google::api::servicemanagement::v1::ListServiceRolloutsResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->ListServiceRollouts(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_ListServiceRollouts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListServiceRollouts(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::ListServiceRolloutsRequest* request, ::google::api::servicemanagement::v1::ListServiceRolloutsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ListServiceRollouts(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::ListServiceRolloutsRequest* request, ::google::api::servicemanagement::v1::ListServiceRolloutsResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetServiceRollout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetServiceRollout() {
      ::grpc::Service::experimental().MarkMethodCallback(10,
        new ::grpc::internal::CallbackUnaryHandler< ::google::api::servicemanagement::v1::GetServiceRolloutRequest, ::google::api::servicemanagement::v1::Rollout>(
          [this](::grpc::ServerContext* context,
                 const ::google::api::servicemanagement::v1::GetServiceRolloutRequest* request,
                 ::google::api::servicemanagement::v1::Rollout* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetServiceRollout(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_GetServiceRollout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceRollout(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::GetServiceRolloutRequest* request, ::google::api::servicemanagement::v1::Rollout* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetServiceRollout(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::GetServiceRolloutRequest* request, ::google::api::servicemanagement::v1::Rollout* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateServiceRollout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_CreateServiceRollout() {
      ::grpc::Service::experimental().MarkMethodCallback(11,
        new ::grpc::internal::CallbackUnaryHandler< ::google::api::servicemanagement::v1::CreateServiceRolloutRequest, ::google::longrunning::Operation>(
          [this](::grpc::ServerContext* context,
                 const ::google::api::servicemanagement::v1::CreateServiceRolloutRequest* request,
                 ::google::longrunning::Operation* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->CreateServiceRollout(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_CreateServiceRollout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateServiceRollout(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::CreateServiceRolloutRequest* request, ::google::longrunning::Operation* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CreateServiceRollout(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::CreateServiceRolloutRequest* request, ::google::longrunning::Operation* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GenerateConfigReport : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GenerateConfigReport() {
      ::grpc::Service::experimental().MarkMethodCallback(12,
        new ::grpc::internal::CallbackUnaryHandler< ::google::api::servicemanagement::v1::GenerateConfigReportRequest, ::google::api::servicemanagement::v1::GenerateConfigReportResponse>(
          [this](::grpc::ServerContext* context,
                 const ::google::api::servicemanagement::v1::GenerateConfigReportRequest* request,
                 ::google::api::servicemanagement::v1::GenerateConfigReportResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GenerateConfigReport(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_GenerateConfigReport() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateConfigReport(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::GenerateConfigReportRequest* request, ::google::api::servicemanagement::v1::GenerateConfigReportResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GenerateConfigReport(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::GenerateConfigReportRequest* request, ::google::api::servicemanagement::v1::GenerateConfigReportResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_EnableService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_EnableService() {
      ::grpc::Service::experimental().MarkMethodCallback(13,
        new ::grpc::internal::CallbackUnaryHandler< ::google::api::servicemanagement::v1::EnableServiceRequest, ::google::longrunning::Operation>(
          [this](::grpc::ServerContext* context,
                 const ::google::api::servicemanagement::v1::EnableServiceRequest* request,
                 ::google::longrunning::Operation* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->EnableService(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_EnableService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EnableService(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::EnableServiceRequest* request, ::google::longrunning::Operation* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void EnableService(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::EnableServiceRequest* request, ::google::longrunning::Operation* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DisableService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_DisableService() {
      ::grpc::Service::experimental().MarkMethodCallback(14,
        new ::grpc::internal::CallbackUnaryHandler< ::google::api::servicemanagement::v1::DisableServiceRequest, ::google::longrunning::Operation>(
          [this](::grpc::ServerContext* context,
                 const ::google::api::servicemanagement::v1::DisableServiceRequest* request,
                 ::google::longrunning::Operation* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->DisableService(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_DisableService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DisableService(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::DisableServiceRequest* request, ::google::longrunning::Operation* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DisableService(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::DisableServiceRequest* request, ::google::longrunning::Operation* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_ListServices<ExperimentalWithCallbackMethod_GetService<ExperimentalWithCallbackMethod_CreateService<ExperimentalWithCallbackMethod_DeleteService<ExperimentalWithCallbackMethod_UndeleteService<ExperimentalWithCallbackMethod_ListServiceConfigs<ExperimentalWithCallbackMethod_GetServiceConfig<ExperimentalWithCallbackMethod_CreateServiceConfig<ExperimentalWithCallbackMethod_SubmitConfigSource<ExperimentalWithCallbackMethod_ListServiceRollouts<ExperimentalWithCallbackMethod_GetServiceRollout<ExperimentalWithCallbackMethod_CreateServiceRollout<ExperimentalWithCallbackMethod_GenerateConfigReport<ExperimentalWithCallbackMethod_EnableService<ExperimentalWithCallbackMethod_DisableService<Service > > > > > > > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ListServices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListServices() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ListServices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListServices(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::ListServicesRequest* request, ::google::api::servicemanagement::v1::ListServicesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetService() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetService(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::GetServiceRequest* request, ::google::api::servicemanagement::v1::ManagedService* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateService() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_CreateService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateService(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::CreateServiceRequest* request, ::google::longrunning::Operation* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeleteService() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_DeleteService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteService(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::DeleteServiceRequest* request, ::google::longrunning::Operation* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UndeleteService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UndeleteService() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_UndeleteService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UndeleteService(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::UndeleteServiceRequest* request, ::google::longrunning::Operation* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListServiceConfigs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListServiceConfigs() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_ListServiceConfigs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListServiceConfigs(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::ListServiceConfigsRequest* request, ::google::api::servicemanagement::v1::ListServiceConfigsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetServiceConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetServiceConfig() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_GetServiceConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceConfig(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::GetServiceConfigRequest* request, ::google::api::Service* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateServiceConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateServiceConfig() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_CreateServiceConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateServiceConfig(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::CreateServiceConfigRequest* request, ::google::api::Service* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubmitConfigSource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SubmitConfigSource() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_SubmitConfigSource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitConfigSource(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::SubmitConfigSourceRequest* request, ::google::longrunning::Operation* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListServiceRollouts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListServiceRollouts() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_ListServiceRollouts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListServiceRollouts(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::ListServiceRolloutsRequest* request, ::google::api::servicemanagement::v1::ListServiceRolloutsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetServiceRollout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetServiceRollout() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_GetServiceRollout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceRollout(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::GetServiceRolloutRequest* request, ::google::api::servicemanagement::v1::Rollout* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateServiceRollout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateServiceRollout() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_CreateServiceRollout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateServiceRollout(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::CreateServiceRolloutRequest* request, ::google::longrunning::Operation* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GenerateConfigReport : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GenerateConfigReport() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_GenerateConfigReport() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateConfigReport(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::GenerateConfigReportRequest* request, ::google::api::servicemanagement::v1::GenerateConfigReportResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_EnableService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_EnableService() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_EnableService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EnableService(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::EnableServiceRequest* request, ::google::longrunning::Operation* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DisableService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DisableService() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_DisableService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DisableService(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::DisableServiceRequest* request, ::google::longrunning::Operation* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListServices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ListServices() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ListServices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListServices(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::ListServicesRequest* request, ::google::api::servicemanagement::v1::ListServicesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListServices(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetService() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetService(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::GetServiceRequest* request, ::google::api::servicemanagement::v1::ManagedService* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetService(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CreateService() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_CreateService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateService(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::CreateServiceRequest* request, ::google::longrunning::Operation* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateService(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_DeleteService() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_DeleteService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteService(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::DeleteServiceRequest* request, ::google::longrunning::Operation* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteService(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UndeleteService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_UndeleteService() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_UndeleteService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UndeleteService(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::UndeleteServiceRequest* request, ::google::longrunning::Operation* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUndeleteService(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListServiceConfigs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ListServiceConfigs() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_ListServiceConfigs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListServiceConfigs(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::ListServiceConfigsRequest* request, ::google::api::servicemanagement::v1::ListServiceConfigsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListServiceConfigs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetServiceConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetServiceConfig() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_GetServiceConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceConfig(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::GetServiceConfigRequest* request, ::google::api::Service* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetServiceConfig(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateServiceConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CreateServiceConfig() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_CreateServiceConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateServiceConfig(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::CreateServiceConfigRequest* request, ::google::api::Service* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateServiceConfig(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubmitConfigSource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SubmitConfigSource() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_SubmitConfigSource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitConfigSource(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::SubmitConfigSourceRequest* request, ::google::longrunning::Operation* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitConfigSource(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListServiceRollouts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ListServiceRollouts() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_ListServiceRollouts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListServiceRollouts(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::ListServiceRolloutsRequest* request, ::google::api::servicemanagement::v1::ListServiceRolloutsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListServiceRollouts(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetServiceRollout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetServiceRollout() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_GetServiceRollout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceRollout(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::GetServiceRolloutRequest* request, ::google::api::servicemanagement::v1::Rollout* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetServiceRollout(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateServiceRollout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CreateServiceRollout() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_CreateServiceRollout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateServiceRollout(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::CreateServiceRolloutRequest* request, ::google::longrunning::Operation* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateServiceRollout(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GenerateConfigReport : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GenerateConfigReport() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_GenerateConfigReport() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateConfigReport(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::GenerateConfigReportRequest* request, ::google::api::servicemanagement::v1::GenerateConfigReportResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGenerateConfigReport(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_EnableService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_EnableService() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_EnableService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EnableService(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::EnableServiceRequest* request, ::google::longrunning::Operation* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEnableService(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DisableService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_DisableService() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_DisableService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DisableService(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::DisableServiceRequest* request, ::google::longrunning::Operation* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDisableService(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListServices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_ListServices() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->ListServices(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_ListServices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListServices(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::ListServicesRequest* request, ::google::api::servicemanagement::v1::ListServicesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ListServices(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetService() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetService(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetService(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::GetServiceRequest* request, ::google::api::servicemanagement::v1::ManagedService* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetService(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateService() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->CreateService(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateService(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::CreateServiceRequest* request, ::google::longrunning::Operation* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CreateService(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteService() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->DeleteService(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteService(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::DeleteServiceRequest* request, ::google::longrunning::Operation* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DeleteService(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UndeleteService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_UndeleteService() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->UndeleteService(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_UndeleteService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UndeleteService(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::UndeleteServiceRequest* request, ::google::longrunning::Operation* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void UndeleteService(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListServiceConfigs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_ListServiceConfigs() {
      ::grpc::Service::experimental().MarkMethodRawCallback(5,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->ListServiceConfigs(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_ListServiceConfigs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListServiceConfigs(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::ListServiceConfigsRequest* request, ::google::api::servicemanagement::v1::ListServiceConfigsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ListServiceConfigs(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetServiceConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetServiceConfig() {
      ::grpc::Service::experimental().MarkMethodRawCallback(6,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetServiceConfig(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetServiceConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceConfig(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::GetServiceConfigRequest* request, ::google::api::Service* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetServiceConfig(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateServiceConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateServiceConfig() {
      ::grpc::Service::experimental().MarkMethodRawCallback(7,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->CreateServiceConfig(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateServiceConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateServiceConfig(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::CreateServiceConfigRequest* request, ::google::api::Service* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CreateServiceConfig(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SubmitConfigSource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_SubmitConfigSource() {
      ::grpc::Service::experimental().MarkMethodRawCallback(8,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SubmitConfigSource(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SubmitConfigSource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitConfigSource(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::SubmitConfigSourceRequest* request, ::google::longrunning::Operation* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SubmitConfigSource(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListServiceRollouts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_ListServiceRollouts() {
      ::grpc::Service::experimental().MarkMethodRawCallback(9,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->ListServiceRollouts(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_ListServiceRollouts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListServiceRollouts(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::ListServiceRolloutsRequest* request, ::google::api::servicemanagement::v1::ListServiceRolloutsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ListServiceRollouts(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetServiceRollout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetServiceRollout() {
      ::grpc::Service::experimental().MarkMethodRawCallback(10,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetServiceRollout(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetServiceRollout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceRollout(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::GetServiceRolloutRequest* request, ::google::api::servicemanagement::v1::Rollout* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetServiceRollout(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateServiceRollout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateServiceRollout() {
      ::grpc::Service::experimental().MarkMethodRawCallback(11,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->CreateServiceRollout(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateServiceRollout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateServiceRollout(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::CreateServiceRolloutRequest* request, ::google::longrunning::Operation* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CreateServiceRollout(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GenerateConfigReport : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GenerateConfigReport() {
      ::grpc::Service::experimental().MarkMethodRawCallback(12,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GenerateConfigReport(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GenerateConfigReport() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateConfigReport(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::GenerateConfigReportRequest* request, ::google::api::servicemanagement::v1::GenerateConfigReportResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GenerateConfigReport(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_EnableService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_EnableService() {
      ::grpc::Service::experimental().MarkMethodRawCallback(13,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->EnableService(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_EnableService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EnableService(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::EnableServiceRequest* request, ::google::longrunning::Operation* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void EnableService(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DisableService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_DisableService() {
      ::grpc::Service::experimental().MarkMethodRawCallback(14,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->DisableService(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_DisableService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DisableService(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::DisableServiceRequest* request, ::google::longrunning::Operation* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DisableService(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListServices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListServices() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::google::api::servicemanagement::v1::ListServicesRequest, ::google::api::servicemanagement::v1::ListServicesResponse>(std::bind(&WithStreamedUnaryMethod_ListServices<BaseClass>::StreamedListServices, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListServices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListServices(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::ListServicesRequest* request, ::google::api::servicemanagement::v1::ListServicesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListServices(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::api::servicemanagement::v1::ListServicesRequest,::google::api::servicemanagement::v1::ListServicesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetService() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::google::api::servicemanagement::v1::GetServiceRequest, ::google::api::servicemanagement::v1::ManagedService>(std::bind(&WithStreamedUnaryMethod_GetService<BaseClass>::StreamedGetService, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetService(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::GetServiceRequest* request, ::google::api::servicemanagement::v1::ManagedService* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetService(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::api::servicemanagement::v1::GetServiceRequest,::google::api::servicemanagement::v1::ManagedService>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateService() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::google::api::servicemanagement::v1::CreateServiceRequest, ::google::longrunning::Operation>(std::bind(&WithStreamedUnaryMethod_CreateService<BaseClass>::StreamedCreateService, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateService(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::CreateServiceRequest* request, ::google::longrunning::Operation* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateService(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::api::servicemanagement::v1::CreateServiceRequest,::google::longrunning::Operation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DeleteService() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::google::api::servicemanagement::v1::DeleteServiceRequest, ::google::longrunning::Operation>(std::bind(&WithStreamedUnaryMethod_DeleteService<BaseClass>::StreamedDeleteService, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteService(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::DeleteServiceRequest* request, ::google::longrunning::Operation* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteService(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::api::servicemanagement::v1::DeleteServiceRequest,::google::longrunning::Operation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UndeleteService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UndeleteService() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::google::api::servicemanagement::v1::UndeleteServiceRequest, ::google::longrunning::Operation>(std::bind(&WithStreamedUnaryMethod_UndeleteService<BaseClass>::StreamedUndeleteService, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UndeleteService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UndeleteService(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::UndeleteServiceRequest* request, ::google::longrunning::Operation* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUndeleteService(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::api::servicemanagement::v1::UndeleteServiceRequest,::google::longrunning::Operation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListServiceConfigs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListServiceConfigs() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::google::api::servicemanagement::v1::ListServiceConfigsRequest, ::google::api::servicemanagement::v1::ListServiceConfigsResponse>(std::bind(&WithStreamedUnaryMethod_ListServiceConfigs<BaseClass>::StreamedListServiceConfigs, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListServiceConfigs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListServiceConfigs(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::ListServiceConfigsRequest* request, ::google::api::servicemanagement::v1::ListServiceConfigsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListServiceConfigs(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::api::servicemanagement::v1::ListServiceConfigsRequest,::google::api::servicemanagement::v1::ListServiceConfigsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetServiceConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetServiceConfig() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::google::api::servicemanagement::v1::GetServiceConfigRequest, ::google::api::Service>(std::bind(&WithStreamedUnaryMethod_GetServiceConfig<BaseClass>::StreamedGetServiceConfig, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetServiceConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetServiceConfig(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::GetServiceConfigRequest* request, ::google::api::Service* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetServiceConfig(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::api::servicemanagement::v1::GetServiceConfigRequest,::google::api::Service>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateServiceConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateServiceConfig() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::google::api::servicemanagement::v1::CreateServiceConfigRequest, ::google::api::Service>(std::bind(&WithStreamedUnaryMethod_CreateServiceConfig<BaseClass>::StreamedCreateServiceConfig, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateServiceConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateServiceConfig(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::CreateServiceConfigRequest* request, ::google::api::Service* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateServiceConfig(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::api::servicemanagement::v1::CreateServiceConfigRequest,::google::api::Service>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SubmitConfigSource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SubmitConfigSource() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::google::api::servicemanagement::v1::SubmitConfigSourceRequest, ::google::longrunning::Operation>(std::bind(&WithStreamedUnaryMethod_SubmitConfigSource<BaseClass>::StreamedSubmitConfigSource, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SubmitConfigSource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubmitConfigSource(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::SubmitConfigSourceRequest* request, ::google::longrunning::Operation* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSubmitConfigSource(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::api::servicemanagement::v1::SubmitConfigSourceRequest,::google::longrunning::Operation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListServiceRollouts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListServiceRollouts() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler< ::google::api::servicemanagement::v1::ListServiceRolloutsRequest, ::google::api::servicemanagement::v1::ListServiceRolloutsResponse>(std::bind(&WithStreamedUnaryMethod_ListServiceRollouts<BaseClass>::StreamedListServiceRollouts, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListServiceRollouts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListServiceRollouts(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::ListServiceRolloutsRequest* request, ::google::api::servicemanagement::v1::ListServiceRolloutsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListServiceRollouts(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::api::servicemanagement::v1::ListServiceRolloutsRequest,::google::api::servicemanagement::v1::ListServiceRolloutsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetServiceRollout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetServiceRollout() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler< ::google::api::servicemanagement::v1::GetServiceRolloutRequest, ::google::api::servicemanagement::v1::Rollout>(std::bind(&WithStreamedUnaryMethod_GetServiceRollout<BaseClass>::StreamedGetServiceRollout, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetServiceRollout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetServiceRollout(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::GetServiceRolloutRequest* request, ::google::api::servicemanagement::v1::Rollout* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetServiceRollout(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::api::servicemanagement::v1::GetServiceRolloutRequest,::google::api::servicemanagement::v1::Rollout>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateServiceRollout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateServiceRollout() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler< ::google::api::servicemanagement::v1::CreateServiceRolloutRequest, ::google::longrunning::Operation>(std::bind(&WithStreamedUnaryMethod_CreateServiceRollout<BaseClass>::StreamedCreateServiceRollout, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateServiceRollout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateServiceRollout(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::CreateServiceRolloutRequest* request, ::google::longrunning::Operation* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateServiceRollout(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::api::servicemanagement::v1::CreateServiceRolloutRequest,::google::longrunning::Operation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GenerateConfigReport : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GenerateConfigReport() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler< ::google::api::servicemanagement::v1::GenerateConfigReportRequest, ::google::api::servicemanagement::v1::GenerateConfigReportResponse>(std::bind(&WithStreamedUnaryMethod_GenerateConfigReport<BaseClass>::StreamedGenerateConfigReport, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GenerateConfigReport() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GenerateConfigReport(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::GenerateConfigReportRequest* request, ::google::api::servicemanagement::v1::GenerateConfigReportResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGenerateConfigReport(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::api::servicemanagement::v1::GenerateConfigReportRequest,::google::api::servicemanagement::v1::GenerateConfigReportResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_EnableService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_EnableService() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler< ::google::api::servicemanagement::v1::EnableServiceRequest, ::google::longrunning::Operation>(std::bind(&WithStreamedUnaryMethod_EnableService<BaseClass>::StreamedEnableService, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_EnableService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status EnableService(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::EnableServiceRequest* request, ::google::longrunning::Operation* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEnableService(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::api::servicemanagement::v1::EnableServiceRequest,::google::longrunning::Operation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DisableService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DisableService() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler< ::google::api::servicemanagement::v1::DisableServiceRequest, ::google::longrunning::Operation>(std::bind(&WithStreamedUnaryMethod_DisableService<BaseClass>::StreamedDisableService, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DisableService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DisableService(::grpc::ServerContext* context, const ::google::api::servicemanagement::v1::DisableServiceRequest* request, ::google::longrunning::Operation* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDisableService(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::api::servicemanagement::v1::DisableServiceRequest,::google::longrunning::Operation>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ListServices<WithStreamedUnaryMethod_GetService<WithStreamedUnaryMethod_CreateService<WithStreamedUnaryMethod_DeleteService<WithStreamedUnaryMethod_UndeleteService<WithStreamedUnaryMethod_ListServiceConfigs<WithStreamedUnaryMethod_GetServiceConfig<WithStreamedUnaryMethod_CreateServiceConfig<WithStreamedUnaryMethod_SubmitConfigSource<WithStreamedUnaryMethod_ListServiceRollouts<WithStreamedUnaryMethod_GetServiceRollout<WithStreamedUnaryMethod_CreateServiceRollout<WithStreamedUnaryMethod_GenerateConfigReport<WithStreamedUnaryMethod_EnableService<WithStreamedUnaryMethod_DisableService<Service > > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ListServices<WithStreamedUnaryMethod_GetService<WithStreamedUnaryMethod_CreateService<WithStreamedUnaryMethod_DeleteService<WithStreamedUnaryMethod_UndeleteService<WithStreamedUnaryMethod_ListServiceConfigs<WithStreamedUnaryMethod_GetServiceConfig<WithStreamedUnaryMethod_CreateServiceConfig<WithStreamedUnaryMethod_SubmitConfigSource<WithStreamedUnaryMethod_ListServiceRollouts<WithStreamedUnaryMethod_GetServiceRollout<WithStreamedUnaryMethod_CreateServiceRollout<WithStreamedUnaryMethod_GenerateConfigReport<WithStreamedUnaryMethod_EnableService<WithStreamedUnaryMethod_DisableService<Service > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace v1
}  // namespace servicemanagement
}  // namespace api
}  // namespace google


#endif  // GRPC_google_2fapi_2fservicemanagement_2fv1_2fservicemanager_2eproto__INCLUDED
