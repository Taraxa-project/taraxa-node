// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/config_change.proto

#ifndef PROTOBUF_INCLUDED_google_2fapi_2fconfig_5fchange_2eproto
#define PROTOBUF_INCLUDED_google_2fapi_2fconfig_5fchange_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fapi_2fconfig_5fchange_2eproto 

namespace protobuf_google_2fapi_2fconfig_5fchange_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_google_2fapi_2fconfig_5fchange_2eproto
namespace google {
namespace api {
class Advice;
class AdviceDefaultTypeInternal;
extern AdviceDefaultTypeInternal _Advice_default_instance_;
class ConfigChange;
class ConfigChangeDefaultTypeInternal;
extern ConfigChangeDefaultTypeInternal _ConfigChange_default_instance_;
}  // namespace api
}  // namespace google
namespace google {
namespace protobuf {
template<> ::google::api::Advice* Arena::CreateMaybeMessage<::google::api::Advice>(Arena*);
template<> ::google::api::ConfigChange* Arena::CreateMaybeMessage<::google::api::ConfigChange>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace google {
namespace api {

enum ChangeType {
  CHANGE_TYPE_UNSPECIFIED = 0,
  ADDED = 1,
  REMOVED = 2,
  MODIFIED = 3,
  ChangeType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ChangeType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ChangeType_IsValid(int value);
const ChangeType ChangeType_MIN = CHANGE_TYPE_UNSPECIFIED;
const ChangeType ChangeType_MAX = MODIFIED;
const int ChangeType_ARRAYSIZE = ChangeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ChangeType_descriptor();
inline const ::std::string& ChangeType_Name(ChangeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChangeType_descriptor(), value);
}
inline bool ChangeType_Parse(
    const ::std::string& name, ChangeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChangeType>(
    ChangeType_descriptor(), name, value);
}
// ===================================================================

class ConfigChange : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.api.ConfigChange) */ {
 public:
  ConfigChange();
  virtual ~ConfigChange();

  ConfigChange(const ConfigChange& from);

  inline ConfigChange& operator=(const ConfigChange& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigChange(ConfigChange&& from) noexcept
    : ConfigChange() {
    *this = ::std::move(from);
  }

  inline ConfigChange& operator=(ConfigChange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigChange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigChange* internal_default_instance() {
    return reinterpret_cast<const ConfigChange*>(
               &_ConfigChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ConfigChange* other);
  friend void swap(ConfigChange& a, ConfigChange& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigChange* New() const final {
    return CreateMaybeMessage<ConfigChange>(NULL);
  }

  ConfigChange* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigChange>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigChange& from);
  void MergeFrom(const ConfigChange& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigChange* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.api.Advice advices = 5;
  int advices_size() const;
  void clear_advices();
  static const int kAdvicesFieldNumber = 5;
  ::google::api::Advice* mutable_advices(int index);
  ::google::protobuf::RepeatedPtrField< ::google::api::Advice >*
      mutable_advices();
  const ::google::api::Advice& advices(int index) const;
  ::google::api::Advice* add_advices();
  const ::google::protobuf::RepeatedPtrField< ::google::api::Advice >&
      advices() const;

  // string element = 1;
  void clear_element();
  static const int kElementFieldNumber = 1;
  const ::std::string& element() const;
  void set_element(const ::std::string& value);
  #if LANG_CXX11
  void set_element(::std::string&& value);
  #endif
  void set_element(const char* value);
  void set_element(const char* value, size_t size);
  ::std::string* mutable_element();
  ::std::string* release_element();
  void set_allocated_element(::std::string* element);

  // string old_value = 2;
  void clear_old_value();
  static const int kOldValueFieldNumber = 2;
  const ::std::string& old_value() const;
  void set_old_value(const ::std::string& value);
  #if LANG_CXX11
  void set_old_value(::std::string&& value);
  #endif
  void set_old_value(const char* value);
  void set_old_value(const char* value, size_t size);
  ::std::string* mutable_old_value();
  ::std::string* release_old_value();
  void set_allocated_old_value(::std::string* old_value);

  // string new_value = 3;
  void clear_new_value();
  static const int kNewValueFieldNumber = 3;
  const ::std::string& new_value() const;
  void set_new_value(const ::std::string& value);
  #if LANG_CXX11
  void set_new_value(::std::string&& value);
  #endif
  void set_new_value(const char* value);
  void set_new_value(const char* value, size_t size);
  ::std::string* mutable_new_value();
  ::std::string* release_new_value();
  void set_allocated_new_value(::std::string* new_value);

  // .google.api.ChangeType change_type = 4;
  void clear_change_type();
  static const int kChangeTypeFieldNumber = 4;
  ::google::api::ChangeType change_type() const;
  void set_change_type(::google::api::ChangeType value);

  // @@protoc_insertion_point(class_scope:google.api.ConfigChange)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::api::Advice > advices_;
  ::google::protobuf::internal::ArenaStringPtr element_;
  ::google::protobuf::internal::ArenaStringPtr old_value_;
  ::google::protobuf::internal::ArenaStringPtr new_value_;
  int change_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fapi_2fconfig_5fchange_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Advice : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.api.Advice) */ {
 public:
  Advice();
  virtual ~Advice();

  Advice(const Advice& from);

  inline Advice& operator=(const Advice& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Advice(Advice&& from) noexcept
    : Advice() {
    *this = ::std::move(from);
  }

  inline Advice& operator=(Advice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Advice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Advice* internal_default_instance() {
    return reinterpret_cast<const Advice*>(
               &_Advice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Advice* other);
  friend void swap(Advice& a, Advice& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Advice* New() const final {
    return CreateMaybeMessage<Advice>(NULL);
  }

  Advice* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Advice>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Advice& from);
  void MergeFrom(const Advice& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Advice* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string description = 2;
  void clear_description();
  static const int kDescriptionFieldNumber = 2;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // @@protoc_insertion_point(class_scope:google.api.Advice)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fapi_2fconfig_5fchange_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ConfigChange

// string element = 1;
inline void ConfigChange::clear_element() {
  element_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConfigChange::element() const {
  // @@protoc_insertion_point(field_get:google.api.ConfigChange.element)
  return element_.GetNoArena();
}
inline void ConfigChange::set_element(const ::std::string& value) {
  
  element_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.ConfigChange.element)
}
#if LANG_CXX11
inline void ConfigChange::set_element(::std::string&& value) {
  
  element_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.api.ConfigChange.element)
}
#endif
inline void ConfigChange::set_element(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  element_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.ConfigChange.element)
}
inline void ConfigChange::set_element(const char* value, size_t size) {
  
  element_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.ConfigChange.element)
}
inline ::std::string* ConfigChange::mutable_element() {
  
  // @@protoc_insertion_point(field_mutable:google.api.ConfigChange.element)
  return element_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConfigChange::release_element() {
  // @@protoc_insertion_point(field_release:google.api.ConfigChange.element)
  
  return element_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigChange::set_allocated_element(::std::string* element) {
  if (element != NULL) {
    
  } else {
    
  }
  element_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), element);
  // @@protoc_insertion_point(field_set_allocated:google.api.ConfigChange.element)
}

// string old_value = 2;
inline void ConfigChange::clear_old_value() {
  old_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConfigChange::old_value() const {
  // @@protoc_insertion_point(field_get:google.api.ConfigChange.old_value)
  return old_value_.GetNoArena();
}
inline void ConfigChange::set_old_value(const ::std::string& value) {
  
  old_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.ConfigChange.old_value)
}
#if LANG_CXX11
inline void ConfigChange::set_old_value(::std::string&& value) {
  
  old_value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.api.ConfigChange.old_value)
}
#endif
inline void ConfigChange::set_old_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  old_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.ConfigChange.old_value)
}
inline void ConfigChange::set_old_value(const char* value, size_t size) {
  
  old_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.ConfigChange.old_value)
}
inline ::std::string* ConfigChange::mutable_old_value() {
  
  // @@protoc_insertion_point(field_mutable:google.api.ConfigChange.old_value)
  return old_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConfigChange::release_old_value() {
  // @@protoc_insertion_point(field_release:google.api.ConfigChange.old_value)
  
  return old_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigChange::set_allocated_old_value(::std::string* old_value) {
  if (old_value != NULL) {
    
  } else {
    
  }
  old_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), old_value);
  // @@protoc_insertion_point(field_set_allocated:google.api.ConfigChange.old_value)
}

// string new_value = 3;
inline void ConfigChange::clear_new_value() {
  new_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConfigChange::new_value() const {
  // @@protoc_insertion_point(field_get:google.api.ConfigChange.new_value)
  return new_value_.GetNoArena();
}
inline void ConfigChange::set_new_value(const ::std::string& value) {
  
  new_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.ConfigChange.new_value)
}
#if LANG_CXX11
inline void ConfigChange::set_new_value(::std::string&& value) {
  
  new_value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.api.ConfigChange.new_value)
}
#endif
inline void ConfigChange::set_new_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  new_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.ConfigChange.new_value)
}
inline void ConfigChange::set_new_value(const char* value, size_t size) {
  
  new_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.ConfigChange.new_value)
}
inline ::std::string* ConfigChange::mutable_new_value() {
  
  // @@protoc_insertion_point(field_mutable:google.api.ConfigChange.new_value)
  return new_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConfigChange::release_new_value() {
  // @@protoc_insertion_point(field_release:google.api.ConfigChange.new_value)
  
  return new_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigChange::set_allocated_new_value(::std::string* new_value) {
  if (new_value != NULL) {
    
  } else {
    
  }
  new_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), new_value);
  // @@protoc_insertion_point(field_set_allocated:google.api.ConfigChange.new_value)
}

// .google.api.ChangeType change_type = 4;
inline void ConfigChange::clear_change_type() {
  change_type_ = 0;
}
inline ::google::api::ChangeType ConfigChange::change_type() const {
  // @@protoc_insertion_point(field_get:google.api.ConfigChange.change_type)
  return static_cast< ::google::api::ChangeType >(change_type_);
}
inline void ConfigChange::set_change_type(::google::api::ChangeType value) {
  
  change_type_ = value;
  // @@protoc_insertion_point(field_set:google.api.ConfigChange.change_type)
}

// repeated .google.api.Advice advices = 5;
inline int ConfigChange::advices_size() const {
  return advices_.size();
}
inline void ConfigChange::clear_advices() {
  advices_.Clear();
}
inline ::google::api::Advice* ConfigChange::mutable_advices(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.ConfigChange.advices)
  return advices_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::api::Advice >*
ConfigChange::mutable_advices() {
  // @@protoc_insertion_point(field_mutable_list:google.api.ConfigChange.advices)
  return &advices_;
}
inline const ::google::api::Advice& ConfigChange::advices(int index) const {
  // @@protoc_insertion_point(field_get:google.api.ConfigChange.advices)
  return advices_.Get(index);
}
inline ::google::api::Advice* ConfigChange::add_advices() {
  // @@protoc_insertion_point(field_add:google.api.ConfigChange.advices)
  return advices_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::api::Advice >&
ConfigChange::advices() const {
  // @@protoc_insertion_point(field_list:google.api.ConfigChange.advices)
  return advices_;
}

// -------------------------------------------------------------------

// Advice

// string description = 2;
inline void Advice::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Advice::description() const {
  // @@protoc_insertion_point(field_get:google.api.Advice.description)
  return description_.GetNoArena();
}
inline void Advice::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.Advice.description)
}
#if LANG_CXX11
inline void Advice::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.api.Advice.description)
}
#endif
inline void Advice::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.Advice.description)
}
inline void Advice::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.Advice.description)
}
inline ::std::string* Advice::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:google.api.Advice.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Advice::release_description() {
  // @@protoc_insertion_point(field_release:google.api.Advice.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Advice::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:google.api.Advice.description)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace api
}  // namespace google

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::google::api::ChangeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::api::ChangeType>() {
  return ::google::api::ChangeType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_google_2fapi_2fconfig_5fchange_2eproto
