// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/quota.proto

#include "google/api/quota.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_google_2fapi_2fquota_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fapi_2fquota_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MetricRule_MetricCostsEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fapi_2fquota_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_QuotaLimit_ValuesEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fapi_2fquota_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_MetricRule;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fapi_2fquota_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_QuotaLimit;
}  // namespace protobuf_google_2fapi_2fquota_2eproto
namespace google {
namespace api {
class QuotaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Quota>
      _instance;
} _Quota_default_instance_;
class MetricRule_MetricCostsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MetricRule_MetricCostsEntry_DoNotUse>
      _instance;
} _MetricRule_MetricCostsEntry_DoNotUse_default_instance_;
class MetricRuleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MetricRule>
      _instance;
} _MetricRule_default_instance_;
class QuotaLimit_ValuesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<QuotaLimit_ValuesEntry_DoNotUse>
      _instance;
} _QuotaLimit_ValuesEntry_DoNotUse_default_instance_;
class QuotaLimitDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<QuotaLimit>
      _instance;
} _QuotaLimit_default_instance_;
}  // namespace api
}  // namespace google
namespace protobuf_google_2fapi_2fquota_2eproto {
static void InitDefaultsQuota() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::api::_Quota_default_instance_;
    new (ptr) ::google::api::Quota();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::api::Quota::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Quota =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsQuota}, {
      &protobuf_google_2fapi_2fquota_2eproto::scc_info_QuotaLimit.base,
      &protobuf_google_2fapi_2fquota_2eproto::scc_info_MetricRule.base,}};

static void InitDefaultsMetricRule_MetricCostsEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::api::_MetricRule_MetricCostsEntry_DoNotUse_default_instance_;
    new (ptr) ::google::api::MetricRule_MetricCostsEntry_DoNotUse();
  }
  ::google::api::MetricRule_MetricCostsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MetricRule_MetricCostsEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMetricRule_MetricCostsEntry_DoNotUse}, {}};

static void InitDefaultsMetricRule() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::api::_MetricRule_default_instance_;
    new (ptr) ::google::api::MetricRule();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::api::MetricRule::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MetricRule =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMetricRule}, {
      &protobuf_google_2fapi_2fquota_2eproto::scc_info_MetricRule_MetricCostsEntry_DoNotUse.base,}};

static void InitDefaultsQuotaLimit_ValuesEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::api::_QuotaLimit_ValuesEntry_DoNotUse_default_instance_;
    new (ptr) ::google::api::QuotaLimit_ValuesEntry_DoNotUse();
  }
  ::google::api::QuotaLimit_ValuesEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_QuotaLimit_ValuesEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsQuotaLimit_ValuesEntry_DoNotUse}, {}};

static void InitDefaultsQuotaLimit() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::api::_QuotaLimit_default_instance_;
    new (ptr) ::google::api::QuotaLimit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::api::QuotaLimit::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_QuotaLimit =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsQuotaLimit}, {
      &protobuf_google_2fapi_2fquota_2eproto::scc_info_QuotaLimit_ValuesEntry_DoNotUse.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Quota.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MetricRule_MetricCostsEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MetricRule.base);
  ::google::protobuf::internal::InitSCC(&scc_info_QuotaLimit_ValuesEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_QuotaLimit.base);
}

::google::protobuf::Metadata file_level_metadata[5];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::api::Quota, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::api::Quota, limits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::api::Quota, metric_rules_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::api::MetricRule_MetricCostsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::api::MetricRule_MetricCostsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::api::MetricRule_MetricCostsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::api::MetricRule_MetricCostsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::api::MetricRule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::api::MetricRule, selector_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::api::MetricRule, metric_costs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::api::QuotaLimit_ValuesEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::api::QuotaLimit_ValuesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::api::QuotaLimit_ValuesEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::api::QuotaLimit_ValuesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::api::QuotaLimit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::api::QuotaLimit, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::api::QuotaLimit, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::api::QuotaLimit, default_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::api::QuotaLimit, max_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::api::QuotaLimit, free_tier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::api::QuotaLimit, duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::api::QuotaLimit, metric_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::api::QuotaLimit, unit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::api::QuotaLimit, values_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::api::QuotaLimit, display_name_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::google::api::Quota)},
  { 7, 14, sizeof(::google::api::MetricRule_MetricCostsEntry_DoNotUse)},
  { 16, -1, sizeof(::google::api::MetricRule)},
  { 23, 30, sizeof(::google::api::QuotaLimit_ValuesEntry_DoNotUse)},
  { 32, -1, sizeof(::google::api::QuotaLimit)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::api::_Quota_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::api::_MetricRule_MetricCostsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::api::_MetricRule_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::api::_QuotaLimit_ValuesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::api::_QuotaLimit_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "google/api/quota.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\026google/api/quota.proto\022\ngoogle.api\032\034go"
      "ogle/api/annotations.proto\"]\n\005Quota\022&\n\006l"
      "imits\030\003 \003(\0132\026.google.api.QuotaLimit\022,\n\014m"
      "etric_rules\030\004 \003(\0132\026.google.api.MetricRul"
      "e\"\221\001\n\nMetricRule\022\020\n\010selector\030\001 \001(\t\022=\n\014me"
      "tric_costs\030\002 \003(\0132\'.google.api.MetricRule"
      ".MetricCostsEntry\0322\n\020MetricCostsEntry\022\013\n"
      "\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\003:\0028\001\"\225\002\n\nQuotaL"
      "imit\022\014\n\004name\030\006 \001(\t\022\023\n\013description\030\002 \001(\t\022"
      "\025\n\rdefault_limit\030\003 \001(\003\022\021\n\tmax_limit\030\004 \001("
      "\003\022\021\n\tfree_tier\030\007 \001(\003\022\020\n\010duration\030\005 \001(\t\022\016"
      "\n\006metric\030\010 \001(\t\022\014\n\004unit\030\t \001(\t\0222\n\006values\030\n"
      " \003(\0132\".google.api.QuotaLimit.ValuesEntry"
      "\022\024\n\014display_name\030\014 \001(\t\032-\n\013ValuesEntry\022\013\n"
      "\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\003:\0028\001Bl\n\016com.goo"
      "gle.apiB\nQuotaProtoP\001ZEgoogle.golang.org"
      "/genproto/googleapis/api/serviceconfig;s"
      "erviceconfig\242\002\004GAPIb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 707);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/api/quota.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fapi_2fannotations_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_google_2fapi_2fquota_2eproto
namespace google {
namespace api {

// ===================================================================

void Quota::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Quota::kLimitsFieldNumber;
const int Quota::kMetricRulesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Quota::Quota()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fapi_2fquota_2eproto::scc_info_Quota.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.Quota)
}
Quota::Quota(const Quota& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      limits_(from.limits_),
      metric_rules_(from.metric_rules_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.api.Quota)
}

void Quota::SharedCtor() {
}

Quota::~Quota() {
  // @@protoc_insertion_point(destructor:google.api.Quota)
  SharedDtor();
}

void Quota::SharedDtor() {
}

void Quota::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Quota::descriptor() {
  ::protobuf_google_2fapi_2fquota_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fapi_2fquota_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Quota& Quota::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fapi_2fquota_2eproto::scc_info_Quota.base);
  return *internal_default_instance();
}


void Quota::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.Quota)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  limits_.Clear();
  metric_rules_.Clear();
  _internal_metadata_.Clear();
}

bool Quota::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.api.Quota)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.api.QuotaLimit limits = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_limits()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.api.MetricRule metric_rules = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_metric_rules()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.api.Quota)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.api.Quota)
  return false;
#undef DO_
}

void Quota::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.api.Quota)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.api.QuotaLimit limits = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->limits_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->limits(static_cast<int>(i)),
      output);
  }

  // repeated .google.api.MetricRule metric_rules = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->metric_rules_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->metric_rules(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.api.Quota)
}

::google::protobuf::uint8* Quota::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.api.Quota)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.api.QuotaLimit limits = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->limits_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->limits(static_cast<int>(i)), deterministic, target);
  }

  // repeated .google.api.MetricRule metric_rules = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->metric_rules_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->metric_rules(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.api.Quota)
  return target;
}

size_t Quota::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.Quota)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.api.QuotaLimit limits = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->limits_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->limits(static_cast<int>(i)));
    }
  }

  // repeated .google.api.MetricRule metric_rules = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->metric_rules_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->metric_rules(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Quota::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.Quota)
  GOOGLE_DCHECK_NE(&from, this);
  const Quota* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Quota>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.Quota)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.Quota)
    MergeFrom(*source);
  }
}

void Quota::MergeFrom(const Quota& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.Quota)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  limits_.MergeFrom(from.limits_);
  metric_rules_.MergeFrom(from.metric_rules_);
}

void Quota::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.Quota)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Quota::CopyFrom(const Quota& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.Quota)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quota::IsInitialized() const {
  return true;
}

void Quota::Swap(Quota* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Quota::InternalSwap(Quota* other) {
  using std::swap;
  CastToBase(&limits_)->InternalSwap(CastToBase(&other->limits_));
  CastToBase(&metric_rules_)->InternalSwap(CastToBase(&other->metric_rules_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Quota::GetMetadata() const {
  protobuf_google_2fapi_2fquota_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fapi_2fquota_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

MetricRule_MetricCostsEntry_DoNotUse::MetricRule_MetricCostsEntry_DoNotUse() {}
MetricRule_MetricCostsEntry_DoNotUse::MetricRule_MetricCostsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void MetricRule_MetricCostsEntry_DoNotUse::MergeFrom(const MetricRule_MetricCostsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata MetricRule_MetricCostsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_google_2fapi_2fquota_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fapi_2fquota_2eproto::file_level_metadata[1];
}
void MetricRule_MetricCostsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void MetricRule::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MetricRule::kSelectorFieldNumber;
const int MetricRule::kMetricCostsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MetricRule::MetricRule()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fapi_2fquota_2eproto::scc_info_MetricRule.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.MetricRule)
}
MetricRule::MetricRule(const MetricRule& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  metric_costs_.MergeFrom(from.metric_costs_);
  selector_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.selector().size() > 0) {
    selector_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.selector_);
  }
  // @@protoc_insertion_point(copy_constructor:google.api.MetricRule)
}

void MetricRule::SharedCtor() {
  selector_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MetricRule::~MetricRule() {
  // @@protoc_insertion_point(destructor:google.api.MetricRule)
  SharedDtor();
}

void MetricRule::SharedDtor() {
  selector_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MetricRule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MetricRule::descriptor() {
  ::protobuf_google_2fapi_2fquota_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fapi_2fquota_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MetricRule& MetricRule::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fapi_2fquota_2eproto::scc_info_MetricRule.base);
  return *internal_default_instance();
}


void MetricRule::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.MetricRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metric_costs_.Clear();
  selector_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool MetricRule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.api.MetricRule)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string selector = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_selector()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->selector().data(), static_cast<int>(this->selector().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.MetricRule.selector"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, int64> metric_costs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          MetricRule_MetricCostsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              MetricRule_MetricCostsEntry_DoNotUse,
              ::std::string, ::google::protobuf::int64,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 > > parser(&metric_costs_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.MetricRule.MetricCostsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.api.MetricRule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.api.MetricRule)
  return false;
#undef DO_
}

void MetricRule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.api.MetricRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string selector = 1;
  if (this->selector().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->selector().data(), static_cast<int>(this->selector().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.MetricRule.selector");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->selector(), output);
  }

  // map<string, int64> metric_costs = 2;
  if (!this->metric_costs().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.api.MetricRule.MetricCostsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->metric_costs().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->metric_costs().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
          it = this->metric_costs().begin();
          it != this->metric_costs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<MetricRule_MetricCostsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(metric_costs_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<MetricRule_MetricCostsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
          it = this->metric_costs().begin();
          it != this->metric_costs().end(); ++it) {
        entry.reset(metric_costs_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.api.MetricRule)
}

::google::protobuf::uint8* MetricRule::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.api.MetricRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string selector = 1;
  if (this->selector().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->selector().data(), static_cast<int>(this->selector().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.MetricRule.selector");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->selector(), target);
  }

  // map<string, int64> metric_costs = 2;
  if (!this->metric_costs().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.api.MetricRule.MetricCostsEntry.key");
      }
    };

    if (deterministic &&
        this->metric_costs().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->metric_costs().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
          it = this->metric_costs().begin();
          it != this->metric_costs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<MetricRule_MetricCostsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(metric_costs_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<MetricRule_MetricCostsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
          it = this->metric_costs().begin();
          it != this->metric_costs().end(); ++it) {
        entry.reset(metric_costs_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.api.MetricRule)
  return target;
}

size_t MetricRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.MetricRule)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, int64> metric_costs = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->metric_costs_size());
  {
    ::std::unique_ptr<MetricRule_MetricCostsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
        it = this->metric_costs().begin();
        it != this->metric_costs().end(); ++it) {
      entry.reset(metric_costs_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string selector = 1;
  if (this->selector().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->selector());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MetricRule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.MetricRule)
  GOOGLE_DCHECK_NE(&from, this);
  const MetricRule* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MetricRule>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.MetricRule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.MetricRule)
    MergeFrom(*source);
  }
}

void MetricRule::MergeFrom(const MetricRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.MetricRule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metric_costs_.MergeFrom(from.metric_costs_);
  if (from.selector().size() > 0) {

    selector_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.selector_);
  }
}

void MetricRule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.MetricRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetricRule::CopyFrom(const MetricRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.MetricRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetricRule::IsInitialized() const {
  return true;
}

void MetricRule::Swap(MetricRule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MetricRule::InternalSwap(MetricRule* other) {
  using std::swap;
  metric_costs_.Swap(&other->metric_costs_);
  selector_.Swap(&other->selector_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MetricRule::GetMetadata() const {
  protobuf_google_2fapi_2fquota_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fapi_2fquota_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

QuotaLimit_ValuesEntry_DoNotUse::QuotaLimit_ValuesEntry_DoNotUse() {}
QuotaLimit_ValuesEntry_DoNotUse::QuotaLimit_ValuesEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void QuotaLimit_ValuesEntry_DoNotUse::MergeFrom(const QuotaLimit_ValuesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata QuotaLimit_ValuesEntry_DoNotUse::GetMetadata() const {
  ::protobuf_google_2fapi_2fquota_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fapi_2fquota_2eproto::file_level_metadata[3];
}
void QuotaLimit_ValuesEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void QuotaLimit::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QuotaLimit::kNameFieldNumber;
const int QuotaLimit::kDescriptionFieldNumber;
const int QuotaLimit::kDefaultLimitFieldNumber;
const int QuotaLimit::kMaxLimitFieldNumber;
const int QuotaLimit::kFreeTierFieldNumber;
const int QuotaLimit::kDurationFieldNumber;
const int QuotaLimit::kMetricFieldNumber;
const int QuotaLimit::kUnitFieldNumber;
const int QuotaLimit::kValuesFieldNumber;
const int QuotaLimit::kDisplayNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QuotaLimit::QuotaLimit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fapi_2fquota_2eproto::scc_info_QuotaLimit.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.QuotaLimit)
}
QuotaLimit::QuotaLimit(const QuotaLimit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  values_.MergeFrom(from.values_);
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  duration_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.duration().size() > 0) {
    duration_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.duration_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  metric_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.metric().size() > 0) {
    metric_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metric_);
  }
  unit_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.unit().size() > 0) {
    unit_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unit_);
  }
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.display_name().size() > 0) {
    display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
  ::memcpy(&default_limit_, &from.default_limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&free_tier_) -
    reinterpret_cast<char*>(&default_limit_)) + sizeof(free_tier_));
  // @@protoc_insertion_point(copy_constructor:google.api.QuotaLimit)
}

void QuotaLimit::SharedCtor() {
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  duration_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metric_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unit_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&default_limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&free_tier_) -
      reinterpret_cast<char*>(&default_limit_)) + sizeof(free_tier_));
}

QuotaLimit::~QuotaLimit() {
  // @@protoc_insertion_point(destructor:google.api.QuotaLimit)
  SharedDtor();
}

void QuotaLimit::SharedDtor() {
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  duration_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metric_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unit_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void QuotaLimit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* QuotaLimit::descriptor() {
  ::protobuf_google_2fapi_2fquota_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fapi_2fquota_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QuotaLimit& QuotaLimit::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fapi_2fquota_2eproto::scc_info_QuotaLimit.base);
  return *internal_default_instance();
}


void QuotaLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.QuotaLimit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  duration_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metric_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&default_limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&free_tier_) -
      reinterpret_cast<char*>(&default_limit_)) + sizeof(free_tier_));
  _internal_metadata_.Clear();
}

bool QuotaLimit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.api.QuotaLimit)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string description = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.QuotaLimit.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 default_limit = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &default_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 max_limit = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string duration = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_duration()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->duration().data(), static_cast<int>(this->duration().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.QuotaLimit.duration"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.QuotaLimit.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 free_tier = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &free_tier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string metric = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_metric()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->metric().data(), static_cast<int>(this->metric().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.QuotaLimit.metric"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string unit = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unit()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->unit().data(), static_cast<int>(this->unit().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.QuotaLimit.unit"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, int64> values = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          QuotaLimit_ValuesEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              QuotaLimit_ValuesEntry_DoNotUse,
              ::std::string, ::google::protobuf::int64,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 > > parser(&values_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.QuotaLimit.ValuesEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string display_name = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_display_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->display_name().data(), static_cast<int>(this->display_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.QuotaLimit.display_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.api.QuotaLimit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.api.QuotaLimit)
  return false;
#undef DO_
}

void QuotaLimit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.api.QuotaLimit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string description = 2;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.QuotaLimit.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->description(), output);
  }

  // int64 default_limit = 3;
  if (this->default_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->default_limit(), output);
  }

  // int64 max_limit = 4;
  if (this->max_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->max_limit(), output);
  }

  // string duration = 5;
  if (this->duration().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->duration().data(), static_cast<int>(this->duration().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.QuotaLimit.duration");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->duration(), output);
  }

  // string name = 6;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.QuotaLimit.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->name(), output);
  }

  // int64 free_tier = 7;
  if (this->free_tier() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->free_tier(), output);
  }

  // string metric = 8;
  if (this->metric().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->metric().data(), static_cast<int>(this->metric().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.QuotaLimit.metric");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->metric(), output);
  }

  // string unit = 9;
  if (this->unit().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->unit().data(), static_cast<int>(this->unit().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.QuotaLimit.unit");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->unit(), output);
  }

  // map<string, int64> values = 10;
  if (!this->values().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.api.QuotaLimit.ValuesEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->values().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->values().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
          it = this->values().begin();
          it != this->values().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<QuotaLimit_ValuesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(values_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            10, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<QuotaLimit_ValuesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
          it = this->values().begin();
          it != this->values().end(); ++it) {
        entry.reset(values_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            10, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // string display_name = 12;
  if (this->display_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->display_name().data(), static_cast<int>(this->display_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.QuotaLimit.display_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->display_name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.api.QuotaLimit)
}

::google::protobuf::uint8* QuotaLimit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.api.QuotaLimit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string description = 2;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.QuotaLimit.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  // int64 default_limit = 3;
  if (this->default_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->default_limit(), target);
  }

  // int64 max_limit = 4;
  if (this->max_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->max_limit(), target);
  }

  // string duration = 5;
  if (this->duration().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->duration().data(), static_cast<int>(this->duration().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.QuotaLimit.duration");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->duration(), target);
  }

  // string name = 6;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.QuotaLimit.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->name(), target);
  }

  // int64 free_tier = 7;
  if (this->free_tier() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->free_tier(), target);
  }

  // string metric = 8;
  if (this->metric().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->metric().data(), static_cast<int>(this->metric().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.QuotaLimit.metric");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->metric(), target);
  }

  // string unit = 9;
  if (this->unit().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->unit().data(), static_cast<int>(this->unit().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.QuotaLimit.unit");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->unit(), target);
  }

  // map<string, int64> values = 10;
  if (!this->values().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.api.QuotaLimit.ValuesEntry.key");
      }
    };

    if (deterministic &&
        this->values().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->values().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
          it = this->values().begin();
          it != this->values().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<QuotaLimit_ValuesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(values_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       10, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<QuotaLimit_ValuesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
          it = this->values().begin();
          it != this->values().end(); ++it) {
        entry.reset(values_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       10, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // string display_name = 12;
  if (this->display_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->display_name().data(), static_cast<int>(this->display_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.QuotaLimit.display_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->display_name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.api.QuotaLimit)
  return target;
}

size_t QuotaLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.QuotaLimit)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, int64> values = 10;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->values_size());
  {
    ::std::unique_ptr<QuotaLimit_ValuesEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
        it = this->values().begin();
        it != this->values().end(); ++it) {
      entry.reset(values_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // string duration = 5;
  if (this->duration().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->duration());
  }

  // string name = 6;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string metric = 8;
  if (this->metric().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->metric());
  }

  // string unit = 9;
  if (this->unit().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->unit());
  }

  // string display_name = 12;
  if (this->display_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->display_name());
  }

  // int64 default_limit = 3;
  if (this->default_limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->default_limit());
  }

  // int64 max_limit = 4;
  if (this->max_limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->max_limit());
  }

  // int64 free_tier = 7;
  if (this->free_tier() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->free_tier());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QuotaLimit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.QuotaLimit)
  GOOGLE_DCHECK_NE(&from, this);
  const QuotaLimit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QuotaLimit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.QuotaLimit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.QuotaLimit)
    MergeFrom(*source);
  }
}

void QuotaLimit::MergeFrom(const QuotaLimit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.QuotaLimit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.duration().size() > 0) {

    duration_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.duration_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.metric().size() > 0) {

    metric_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metric_);
  }
  if (from.unit().size() > 0) {

    unit_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unit_);
  }
  if (from.display_name().size() > 0) {

    display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
  if (from.default_limit() != 0) {
    set_default_limit(from.default_limit());
  }
  if (from.max_limit() != 0) {
    set_max_limit(from.max_limit());
  }
  if (from.free_tier() != 0) {
    set_free_tier(from.free_tier());
  }
}

void QuotaLimit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.QuotaLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuotaLimit::CopyFrom(const QuotaLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.QuotaLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuotaLimit::IsInitialized() const {
  return true;
}

void QuotaLimit::Swap(QuotaLimit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QuotaLimit::InternalSwap(QuotaLimit* other) {
  using std::swap;
  values_.Swap(&other->values_);
  description_.Swap(&other->description_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  duration_.Swap(&other->duration_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  metric_.Swap(&other->metric_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  unit_.Swap(&other->unit_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  display_name_.Swap(&other->display_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(default_limit_, other->default_limit_);
  swap(max_limit_, other->max_limit_);
  swap(free_tier_, other->free_tier_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata QuotaLimit::GetMetadata() const {
  protobuf_google_2fapi_2fquota_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fapi_2fquota_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace api
}  // namespace google
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::api::Quota* Arena::CreateMaybeMessage< ::google::api::Quota >(Arena* arena) {
  return Arena::CreateInternal< ::google::api::Quota >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::api::MetricRule_MetricCostsEntry_DoNotUse* Arena::CreateMaybeMessage< ::google::api::MetricRule_MetricCostsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::google::api::MetricRule_MetricCostsEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::api::MetricRule* Arena::CreateMaybeMessage< ::google::api::MetricRule >(Arena* arena) {
  return Arena::CreateInternal< ::google::api::MetricRule >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::api::QuotaLimit_ValuesEntry_DoNotUse* Arena::CreateMaybeMessage< ::google::api::QuotaLimit_ValuesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::google::api::QuotaLimit_ValuesEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::google::api::QuotaLimit* Arena::CreateMaybeMessage< ::google::api::QuotaLimit >(Arena* arena) {
  return Arena::CreateInternal< ::google::api::QuotaLimit >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
