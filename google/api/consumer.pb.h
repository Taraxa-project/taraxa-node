// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/consumer.proto

#ifndef PROTOBUF_INCLUDED_google_2fapi_2fconsumer_2eproto
#define PROTOBUF_INCLUDED_google_2fapi_2fconsumer_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fapi_2fconsumer_2eproto 

namespace protobuf_google_2fapi_2fconsumer_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_google_2fapi_2fconsumer_2eproto
namespace google {
namespace api {
class ProjectProperties;
class ProjectPropertiesDefaultTypeInternal;
extern ProjectPropertiesDefaultTypeInternal _ProjectProperties_default_instance_;
class Property;
class PropertyDefaultTypeInternal;
extern PropertyDefaultTypeInternal _Property_default_instance_;
}  // namespace api
}  // namespace google
namespace google {
namespace protobuf {
template<> ::google::api::ProjectProperties* Arena::CreateMaybeMessage<::google::api::ProjectProperties>(Arena*);
template<> ::google::api::Property* Arena::CreateMaybeMessage<::google::api::Property>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace google {
namespace api {

enum Property_PropertyType {
  Property_PropertyType_UNSPECIFIED = 0,
  Property_PropertyType_INT64 = 1,
  Property_PropertyType_BOOL = 2,
  Property_PropertyType_STRING = 3,
  Property_PropertyType_DOUBLE = 4,
  Property_PropertyType_Property_PropertyType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Property_PropertyType_Property_PropertyType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Property_PropertyType_IsValid(int value);
const Property_PropertyType Property_PropertyType_PropertyType_MIN = Property_PropertyType_UNSPECIFIED;
const Property_PropertyType Property_PropertyType_PropertyType_MAX = Property_PropertyType_DOUBLE;
const int Property_PropertyType_PropertyType_ARRAYSIZE = Property_PropertyType_PropertyType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Property_PropertyType_descriptor();
inline const ::std::string& Property_PropertyType_Name(Property_PropertyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Property_PropertyType_descriptor(), value);
}
inline bool Property_PropertyType_Parse(
    const ::std::string& name, Property_PropertyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Property_PropertyType>(
    Property_PropertyType_descriptor(), name, value);
}
// ===================================================================

class ProjectProperties : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.api.ProjectProperties) */ {
 public:
  ProjectProperties();
  virtual ~ProjectProperties();

  ProjectProperties(const ProjectProperties& from);

  inline ProjectProperties& operator=(const ProjectProperties& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProjectProperties(ProjectProperties&& from) noexcept
    : ProjectProperties() {
    *this = ::std::move(from);
  }

  inline ProjectProperties& operator=(ProjectProperties&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProjectProperties& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProjectProperties* internal_default_instance() {
    return reinterpret_cast<const ProjectProperties*>(
               &_ProjectProperties_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ProjectProperties* other);
  friend void swap(ProjectProperties& a, ProjectProperties& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProjectProperties* New() const final {
    return CreateMaybeMessage<ProjectProperties>(NULL);
  }

  ProjectProperties* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProjectProperties>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ProjectProperties& from);
  void MergeFrom(const ProjectProperties& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProjectProperties* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.api.Property properties = 1;
  int properties_size() const;
  void clear_properties();
  static const int kPropertiesFieldNumber = 1;
  ::google::api::Property* mutable_properties(int index);
  ::google::protobuf::RepeatedPtrField< ::google::api::Property >*
      mutable_properties();
  const ::google::api::Property& properties(int index) const;
  ::google::api::Property* add_properties();
  const ::google::protobuf::RepeatedPtrField< ::google::api::Property >&
      properties() const;

  // @@protoc_insertion_point(class_scope:google.api.ProjectProperties)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::api::Property > properties_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fapi_2fconsumer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Property : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.api.Property) */ {
 public:
  Property();
  virtual ~Property();

  Property(const Property& from);

  inline Property& operator=(const Property& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Property(Property&& from) noexcept
    : Property() {
    *this = ::std::move(from);
  }

  inline Property& operator=(Property&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Property& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Property* internal_default_instance() {
    return reinterpret_cast<const Property*>(
               &_Property_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Property* other);
  friend void swap(Property& a, Property& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Property* New() const final {
    return CreateMaybeMessage<Property>(NULL);
  }

  Property* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Property>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Property& from);
  void MergeFrom(const Property& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Property* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Property_PropertyType PropertyType;
  static const PropertyType UNSPECIFIED =
    Property_PropertyType_UNSPECIFIED;
  static const PropertyType INT64 =
    Property_PropertyType_INT64;
  static const PropertyType BOOL =
    Property_PropertyType_BOOL;
  static const PropertyType STRING =
    Property_PropertyType_STRING;
  static const PropertyType DOUBLE =
    Property_PropertyType_DOUBLE;
  static inline bool PropertyType_IsValid(int value) {
    return Property_PropertyType_IsValid(value);
  }
  static const PropertyType PropertyType_MIN =
    Property_PropertyType_PropertyType_MIN;
  static const PropertyType PropertyType_MAX =
    Property_PropertyType_PropertyType_MAX;
  static const int PropertyType_ARRAYSIZE =
    Property_PropertyType_PropertyType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PropertyType_descriptor() {
    return Property_PropertyType_descriptor();
  }
  static inline const ::std::string& PropertyType_Name(PropertyType value) {
    return Property_PropertyType_Name(value);
  }
  static inline bool PropertyType_Parse(const ::std::string& name,
      PropertyType* value) {
    return Property_PropertyType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string description = 3;
  void clear_description();
  static const int kDescriptionFieldNumber = 3;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // .google.api.Property.PropertyType type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::api::Property_PropertyType type() const;
  void set_type(::google::api::Property_PropertyType value);

  // @@protoc_insertion_point(class_scope:google.api.Property)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fapi_2fconsumer_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProjectProperties

// repeated .google.api.Property properties = 1;
inline int ProjectProperties::properties_size() const {
  return properties_.size();
}
inline void ProjectProperties::clear_properties() {
  properties_.Clear();
}
inline ::google::api::Property* ProjectProperties::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.ProjectProperties.properties)
  return properties_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::api::Property >*
ProjectProperties::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:google.api.ProjectProperties.properties)
  return &properties_;
}
inline const ::google::api::Property& ProjectProperties::properties(int index) const {
  // @@protoc_insertion_point(field_get:google.api.ProjectProperties.properties)
  return properties_.Get(index);
}
inline ::google::api::Property* ProjectProperties::add_properties() {
  // @@protoc_insertion_point(field_add:google.api.ProjectProperties.properties)
  return properties_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::api::Property >&
ProjectProperties::properties() const {
  // @@protoc_insertion_point(field_list:google.api.ProjectProperties.properties)
  return properties_;
}

// -------------------------------------------------------------------

// Property

// string name = 1;
inline void Property::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Property::name() const {
  // @@protoc_insertion_point(field_get:google.api.Property.name)
  return name_.GetNoArena();
}
inline void Property::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.Property.name)
}
#if LANG_CXX11
inline void Property::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.api.Property.name)
}
#endif
inline void Property::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.Property.name)
}
inline void Property::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.Property.name)
}
inline ::std::string* Property::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.api.Property.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Property::release_name() {
  // @@protoc_insertion_point(field_release:google.api.Property.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Property::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.api.Property.name)
}

// .google.api.Property.PropertyType type = 2;
inline void Property::clear_type() {
  type_ = 0;
}
inline ::google::api::Property_PropertyType Property::type() const {
  // @@protoc_insertion_point(field_get:google.api.Property.type)
  return static_cast< ::google::api::Property_PropertyType >(type_);
}
inline void Property::set_type(::google::api::Property_PropertyType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:google.api.Property.type)
}

// string description = 3;
inline void Property::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Property::description() const {
  // @@protoc_insertion_point(field_get:google.api.Property.description)
  return description_.GetNoArena();
}
inline void Property::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.Property.description)
}
#if LANG_CXX11
inline void Property::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.api.Property.description)
}
#endif
inline void Property::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.Property.description)
}
inline void Property::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.Property.description)
}
inline ::std::string* Property::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:google.api.Property.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Property::release_description() {
  // @@protoc_insertion_point(field_release:google.api.Property.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Property::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:google.api.Property.description)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace api
}  // namespace google

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::google::api::Property_PropertyType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::api::Property_PropertyType>() {
  return ::google::api::Property_PropertyType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_google_2fapi_2fconsumer_2eproto
