ifndef Makefile.submodules
Makefile.submodules=_

include Makefile.common

ifneq (1, $(NO_INSTALL_SUBMODULES))
SUBMODULE_DEPS := $(addsuffix /ok, $(shell scripts/submodule_list.sh))
# Submodule update
ifneq (1, $(NO_UPDATE_SUBMODULES))
$(info Checking/updating submodules...)
__SUBMODULE_UPDATE_LOG_FILE__ := $(shell mktemp)
__SUBMODULE_UPDATE_EXIT_CODE__ := $(shell \
	scripts/submodule_update.sh &> $(__SUBMODULE_UPDATE_LOG_FILE__); \
	echo $$?; \
)
ifneq (0, $(__SUBMODULE_UPDATE_EXIT_CODE__))
$(error Submodule update failed, log at: $(__SUBMODULE_UPDATE_LOG_FILE__))
endif
_ := $(shell rm $(__SUBMODULE_UPDATE_LOG_FILE__))
endif
endif

SUBMODULE_BUILD_INIT = \
	source scripts/lib/index.sh; \
	on_success touch $(CURDIR)/$@; \
	cd $(@D); \
	try_git_reset; \
	mkdir -p $(DEPS_INSTALL_PREFIX)

# ====================================================

submodules/openssl/ok:
	$(SUBMODULE_BUILD_INIT); \
	./config --prefix=$(DEPS_INSTALL_PREFIX) \
		--openssldir=$(DEPS_INSTALL_PREFIX)/ssl shared no-tests; \
	$(MAKE) install_runtime_libs; \


# ====================================================

submodules/boost/ok: submodules/openssl/ok
	$(SUBMODULE_BUILD_INIT); \
    ./bootstrap.sh --prefix=$(DEPS_INSTALL_PREFIX); \
    ./b2 \
		--with-thread --with-system --with-log --with-filesystem --with-program_options \
		-j$(CPU_COUNT) link=shared threading=multi install; \

# ====================================================

# TODO explore more cgo compiler optimization flags
TARAXA_EVM_LIB := taraxa-evm
submodules/taraxa-evm/ok: submodules/openssl/ok
	$(SUBMODULE_BUILD_INIT); \
	cd taraxa/C; \
	CGO_CFLAGS_ALLOW='.*' CGO_CXXFLAGS_ALLOW='.*' \
		CGO_CFLAGS="-O3" CGO_CXXFLAGS="-O3" \
		go build -buildmode=c-archive -o $(TARAXA_EVM_LIB).a; \
	copy . "*.h" $(DEPS_INSTALL_PREFIX)/include/taraxa-evm/; \
	cp $(TARAXA_EVM_LIB).a $(DEPS_INSTALL_PREFIX)/lib/lib$(TARAXA_EVM_LIB).a; \

# ====================================================

submodules/taraxa-vdf/ok: submodules/boost/ok
	$(SUBMODULE_BUILD_INIT); \
	$(MAKE) OPENSSL_HOME=$(DEPS_INSTALL_PREFIX); \
	copy . "include/*.*" $(DEPS_INSTALL_PREFIX)/; \
	copy . "lib/*.*" $(DEPS_INSTALL_PREFIX)/; \

# ====================================================

submodules/taraxa-vrf/ok: submodules/boost/ok
	$(SUBMODULE_BUILD_INIT); \
	autoreconf; \
	automake; \
	./configure --prefix=$(DEPS_INSTALL_PREFIX); \
	$(MAKE); \
	$(MAKE) install; \

# ====================================================

submodules/googletest/ok: submodules/boost/ok
	$(SUBMODULE_BUILD_INIT); \
	mkdir_cd build; \
	cmake -DCMAKE_INSTALL_PREFIX=$(DEPS_INSTALL_PREFIX) ..; \
	$(MAKE); \
	$(MAKE) install; \

# ====================================================

CRYPTOPP_COMPILE_DEFIINITIONS :=
ifneq ($(OS), Darwin)
	CRYPTOPP_COMPILE_DEFIINITIONS := CRYPTOPP_DISABLE_ASM
endif
submodules/cryptopp/ok: submodules/boost/ok
	$(SUBMODULE_BUILD_INIT); \
	if [ $(OS) = 'Darwin' ]; then \
		$(MAKE); \
	else \
		$(MAKE) CXXFLAGS="-DNDEBUG -g2 -O3 -fPIC \
			$(addprefix -D, $(CRYPTOPP_COMPILE_DEFIINITIONS)) \
			-pthread -pipe -c"; \
	fi; \
	$(MAKE) PREFIX=$(DEPS_INSTALL_PREFIX) install; \

# ====================================================

submodules/ethash/ok: submodules/boost/ok
	$(SUBMODULE_BUILD_INIT); \
	mkdir_cd build; \
	cmake -DCMAKE_INSTALL_PREFIX=$(DEPS_INSTALL_PREFIX) .. \
		-DBUILD_TESTING=OFF \
		-DBUILD_SHARED_LIBS=OFF \
		-DETHASH_BUILD_TESTS=OFF \
		-DHUNTER_ENABLED=OFF; \
	$(MAKE); \
	$(MAKE) install; \

# ====================================================

submodules/libff/ok: submodules/boost/ok
	$(SUBMODULE_BUILD_INIT); \
	mkdir_cd build; \
	cmake -DCMAKE_INSTALL_PREFIX=$(DEPS_INSTALL_PREFIX) .. \
		-DBUILD_TESTING=OFF \
		-DBUILD_SHARED_LIBS=OFF \
		-DWITH_PROCPS=OFF \
		-DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=c++ \
		-DOPENSSL_ROOT_DIR=$(DEPS_INSTALL_PREFIX); \
	$(MAKE); \
	$(MAKE) install; \

# ====================================================

submodules/secp256k1/ok: submodules/boost/ok
	$(SUBMODULE_BUILD_INIT); \
	./autogen.sh; \
	./configure --prefix=$(DEPS_INSTALL_PREFIX) \
		--disable-shared --disable-tests \
		--disable-coverage --disable-openssl-tests \
		--disable-exhaustive-tests \
		--disable-jni --with-bignum=no --with-field=64bit \
		--with-scalar=64bit --with-asm=no \
		--enable-module-ecdh --enable-module-recovery \
		--enable-experimental; \
	$(MAKE); \
	$(MAKE) install; \

# ====================================================

ALETH_ROOT := $(CURDIR)/submodules/taraxa-aleth
ALETH_BUILD_DIR := $(ALETH_ROOT)/build
ALETH_OBJ_DIR := $(ALETH_BUILD_DIR)/obj
ALETH_SRCS := $(shell \
	find $(ALETH_ROOT) -path "$(ALETH_ROOT)/lib*/*.cpp" \
	-a ! -path "$(ALETH_ROOT)/libweb3jsonrpc/WinPipeServer.cpp" \
)
ALETH_OBJS = $(subst $(ALETH_ROOT),$(ALETH_OBJ_DIR),$(ALETH_SRCS:.cpp=.o))
TARAXA_ALETH_LIB := taraxa-aleth

$(ALETH_OBJ_DIR)/%.o: $(ALETH_ROOT)/%.cpp
	mkdir -p $(@D)
	$(strip \
		$(CXX) -c -std=$(CXX_STD) -g \
		-I$(ALETH_ROOT) \
		-I$(DEPS_INSTALL_PREFIX)/include \
		-I$(JSONCPP_INCLUDE_DIR) \
		$(addprefix -D, \
			$(BOOST_COMPILE_DEFINITIONS) \
			$(CRYPTOPP_COMPILE_DEFIINITIONS) \
		) \
		-o $@ $< \
	)

submodules/taraxa-aleth/ok: \
submodules/cryptopp/ok \
submodules/ethash/ok \
submodules/libff/ok \
submodules/secp256k1/ok
	$(SUBMODULE_BUILD_INIT); \
	copy $(ALETH_ROOT)/utils "*.h" $(DEPS_INSTALL_PREFIX)/include; \
	$(MAKE) -C $(CURDIR) -f Makefile.submodules NO_UPDATE_SUBMODULES=1 \
		$(ALETH_OBJS); \
	ar -rcs $(DEPS_INSTALL_PREFIX)/lib/lib$(TARAXA_ALETH_LIB).a $(ALETH_OBJS); \
	copy $(ALETH_ROOT) "lib*/*.h" $(DEPS_INSTALL_PREFIX)/include; \

# ====================================================

.PHONY: submodules

submodules: $(SUBMODULE_DEPS)

endif # Makefile.submodules
