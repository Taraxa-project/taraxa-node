ifndef Makefile.submodules
Makefile.submodules=_

include Makefile.common

# ====================================================

ifneq (1, $(NO_SYNC_SUBMODULES))
$(info Syncing submodules...)
__SUBMODULE_UPDATE_LOG_FILE__ := $(shell mktemp)
__SUBMODULE_UPDATE_EXIT_CODE__ := $(shell \
	if git status &> /dev/null; then \
		( \
			git submodule update --init --recursive && \
			git submodule foreach "git restore . && git clean -dfx && git reset --hard" \
		) &> $(__SUBMODULE_UPDATE_LOG_FILE__); \
	fi; \
	echo $$?; \
)
ifneq (0, $(__SUBMODULE_UPDATE_EXIT_CODE__))
$(error Submodule update failed, log at: $(__SUBMODULE_UPDATE_LOG_FILE__))
endif
_ := $(shell rm $(__SUBMODULE_UPDATE_LOG_FILE__))
endif

# ====================================================

SUBMODULES := $(shell scripts/submodule_list.sh)
SUBMODULES_BUILD_DIRS := $(addprefix $(BUILD_BASEDIR)/, $(SUBMODULES))
SUBMODULES_BUILT_INDICATORS := $(addsuffix /ok, $(SUBMODULES_BUILD_DIRS))

.SECONDEXPANSION:
$(SUBMODULES_BUILT_INDICATORS): $(SUBMODULES_BUILD_BASEDIR)/%/ok: \
$$(wildcard submodules/%/*) \
submodules/%

$(SUBMODULES_INSTALL_PREFIX): $(SUBMODULES_BUILT_INDICATORS)
	rm -rf "$@"
	mkdir -p "$@"
	for dir in $(SUBMODULES_BUILD_DIRS); do \
		cp -r $${dir}/out/* "$@/"; \
	done; \

SUBMODULE_BUILD_BEGIN = \
	source scripts/lib/index.sh; \
	export CURR_INSTALL_PREFIX="$(@D)"/out; \
	on_success touch "$@"; \
	rm -rf "$(@D)"; \
	mkdir -p $${CURR_INSTALL_PREFIX}; \
	mkdir -p "$(@D)"/src; \
	cp -r $(CURDIR)/submodules/$(notdir $(@D))/* "$(@D)"/src/; \
	cd "$(@D)"/src

# ====================================================

$(SUBMODULES_BUILD_BASEDIR)/prometheus-cpp/ok:
	$(SUBMODULE_BUILD_BEGIN); \
	mkdir_cd build; \
	cmake .. -DCMAKE_INSTALL_PREFIX=$${CURR_INSTALL_PREFIX} \
		-DBUILD_TESTING=OFF \
		-DBUILD_SHARED_LIBS=OFF \
		-DENABLE_TESTING=OFF; \
	$(MAKE); \
	$(MAKE) install; \

# ====================================================

TARAXA_EVM_LIB := taraxa_evm_cgo
$(SUBMODULES_BUILD_BASEDIR)/taraxa-evm/ok:
	$(SUBMODULE_BUILD_BEGIN); \
	copy . "taraxa/*.h" $${CURR_INSTALL_PREFIX}/include; \
	go build -tags=secp256k1_no_cgo -buildmode=c-archive \
		-o $${CURR_INSTALL_PREFIX}/lib/lib$(TARAXA_EVM_LIB).a; \
	mv $${CURR_INSTALL_PREFIX}/lib/lib$(TARAXA_EVM_LIB).h \
		$${CURR_INSTALL_PREFIX}/include/$(TARAXA_EVM_LIB).h; \

# ====================================================

$(SUBMODULES_BUILD_BASEDIR)/openssl/ok:
	$(SUBMODULE_BUILD_BEGIN); \
	./config no-tests --prefix=$${CURR_INSTALL_PREFIX} \
		--openssldir=$${CURR_INSTALL_PREFIX}/ssl; \
	$(MAKE); \
	$(MAKE) install_sw; \

# ====================================================

$(SUBMODULES_BUILD_BASEDIR)/taraxa-vdf/ok: \
$(SUBMODULES_BUILD_BASEDIR)/openssl/ok
	$(SUBMODULE_BUILD_BEGIN); \
	$(MAKE) OPENSSL_HOME=$(SUBMODULES_BUILD_BASEDIR)/openssl/out; \
	copy . "include/*.*" $${CURR_INSTALL_PREFIX}/; \
	copy . "lib/*.*" $${CURR_INSTALL_PREFIX}/; \

# ====================================================

$(SUBMODULES_BUILD_BASEDIR)/taraxa-vrf/ok:
	$(SUBMODULE_BUILD_BEGIN); \
	automake; \
	./configure --prefix=$${CURR_INSTALL_PREFIX}; \
	$(MAKE); \
	$(MAKE) install; \

# ====================================================

$(SUBMODULES_BUILD_BASEDIR)/googletest/ok:
	$(SUBMODULE_BUILD_BEGIN); \
	mkdir_cd build; \
	cmake -DCMAKE_INSTALL_PREFIX=$${CURR_INSTALL_PREFIX} ..; \
	$(MAKE); \
	$(MAKE) install; \

# ====================================================

CRYPTOPP_COMPILE_DEFIINITIONS :=
ifneq ($(OS), Darwin)
	CRYPTOPP_COMPILE_DEFIINITIONS := CRYPTOPP_DISABLE_ASM
endif
$(SUBMODULES_BUILD_BASEDIR)/cryptopp/ok:
	$(SUBMODULE_BUILD_BEGIN); \
	if [ $(OS) = 'Darwin' ]; then \
		$(MAKE); \
	else \
		$(MAKE) CXXFLAGS="-DNDEBUG -g2 -O3 -fPIC \
			$(addprefix -D, $(CRYPTOPP_COMPILE_DEFIINITIONS)) \
			-pthread -pipe -c"; \
	fi; \
	$(MAKE) PREFIX=$${CURR_INSTALL_PREFIX} install; \

# ====================================================

$(SUBMODULES_BUILD_BASEDIR)/ethash/ok:
	$(SUBMODULE_BUILD_BEGIN); \
	mkdir_cd build; \
	cmake -DCMAKE_INSTALL_PREFIX=$${CURR_INSTALL_PREFIX} .. \
		-DBUILD_TESTING=OFF \
		-DBUILD_SHARED_LIBS=OFF \
		-DETHASH_BUILD_TESTS=OFF \
		-DHUNTER_ENABLED=OFF; \
	$(MAKE); \
	$(MAKE) install; \

# ====================================================

$(SUBMODULES_BUILD_BASEDIR)/libff/ok: \
$(SUBMODULES_BUILD_BASEDIR)/openssl/ok
	$(SUBMODULE_BUILD_BEGIN); \
	mkdir_cd build; \
	cmake -DCMAKE_INSTALL_PREFIX=$${CURR_INSTALL_PREFIX} .. \
		-DBUILD_TESTING=OFF \
		-DBUILD_SHARED_LIBS=OFF \
		-DWITH_PROCPS=OFF \
		-DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=c++ \
		-DOPENSSL_ROOT_DIR=$(SUBMODULES_BUILD_BASEDIR)/openssl/out \
		-DOPENSSL_LIBRARIES=$(SUBMODULES_BUILD_BASEDIR)/openssl/out/lib; \
	$(MAKE); \
	$(MAKE) install; \

# ====================================================

$(SUBMODULES_BUILD_BASEDIR)/secp256k1/ok:
	$(SUBMODULE_BUILD_BEGIN); \
	./autogen.sh; \
	./configure --prefix=$${CURR_INSTALL_PREFIX} \
		--disable-shared --disable-tests \
		--disable-coverage --disable-openssl-tests \
		--disable-exhaustive-tests \
		--disable-jni --with-bignum=no --with-field=64bit \
		--with-scalar=64bit --with-asm=no \
		--enable-module-ecdh --enable-module-recovery \
		--enable-experimental; \
	$(MAKE); \
	$(MAKE) install; \

# ====================================================

ALETH_ROOT := $(SUBMODULES_BUILD_BASEDIR)/taraxa-aleth/src
ALETH_BUILD_DIR := $(ALETH_ROOT)/build
ALETH_OBJ_DIR := $(ALETH_BUILD_DIR)/obj
ALETH_SRCS := $(shell \
	cd submodules/taraxa-aleth; \
	find * -path "lib*/*.cpp" -a ! -path "libweb3jsonrpc/WinPipeServer.cpp" \
)
ALETH_OBJS := $(addprefix $(ALETH_OBJ_DIR)/, $(ALETH_SRCS:.cpp=.o))
ALETH_COMPILE_DEFINITIONS := ETH_FATDB
TARAXA_ALETH_LIB := taraxa-aleth
ALETH_LIBS := \
	$(TARAXA_ALETH_LIB) \
	evmc-loader \
	evmc-instructions \
	aleth-buildinfo

$(ALETH_OBJ_DIR)/%.o: $(ALETH_ROOT)/%.cpp
	mkdir -p $(@D)
	$(strip \
		$(CXX) -c -std=$(CXX_STD) -O3 \
		-I$(ALETH_ROOT) \
		-I$(SUBMODULES_BUILD_BASEDIR)/taraxa-aleth/out/include \
		-I$(SUBMODULES_BUILD_BASEDIR)/cryptopp/out/include \
		-I$(SUBMODULES_BUILD_BASEDIR)/ethash/out/include \
		-I$(SUBMODULES_BUILD_BASEDIR)/libff/out/include \
		-I$(SUBMODULES_BUILD_BASEDIR)/secp256k1/out/include \
		-I$(JSONCPP_INCLUDE_DIR) \
		$(addprefix -D, \
			$(BOOST_COMPILE_DEFINITIONS) \
			$(CRYPTOPP_COMPILE_DEFIINITIONS) \
			$(ALETH_COMPILE_DEFINITIONS) \
		) \
		-o $@ $< \
	)

$(SUBMODULES_BUILD_BASEDIR)/taraxa-aleth/ok: \
$(SUBMODULES_BUILD_BASEDIR)/cryptopp/ok \
$(SUBMODULES_BUILD_BASEDIR)/ethash/ok \
$(SUBMODULES_BUILD_BASEDIR)/libff/ok \
$(SUBMODULES_BUILD_BASEDIR)/secp256k1/ok
	$(SUBMODULE_BUILD_BEGIN); \
	mkdir_cd $(ALETH_BUILD_DIR)/taraxa-aleth-buildinfo; \
	cmake -DCMAKE_INSTALL_PREFIX=$${CURR_INSTALL_PREFIX} \
		$(ALETH_ROOT)/taraxa-aleth-buildinfo; \
	$(MAKE); \
	$(MAKE) install; \
	mkdir_cd $(ALETH_BUILD_DIR)/evmc; \
	cmake -DCMAKE_INSTALL_PREFIX=$${CURR_INSTALL_PREFIX} \
		$(ALETH_ROOT)/evmc; \
	$(MAKE); \
	$(MAKE) install; \
	copy $(ALETH_ROOT)/utils "*.h" $${CURR_INSTALL_PREFIX}/include; \
	$(MAKE) \
		-C $(CURDIR) \
		-f Makefile.submodules \
		NO_SYNC_SUBMODULES=1 \
		$(ALETH_OBJS); \
	ar -rcs $${CURR_INSTALL_PREFIX}/lib/lib$(TARAXA_ALETH_LIB).a $(ALETH_OBJS); \
	copy $(ALETH_ROOT) "lib*/*.h" $${CURR_INSTALL_PREFIX}/include; \

# ====================================================

submodules: $(SUBMODULES_INSTALL_PREFIX)

.PHONY: submodules

endif # Makefile.submodules